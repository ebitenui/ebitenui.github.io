var relearn_searchindex = [
  {
    "breadcrumb": "Layouts",
    "content": "Anchor layout allows the child containers to be anchored to a specific constraint.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78\troot := widget.NewContainer( 79\twidget.ContainerOpts.BackgroundImage( 80\timage.NewNineSliceColor(colornames.Gainsboro), 81\t), 82\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 83\twidget.AnchorLayoutOpts.Padding(widget.NewInsetsSimple(50)), 84\t)), 85\t) 86\troot.AddChild(center) 87\troot.AddChild(left) 88\troot.AddChild(right) 89\troot.AddChild(up) 90\troot.AddChild(down) 91 92\treturn \u0026Game{ 93\tui: \u0026ebitenui.UI{Container: root}, 94\t} 95} 96 97func (g *Game) Update() error { 98\tg.ui.Update() 99\treturn nil 100} 101 102func (g *Game) Draw(screen *ebiten.Image) { 103\tg.ui.Draw(screen) 104} 105 106func (g *Game) Layout(w, h int) (int, int) { 107\treturn w, h 108} 109 110func main() { 111\tebiten.SetWindowSize(480, 320) 112\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 113\tif err := ebiten.RunGame(NewGame()); err != nil { 114\tpanic(err) 115\t} 116} Layout options Padding Layout allows you to specify padding for all child elements but not the itself.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tLeft: 50, 8\t}), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78\troot := widget.NewContainer( 79\twidget.ContainerOpts.BackgroundImage( 80\timage.NewNineSliceColor(colornames.Gainsboro), 81\t), 82\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 83\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 84\tLeft: 50, 85\t}), 86\t)), 87\t) 88\troot.AddChild(center) 89\troot.AddChild(left) 90\troot.AddChild(right) 91\troot.AddChild(up) 92\troot.AddChild(down) 93 94\treturn \u0026Game{ 95\tui: \u0026ebitenui.UI{Container: root}, 96\t} 97} 98 99func (g *Game) Update() error { 100\tg.ui.Update() 101\treturn nil 102} 103 104func (g *Game) Draw(screen *ebiten.Image) { 105\tg.ui.Draw(screen) 106} 107 108func (g *Game) Layout(w, h int) (int, int) { 109\treturn w, h 110} 111 112func main() { 113\tebiten.SetWindowSize(480, 320) 114\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 115\tif err := ebiten.RunGame(NewGame()); err != nil { 116\tpanic(err) 117\t} 118} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tRight: 50, 8\t}), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78\troot := widget.NewContainer( 79\twidget.ContainerOpts.BackgroundImage( 80\timage.NewNineSliceColor(colornames.Gainsboro), 81\t), 82\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 83\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 84\tRight: 50, 85\t}), 86\t)), 87\t) 88\troot.AddChild(center) 89\troot.AddChild(left) 90\troot.AddChild(right) 91\troot.AddChild(up) 92\troot.AddChild(down) 93 94\treturn \u0026Game{ 95\tui: \u0026ebitenui.UI{Container: root}, 96\t} 97} 98 99func (g *Game) Update() error { 100\tg.ui.Update() 101\treturn nil 102} 103 104func (g *Game) Draw(screen *ebiten.Image) { 105\tg.ui.Draw(screen) 106} 107 108func (g *Game) Layout(w, h int) (int, int) { 109\treturn w, h 110} 111 112func main() { 113\tebiten.SetWindowSize(480, 320) 114\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 115\tif err := ebiten.RunGame(NewGame()); err != nil { 116\tpanic(err) 117\t} 118} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tTop: 50, 8\t}), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78\troot := widget.NewContainer( 79\twidget.ContainerOpts.BackgroundImage( 80\timage.NewNineSliceColor(colornames.Gainsboro), 81\t), 82\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 83\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 84\tTop: 50, 85\t}), 86\t)), 87\t) 88\troot.AddChild(center) 89\troot.AddChild(left) 90\troot.AddChild(right) 91\troot.AddChild(up) 92\troot.AddChild(down) 93 94\treturn \u0026Game{ 95\tui: \u0026ebitenui.UI{Container: root}, 96\t} 97} 98 99func (g *Game) Update() error { 100\tg.ui.Update() 101\treturn nil 102} 103 104func (g *Game) Draw(screen *ebiten.Image) { 105\tg.ui.Draw(screen) 106} 107 108func (g *Game) Layout(w, h int) (int, int) { 109\treturn w, h 110} 111 112func main() { 113\tebiten.SetWindowSize(480, 320) 114\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 115\tif err := ebiten.RunGame(NewGame()); err != nil { 116\tpanic(err) 117\t} 118} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tBottom: 50, 8\t}), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78\troot := widget.NewContainer( 79\twidget.ContainerOpts.BackgroundImage( 80\timage.NewNineSliceColor(colornames.Gainsboro), 81\t), 82\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 83\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 84\tBottom: 50, 85\t}), 86\t)), 87\t) 88\troot.AddChild(center) 89\troot.AddChild(left) 90\troot.AddChild(right) 91\troot.AddChild(up) 92\troot.AddChild(down) 93 94\treturn \u0026Game{ 95\tui: \u0026ebitenui.UI{Container: root}, 96\t} 97} 98 99func (g *Game) Update() error { 100\tg.ui.Update() 101\treturn nil 102} 103 104func (g *Game) Draw(screen *ebiten.Image) { 105\tg.ui.Draw(screen) 106} 107 108func (g *Game) Layout(w, h int) (int, int) { 109\treturn w, h 110} 111 112func main() { 113\tebiten.SetWindowSize(480, 320) 114\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 115\tif err := ebiten.RunGame(NewGame()); err != nil { 116\tpanic(err) 117\t} 118} Layout data Position Responsible for aligning the child container along the horizontal and vertical axes.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tVerticalPosition: widget.AnchorLayoutPositionStart, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 23\tVerticalPosition: widget.AnchorLayoutPositionStart, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 23\tVerticalPosition: widget.AnchorLayoutPositionStart, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tVerticalPosition: widget.AnchorLayoutPositionCenter, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 23\tVerticalPosition: widget.AnchorLayoutPositionCenter, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 23\tVerticalPosition: widget.AnchorLayoutPositionCenter, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tVerticalPosition: widget.AnchorLayoutPositionEnd, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 23\tVerticalPosition: widget.AnchorLayoutPositionEnd, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tcenter := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Darkslategray), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 23\tVerticalPosition: widget.AnchorLayoutPositionEnd, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\troot := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Gainsboro), 31\t), 32\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 33\t) 34\troot.AddChild(center) 35 36\treturn \u0026Game{ 37\tui: \u0026ebitenui.UI{Container: root}, 38\t} 39} 40 41func (g *Game) Update() error { 42\tg.ui.Update() 43\treturn nil 44} 45 46func (g *Game) Draw(screen *ebiten.Image) { 47\tg.ui.Draw(screen) 48} 49 50func (g *Game) Layout(w, h int) (int, int) { 51\treturn w, h 52} 53 54func main() { 55\tebiten.SetWindowSize(480, 320) 56\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 57\tif err := ebiten.RunGame(NewGame()); err != nil { 58\tpanic(err) 59\t} 60}",
    "description": "Anchor layout allows the child containers to be anchored to a specific constraint.",
    "tags": [],
    "title": "Anchor",
    "uri": "/eui/layouts/anchor/index.html"
  },
  {
    "breadcrumb": "",
    "content": "This guide will introduce you step by step to the basics of the library and teach you how to use all the main tools.\nRequirements Go \u003e= 1.23 Ebitengine \u003e= 1e6c461 Ebitenui \u003e= b696e24 Content Container \u0026 layouts",
    "description": "This guide will introduce you step by step to the basics of the library and teach you how to use all the main tools.",
    "tags": [],
    "title": "Basics",
    "uri": "/eui/basics/index.html"
  },
  {
    "breadcrumb": "Widgets",
    "content": "A simple button with text that can be set to a background color or image for each state and a callback to react to events.\nFull example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func DefaultFont() text.Face { 72\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 73\tif err != nil { 74\tpanic(err) 75\t} 76\treturn \u0026text.GoTextFace{ 77\tSource: s, 78\tSize: 20, 79\t} 80} 81 82func DefaultNineSlice(base color.Color) *image.NineSlice { 83\tvar size float32 = 64 84\tvar tiles float32 = 16 85\tvar radius float32 = 8 86 87\ttile := size / tiles 88\tfacet := Mix(base, colornames.Gainsboro, 0.2) 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97 98\treturn image.NewNineSliceBorder(img, int(tile*4)) 99} 100 101func PressedNineSlice(base color.Color) *image.NineSlice { 102\tvar size float32 = 64 103\tvar tiles float32 = 16 104\tvar radius float32 = 8 105 106\ttile := size / tiles 107\tfacet := Mix(base, colornames.Gainsboro, 0.2) 108 109\timg := ebiten.NewImage(int(size), int(size)) 110\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 112\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 138\tpath := \u0026vector.Path{} 139 140\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 141\tpath.LineTo(x+w, y+h-br) 142\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 143\tpath.LineTo(x+bl, y+h) 144\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 145\tpath.LineTo(x, y+tl) 146\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 147\tpath.Close() 148 149\treturn path 150} 151 152func main() { 153\tebiten.SetWindowSize(480, 320) 154\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 155\tif err := ebiten.RunGame(NewGame()); err != nil { 156\tpanic(err) 157\t} 158} Widget options Text padding Responsible for setting text offset from the center of the button.\nPadding: Left Right Top Bottom 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tLeft: 88, 4\t}), 5) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tface := DefaultFont() 23\tbutton := widget.NewButton( 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextFace(face), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39\twidget.ButtonOpts.TextPadding(widget.Insets{ 40\tLeft: 88, 41\t}), 42\twidget.ButtonOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 44\tVerticalPosition: widget.AnchorLayoutPositionCenter, 45\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(180, 48), 48\t), 49\t) 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultFont() text.Face { 77\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 78\tif err != nil { 79\tpanic(err) 80\t} 81\treturn \u0026text.GoTextFace{ 82\tSource: s, 83\tSize: 20, 84\t} 85} 86 87func DefaultNineSlice(base color.Color) *image.NineSlice { 88\tvar size float32 = 64 89\tvar tiles float32 = 16 90\tvar radius float32 = 8 91 92\ttile := size / tiles 93\tfacet := Mix(base, colornames.Gainsboro, 0.2) 94 95\timg := ebiten.NewImage(int(size), int(size)) 96\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func PressedNineSlice(base color.Color) *image.NineSlice { 107\tvar size float32 = 64 108\tvar tiles float32 = 16 109\tvar radius float32 = 8 110 111\ttile := size / tiles 112\tfacet := Mix(base, colornames.Gainsboro, 0.2) 113 114\timg := ebiten.NewImage(int(size), int(size)) 115\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 117\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 118\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 119 120\treturn image.NewNineSliceBorder(img, int(tile*4)) 121} 122 123func Mix(a, b color.Color, percent float64) color.Color { 124\trgba := func(c color.Color) (r, g, b, a uint8) { 125\tr16, g16, b16, a16 := c.RGBA() 126\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 127\t} 128\tlerp := func(x, y uint8) uint8 { 129\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 130\t} 131\tr1, g1, b1, a1 := rgba(a) 132\tr2, g2, b2, a2 := rgba(b) 133 134\treturn color.RGBA{ 135\tR: lerp(r1, r2), 136\tG: lerp(g1, g2), 137\tB: lerp(b1, b2), 138\tA: lerp(a1, a2), 139\t} 140} 141 142func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 143\tpath := \u0026vector.Path{} 144 145\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 146\tpath.LineTo(x+w, y+h-br) 147\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 148\tpath.LineTo(x+bl, y+h) 149\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 150\tpath.LineTo(x, y+tl) 151\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 152\tpath.Close() 153 154\treturn path 155} 156 157func main() { 158\tebiten.SetWindowSize(480, 320) 159\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 160\tif err := ebiten.RunGame(NewGame()); err != nil { 161\tpanic(err) 162\t} 163} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tRight: 88, 4\t}), 5) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPadding(widget.Insets{ 38\tRight: 88, 39\t}), 40\twidget.ButtonOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42\tVerticalPosition: widget.AnchorLayoutPositionCenter, 43\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 44\t}), 45\twidget.WidgetOpts.MinSize(180, 48), 46\t), 47\t) 48\troot := widget.NewContainer( 49\twidget.ContainerOpts.BackgroundImage( 50\timage.NewNineSliceColor(colornames.Gainsboro), 51\t), 52\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 53\t) 54\troot.AddChild(button) 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func DefaultNineSlice(base color.Color) *image.NineSlice { 86\tvar size float32 = 64 87\tvar tiles float32 = 16 88\tvar radius float32 = 8 89 90\ttile := size / tiles 91\tfacet := Mix(base, colornames.Gainsboro, 0.2) 92 93\timg := ebiten.NewImage(int(size), int(size)) 94\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 100 101\treturn image.NewNineSliceBorder(img, int(tile*4)) 102} 103 104func PressedNineSlice(base color.Color) *image.NineSlice { 105\tvar size float32 = 64 106\tvar tiles float32 = 16 107\tvar radius float32 = 8 108 109\ttile := size / tiles 110\tfacet := Mix(base, colornames.Gainsboro, 0.2) 111 112\timg := ebiten.NewImage(int(size), int(size)) 113\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 115\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 117 118\treturn image.NewNineSliceBorder(img, int(tile*4)) 119} 120 121func Mix(a, b color.Color, percent float64) color.Color { 122\trgba := func(c color.Color) (r, g, b, a uint8) { 123\tr16, g16, b16, a16 := c.RGBA() 124\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 125\t} 126\tlerp := func(x, y uint8) uint8 { 127\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 128\t} 129\tr1, g1, b1, a1 := rgba(a) 130\tr2, g2, b2, a2 := rgba(b) 131 132\treturn color.RGBA{ 133\tR: lerp(r1, r2), 134\tG: lerp(g1, g2), 135\tB: lerp(b1, b2), 136\tA: lerp(a1, a2), 137\t} 138} 139 140func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 141\tpath := \u0026vector.Path{} 142 143\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 144\tpath.LineTo(x+w, y+h-br) 145\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 146\tpath.LineTo(x+bl, y+h) 147\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 148\tpath.LineTo(x, y+tl) 149\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 150\tpath.Close() 151 152\treturn path 153} 154 155func main() { 156\tebiten.SetWindowSize(480, 320) 157\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 158\tif err := ebiten.RunGame(NewGame()); err != nil { 159\tpanic(err) 160\t} 161} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tTop: 14, 4\t}), 5) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPadding(widget.Insets{ 38\tTop: 14, 39\t}), 40\twidget.ButtonOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42\tVerticalPosition: widget.AnchorLayoutPositionCenter, 43\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 44\t}), 45\twidget.WidgetOpts.MinSize(180, 48), 46\t), 47\t) 48\troot := widget.NewContainer( 49\twidget.ContainerOpts.BackgroundImage( 50\timage.NewNineSliceColor(colornames.Gainsboro), 51\t), 52\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 53\t) 54\troot.AddChild(button) 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func DefaultNineSlice(base color.Color) *image.NineSlice { 86\tvar size float32 = 64 87\tvar tiles float32 = 16 88\tvar radius float32 = 8 89 90\ttile := size / tiles 91\tfacet := Mix(base, colornames.Gainsboro, 0.2) 92 93\timg := ebiten.NewImage(int(size), int(size)) 94\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 100 101\treturn image.NewNineSliceBorder(img, int(tile*4)) 102} 103 104func PressedNineSlice(base color.Color) *image.NineSlice { 105\tvar size float32 = 64 106\tvar tiles float32 = 16 107\tvar radius float32 = 8 108 109\ttile := size / tiles 110\tfacet := Mix(base, colornames.Gainsboro, 0.2) 111 112\timg := ebiten.NewImage(int(size), int(size)) 113\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 115\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 117 118\treturn image.NewNineSliceBorder(img, int(tile*4)) 119} 120 121func Mix(a, b color.Color, percent float64) color.Color { 122\trgba := func(c color.Color) (r, g, b, a uint8) { 123\tr16, g16, b16, a16 := c.RGBA() 124\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 125\t} 126\tlerp := func(x, y uint8) uint8 { 127\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 128\t} 129\tr1, g1, b1, a1 := rgba(a) 130\tr2, g2, b2, a2 := rgba(b) 131 132\treturn color.RGBA{ 133\tR: lerp(r1, r2), 134\tG: lerp(g1, g2), 135\tB: lerp(b1, b2), 136\tA: lerp(a1, a2), 137\t} 138} 139 140func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 141\tpath := \u0026vector.Path{} 142 143\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 144\tpath.LineTo(x+w, y+h-br) 145\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 146\tpath.LineTo(x+bl, y+h) 147\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 148\tpath.LineTo(x, y+tl) 149\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 150\tpath.Close() 151 152\treturn path 153} 154 155func main() { 156\tebiten.SetWindowSize(480, 320) 157\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 158\tif err := ebiten.RunGame(NewGame()); err != nil { 159\tpanic(err) 160\t} 161} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tBottom: 14, 4\t}), 5) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPadding(widget.Insets{ 38\tBottom: 14, 39\t}), 40\twidget.ButtonOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42\tVerticalPosition: widget.AnchorLayoutPositionCenter, 43\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 44\t}), 45\twidget.WidgetOpts.MinSize(180, 48), 46\t), 47\t) 48\troot := widget.NewContainer( 49\twidget.ContainerOpts.BackgroundImage( 50\timage.NewNineSliceColor(colornames.Gainsboro), 51\t), 52\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 53\t) 54\troot.AddChild(button) 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func DefaultNineSlice(base color.Color) *image.NineSlice { 86\tvar size float32 = 64 87\tvar tiles float32 = 16 88\tvar radius float32 = 8 89 90\ttile := size / tiles 91\tfacet := Mix(base, colornames.Gainsboro, 0.2) 92 93\timg := ebiten.NewImage(int(size), int(size)) 94\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 100 101\treturn image.NewNineSliceBorder(img, int(tile*4)) 102} 103 104func PressedNineSlice(base color.Color) *image.NineSlice { 105\tvar size float32 = 64 106\tvar tiles float32 = 16 107\tvar radius float32 = 8 108 109\ttile := size / tiles 110\tfacet := Mix(base, colornames.Gainsboro, 0.2) 111 112\timg := ebiten.NewImage(int(size), int(size)) 113\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 115\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 117 118\treturn image.NewNineSliceBorder(img, int(tile*4)) 119} 120 121func Mix(a, b color.Color, percent float64) color.Color { 122\trgba := func(c color.Color) (r, g, b, a uint8) { 123\tr16, g16, b16, a16 := c.RGBA() 124\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 125\t} 126\tlerp := func(x, y uint8) uint8 { 127\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 128\t} 129\tr1, g1, b1, a1 := rgba(a) 130\tr2, g2, b2, a2 := rgba(b) 131 132\treturn color.RGBA{ 133\tR: lerp(r1, r2), 134\tG: lerp(g1, g2), 135\tB: lerp(b1, b2), 136\tA: lerp(a1, a2), 137\t} 138} 139 140func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 141\tpath := \u0026vector.Path{} 142 143\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 144\tpath.LineTo(x+w, y+h-br) 145\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 146\tpath.LineTo(x+bl, y+h) 147\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 148\tpath.LineTo(x, y+tl) 149\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 150\tpath.Close() 151 152\treturn path 153} 154 155func main() { 156\tebiten.SetWindowSize(480, 320) 157\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 158\tif err := ebiten.RunGame(NewGame()); err != nil { 159\tpanic(err) 160\t} 161} Text position Responsible for setting text aligment position.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionStart, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionStart, 39\twidget.TextPositionStart, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionStart, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionCenter, 39\twidget.TextPositionStart, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionStart, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionEnd, 39\twidget.TextPositionStart, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionCenter, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionStart, 39\twidget.TextPositionCenter, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionCenter, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionCenter, 39\twidget.TextPositionCenter, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionCenter, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionEnd, 39\twidget.TextPositionCenter, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionEnd, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionStart, 39\twidget.TextPositionEnd, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionEnd, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.TextPosition( 38\twidget.TextPositionCenter, 39\twidget.TextPositionEnd, 40\t), 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48\t) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultNineSlice(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedNineSlice(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionEnd, 5\t), 6) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 30\t}), 31\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 32\tIdle: DefaultNineSlice(colornames.Darkslategray), 33\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 34\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 35\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38\twidget.ButtonOpts.TextPosition( 39\twidget.TextPositionEnd, 40\twidget.TextPositionEnd, 41\t), 42\twidget.ButtonOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 44\tVerticalPosition: widget.AnchorLayoutPositionCenter, 45\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(180, 48), 48\t), 49\t) 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultFont() text.Face { 77\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 78\tif err != nil { 79\tpanic(err) 80\t} 81\treturn \u0026text.GoTextFace{ 82\tSource: s, 83\tSize: 20, 84\t} 85} 86 87func DefaultNineSlice(base color.Color) *image.NineSlice { 88\tvar size float32 = 64 89\tvar tiles float32 = 16 90\tvar radius float32 = 8 91 92\ttile := size / tiles 93\tfacet := Mix(base, colornames.Gainsboro, 0.2) 94 95\timg := ebiten.NewImage(int(size), int(size)) 96\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func PressedNineSlice(base color.Color) *image.NineSlice { 107\tvar size float32 = 64 108\tvar tiles float32 = 16 109\tvar radius float32 = 8 110 111\ttile := size / tiles 112\tfacet := Mix(base, colornames.Gainsboro, 0.2) 113 114\timg := ebiten.NewImage(int(size), int(size)) 115\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 117\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 118\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 119 120\treturn image.NewNineSliceBorder(img, int(tile*4)) 121} 122 123func Mix(a, b color.Color, percent float64) color.Color { 124\trgba := func(c color.Color) (r, g, b, a uint8) { 125\tr16, g16, b16, a16 := c.RGBA() 126\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 127\t} 128\tlerp := func(x, y uint8) uint8 { 129\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 130\t} 131\tr1, g1, b1, a1 := rgba(a) 132\tr2, g2, b2, a2 := rgba(b) 133 134\treturn color.RGBA{ 135\tR: lerp(r1, r2), 136\tG: lerp(g1, g2), 137\tB: lerp(b1, b2), 138\tA: lerp(a1, a2), 139\t} 140} 141 142func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 143\tpath := \u0026vector.Path{} 144 145\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 146\tpath.LineTo(x+w, y+h-br) 147\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 148\tpath.LineTo(x+bl, y+h) 149\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 150\tpath.LineTo(x, y+tl) 151\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 152\tpath.Close() 153 154\treturn path 155} 156 157func main() { 158\tebiten.SetWindowSize(480, 320) 159\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 160\tif err := ebiten.RunGame(NewGame()); err != nil { 161\tpanic(err) 162\t} 163} Text Label Responsible for setting multiline text on a button.\nLabel: Login Signup 1button := widget.NewButton( 2\twidget.ButtonOpts.TextLabel(\"Login\"), 3) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: DefaultNineSlice(colornames.Darkslategray), 31\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 33\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\t}), 36\twidget.ButtonOpts.TextLabel(\"Login\"), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func DefaultFont() text.Face { 72\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 73\tif err != nil { 74\tpanic(err) 75\t} 76\treturn \u0026text.GoTextFace{ 77\tSource: s, 78\tSize: 20, 79\t} 80} 81 82func DefaultNineSlice(base color.Color) *image.NineSlice { 83\tvar size float32 = 64 84\tvar tiles float32 = 16 85\tvar radius float32 = 8 86 87\ttile := size / tiles 88\tfacet := Mix(base, colornames.Gainsboro, 0.2) 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97 98\treturn image.NewNineSliceBorder(img, int(tile*4)) 99} 100 101func PressedNineSlice(base color.Color) *image.NineSlice { 102\tvar size float32 = 64 103\tvar tiles float32 = 16 104\tvar radius float32 = 8 105 106\ttile := size / tiles 107\tfacet := Mix(base, colornames.Gainsboro, 0.2) 108 109\timg := ebiten.NewImage(int(size), int(size)) 110\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 112\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 138\tpath := \u0026vector.Path{} 139 140\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 141\tpath.LineTo(x+w, y+h-br) 142\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 143\tpath.LineTo(x+bl, y+h) 144\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 145\tpath.LineTo(x, y+tl) 146\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 147\tpath.Close() 148 149\treturn path 150} 151 152func main() { 153\tebiten.SetWindowSize(480, 320) 154\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 155\tif err := ebiten.RunGame(NewGame()); err != nil { 156\tpanic(err) 157\t} 158} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextLabel(\"Sign Up Now\\nGet 35% discount\"), 3) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: DefaultNineSlice(colornames.Darkslategray), 31\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 33\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\t}), 36\twidget.ButtonOpts.TextLabel(\"Sign Up Now\\nGet 35% discount\"), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(200, 64), 43\t), 44\t) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func DefaultFont() text.Face { 72\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 73\tif err != nil { 74\tpanic(err) 75\t} 76\treturn \u0026text.GoTextFace{ 77\tSource: s, 78\tSize: 20, 79\t} 80} 81 82func DefaultNineSlice(base color.Color) *image.NineSlice { 83\tvar size float32 = 64 84\tvar tiles float32 = 16 85\tvar radius float32 = 8 86 87\ttile := size / tiles 88\tfacet := Mix(base, colornames.Gainsboro, 0.2) 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97 98\treturn image.NewNineSliceBorder(img, int(tile*4)) 99} 100 101func PressedNineSlice(base color.Color) *image.NineSlice { 102\tvar size float32 = 64 103\tvar tiles float32 = 16 104\tvar radius float32 = 8 105 106\ttile := size / tiles 107\tfacet := Mix(base, colornames.Gainsboro, 0.2) 108 109\timg := ebiten.NewImage(int(size), int(size)) 110\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 112\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 138\tpath := \u0026vector.Path{} 139 140\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 141\tpath.LineTo(x+w, y+h-br) 142\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 143\tpath.LineTo(x+bl, y+h) 144\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 145\tpath.LineTo(x, y+tl) 146\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 147\tpath.Close() 148 149\treturn path 150} 151 152func main() { 153\tebiten.SetWindowSize(480, 320) 154\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 155\tif err := ebiten.RunGame(NewGame()); err != nil { 156\tpanic(err) 157\t} 158} Text Process BBCode Responsible for processing text with BBCode.\nThe only tag currently supported is [color=][/color] (without the #).\nEnabled: True False 1button := widget.NewButton( 2\twidget.ButtonOpts.TextProcessBBCode(true), 3\twidget.ButtonOpts.TextLabel(\"\"+ 4\t\"[color=FF0000]M[/color]\"+ 5\t\"[color=E70017]u[/color]\"+ 6\t\"[color=D0002E]l[/color]\"+ 7\t\"[color=B90045]t[/color]\"+ 8\t\"[color=A2005C]i[/color]\"+ 9\t\"[color=8B0073]p[/color]\"+ 10\t\"[color=73008B]l[/color]\"+ 11\t\"[color=5C00A2]a[/color]\"+ 12\t\"[color=4500B9]y[/color]\"+ 13\t\"[color=2E00D0]e[/color]\"+ 14\t\"[color=1700E7]r[/color]\", 15\t), 16) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: DefaultNineSlice(colornames.Darkslategray), 31\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 33\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\t}), 36\twidget.ButtonOpts.TextProcessBBCode(true), 37\twidget.ButtonOpts.TextLabel(\"\"+ 38\t\"[color=FF0000]M[/color]\"+ 39\t\"[color=E70017]u[/color]\"+ 40\t\"[color=D0002E]l[/color]\"+ 41\t\"[color=B90045]t[/color]\"+ 42\t\"[color=A2005C]i[/color]\"+ 43\t\"[color=8B0073]p[/color]\"+ 44\t\"[color=73008B]l[/color]\"+ 45\t\"[color=5C00A2]a[/color]\"+ 46\t\"[color=4500B9]y[/color]\"+ 47\t\"[color=2E00D0]e[/color]\"+ 48\t\"[color=1700E7]r[/color]\", 49\t), 50\twidget.ButtonOpts.WidgetOpts( 51\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 52\tVerticalPosition: widget.AnchorLayoutPositionCenter, 53\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 54\t}), 55\twidget.WidgetOpts.MinSize(180, 48), 56\t), 57\t) 58\troot := widget.NewContainer( 59\twidget.ContainerOpts.BackgroundImage( 60\timage.NewNineSliceColor(colornames.Gainsboro), 61\t), 62\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 63\t) 64\troot.AddChild(button) 65\treturn \u0026Game{ 66\tui: \u0026ebitenui.UI{Container: root}, 67\t} 68} 69 70func (g *Game) Update() error { 71\tg.ui.Update() 72\treturn nil 73} 74 75func (g *Game) Draw(screen *ebiten.Image) { 76\tg.ui.Draw(screen) 77} 78 79func (g *Game) Layout(w, h int) (int, int) { 80\treturn w, h 81} 82 83func DefaultFont() text.Face { 84\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 85\tif err != nil { 86\tpanic(err) 87\t} 88\treturn \u0026text.GoTextFace{ 89\tSource: s, 90\tSize: 20, 91\t} 92} 93 94func DefaultNineSlice(base color.Color) *image.NineSlice { 95\tvar size float32 = 64 96\tvar tiles float32 = 16 97\tvar radius float32 = 8 98 99\ttile := size / tiles 100\tfacet := Mix(base, colornames.Gainsboro, 0.2) 101 102\timg := ebiten.NewImage(int(size), int(size)) 103\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 107\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 108\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 109 110\treturn image.NewNineSliceBorder(img, int(tile*4)) 111} 112 113func PressedNineSlice(base color.Color) *image.NineSlice { 114\tvar size float32 = 64 115\tvar tiles float32 = 16 116\tvar radius float32 = 8 117 118\ttile := size / tiles 119\tfacet := Mix(base, colornames.Gainsboro, 0.2) 120 121\timg := ebiten.NewImage(int(size), int(size)) 122\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 124\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 125\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 126 127\treturn image.NewNineSliceBorder(img, int(tile*4)) 128} 129 130func Mix(a, b color.Color, percent float64) color.Color { 131\trgba := func(c color.Color) (r, g, b, a uint8) { 132\tr16, g16, b16, a16 := c.RGBA() 133\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 134\t} 135\tlerp := func(x, y uint8) uint8 { 136\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 137\t} 138\tr1, g1, b1, a1 := rgba(a) 139\tr2, g2, b2, a2 := rgba(b) 140 141\treturn color.RGBA{ 142\tR: lerp(r1, r2), 143\tG: lerp(g1, g2), 144\tB: lerp(b1, b2), 145\tA: lerp(a1, a2), 146\t} 147} 148 149func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 150\tpath := \u0026vector.Path{} 151 152\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 153\tpath.LineTo(x+w, y+h-br) 154\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 155\tpath.LineTo(x+bl, y+h) 156\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 157\tpath.LineTo(x, y+tl) 158\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 159\tpath.Close() 160 161\treturn path 162} 163 164func main() { 165\tebiten.SetWindowSize(480, 320) 166\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 167\tif err := ebiten.RunGame(NewGame()); err != nil { 168\tpanic(err) 169\t} 170} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextProcessBBCode(false), 3\twidget.ButtonOpts.TextLabel(\"[color=A2005C]Multiplayer[/color]\"), 4) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: DefaultNineSlice(colornames.Darkslategray), 31\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 33\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\t}), 36\twidget.ButtonOpts.TextProcessBBCode(false), 37\twidget.ButtonOpts.TextLabel(\"[color=A2005C]Multiplayer[/color]\"), 38\twidget.ButtonOpts.WidgetOpts( 39\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 40\tVerticalPosition: widget.AnchorLayoutPositionCenter, 41\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 42\t}), 43\twidget.WidgetOpts.MinSize(320, 48), 44\t), 45\t) 46\troot := widget.NewContainer( 47\twidget.ContainerOpts.BackgroundImage( 48\timage.NewNineSliceColor(colornames.Gainsboro), 49\t), 50\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 51\t) 52\troot.AddChild(button) 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func DefaultFont() text.Face { 72\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 73\tif err != nil { 74\tpanic(err) 75\t} 76\treturn \u0026text.GoTextFace{ 77\tSource: s, 78\tSize: 20, 79\t} 80} 81 82func DefaultNineSlice(base color.Color) *image.NineSlice { 83\tvar size float32 = 64 84\tvar tiles float32 = 16 85\tvar radius float32 = 8 86 87\ttile := size / tiles 88\tfacet := Mix(base, colornames.Gainsboro, 0.2) 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97 98\treturn image.NewNineSliceBorder(img, int(tile*4)) 99} 100 101func PressedNineSlice(base color.Color) *image.NineSlice { 102\tvar size float32 = 64 103\tvar tiles float32 = 16 104\tvar radius float32 = 8 105 106\ttile := size / tiles 107\tfacet := Mix(base, colornames.Gainsboro, 0.2) 108 109\timg := ebiten.NewImage(int(size), int(size)) 110\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 112\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 138\tpath := \u0026vector.Path{} 139 140\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 141\tpath.LineTo(x+w, y+h-br) 142\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 143\tpath.LineTo(x+bl, y+h) 144\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 145\tpath.LineTo(x, y+tl) 146\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 147\tpath.Close() 148 149\treturn path 150} 151 152func main() { 153\tebiten.SetWindowSize(480, 320) 154\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 155\tif err := ebiten.RunGame(NewGame()); err != nil { 156\tpanic(err) 157\t} 158} Text Face Responsible for setting the font family and font size.\nFont: Basicfont-13 Inconsolata-16 1button := widget.NewButton( 2\twidget.ButtonOpts.TextFace(text.NewGoXFace(basicfont.Face7x13)), 3) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"math\" 6\t\"github.com/ebitenui/ebitenui\" 7\t\"github.com/ebitenui/ebitenui/image\" 8\t\"github.com/ebitenui/ebitenui/widget\" 9\t\"github.com/hajimehoshi/ebiten/v2\" 10\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/vector\" 12\t\"golang.org/x/image/font/basicfont\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21\tbutton := widget.NewButton( 22\twidget.ButtonOpts.TextLabel(\"Button\"), 23\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 24\tIdle: colornames.Gainsboro, 25\tHover: colornames.Gainsboro, 26\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 27\t}), 28\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 29\tIdle: DefaultNineSlice(colornames.Darkslategray), 30\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 31\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 32\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 33\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.TextFace(text.NewGoXFace(basicfont.Face7x13)), 36\twidget.ButtonOpts.WidgetOpts( 37\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 38\tVerticalPosition: widget.AnchorLayoutPositionCenter, 39\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 40\t}), 41\twidget.WidgetOpts.MinSize(180, 48), 42\t), 43\t) 44\troot := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Gainsboro), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(button) 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func DefaultNineSlice(base color.Color) *image.NineSlice { 71\tvar size float32 = 64 72\tvar tiles float32 = 16 73\tvar radius float32 = 8 74 75\ttile := size / tiles 76\tfacet := Mix(base, colornames.Gainsboro, 0.2) 77 78\timg := ebiten.NewImage(int(size), int(size)) 79\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 80\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 81\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 82\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 83\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 84\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 85 86\treturn image.NewNineSliceBorder(img, int(tile*4)) 87} 88 89func PressedNineSlice(base color.Color) *image.NineSlice { 90\tvar size float32 = 64 91\tvar tiles float32 = 16 92\tvar radius float32 = 8 93 94\ttile := size / tiles 95\tfacet := Mix(base, colornames.Gainsboro, 0.2) 96 97\timg := ebiten.NewImage(int(size), int(size)) 98\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func Mix(a, b color.Color, percent float64) color.Color { 107\trgba := func(c color.Color) (r, g, b, a uint8) { 108\tr16, g16, b16, a16 := c.RGBA() 109\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 110\t} 111\tlerp := func(x, y uint8) uint8 { 112\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 113\t} 114\tr1, g1, b1, a1 := rgba(a) 115\tr2, g2, b2, a2 := rgba(b) 116 117\treturn color.RGBA{ 118\tR: lerp(r1, r2), 119\tG: lerp(g1, g2), 120\tB: lerp(b1, b2), 121\tA: lerp(a1, a2), 122\t} 123} 124 125func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 126\tpath := \u0026vector.Path{} 127 128\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 129\tpath.LineTo(x+w, y+h-br) 130\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 131\tpath.LineTo(x+bl, y+h) 132\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 133\tpath.LineTo(x, y+tl) 134\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 135\tpath.Close() 136 137\treturn path 138} 139 140func main() { 141\tebiten.SetWindowSize(480, 320) 142\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 143\tif err := ebiten.RunGame(NewGame()); err != nil { 144\tpanic(err) 145\t} 146} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextFace(text.NewGoXFace(inconsolata.Bold8x16)), 3) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"math\" 6\t\"github.com/ebitenui/ebitenui\" 7\t\"github.com/ebitenui/ebitenui/image\" 8\t\"github.com/ebitenui/ebitenui/widget\" 9\t\"github.com/hajimehoshi/ebiten/v2\" 10\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/vector\" 12\t\"golang.org/x/image/font/inconsolata\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21\tbutton := widget.NewButton( 22\twidget.ButtonOpts.TextLabel(\"Button\"), 23\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 24\tIdle: colornames.Gainsboro, 25\tHover: colornames.Gainsboro, 26\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 27\t}), 28\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 29\tIdle: DefaultNineSlice(colornames.Darkslategray), 30\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 31\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 32\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 33\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.TextFace(text.NewGoXFace(inconsolata.Bold8x16)), 36\twidget.ButtonOpts.WidgetOpts( 37\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 38\tVerticalPosition: widget.AnchorLayoutPositionCenter, 39\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 40\t}), 41\twidget.WidgetOpts.MinSize(180, 48), 42\t), 43\t) 44\troot := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Gainsboro), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(button) 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func DefaultNineSlice(base color.Color) *image.NineSlice { 71\tvar size float32 = 64 72\tvar tiles float32 = 16 73\tvar radius float32 = 8 74 75\ttile := size / tiles 76\tfacet := Mix(base, colornames.Gainsboro, 0.2) 77 78\timg := ebiten.NewImage(int(size), int(size)) 79\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 80\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 81\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 82\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 83\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 84\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 85 86\treturn image.NewNineSliceBorder(img, int(tile*4)) 87} 88 89func PressedNineSlice(base color.Color) *image.NineSlice { 90\tvar size float32 = 64 91\tvar tiles float32 = 16 92\tvar radius float32 = 8 93 94\ttile := size / tiles 95\tfacet := Mix(base, colornames.Gainsboro, 0.2) 96 97\timg := ebiten.NewImage(int(size), int(size)) 98\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func Mix(a, b color.Color, percent float64) color.Color { 107\trgba := func(c color.Color) (r, g, b, a uint8) { 108\tr16, g16, b16, a16 := c.RGBA() 109\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 110\t} 111\tlerp := func(x, y uint8) uint8 { 112\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 113\t} 114\tr1, g1, b1, a1 := rgba(a) 115\tr2, g2, b2, a2 := rgba(b) 116 117\treturn color.RGBA{ 118\tR: lerp(r1, r2), 119\tG: lerp(g1, g2), 120\tB: lerp(b1, b2), 121\tA: lerp(a1, a2), 122\t} 123} 124 125func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 126\tpath := \u0026vector.Path{} 127 128\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 129\tpath.LineTo(x+w, y+h-br) 130\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 131\tpath.LineTo(x+bl, y+h) 132\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 133\tpath.LineTo(x, y+tl) 134\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 135\tpath.Close() 136 137\treturn path 138} 139 140func main() { 141\tebiten.SetWindowSize(480, 320) 142\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 143\tif err := ebiten.RunGame(NewGame()); err != nil { 144\tpanic(err) 145\t} 146} Text Color Responsible for setting the text color.\nColor: Idle Hover Pressed 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 26\tIdle: DefaultNineSlice(colornames.Darkslategray), 27\tHover: DefaultNineSlice(colornames.Darkslategray), 28\tDisabled: DefaultNineSlice(colornames.Darkslategray), 29\tPressed: DefaultNineSlice(colornames.Darkslategray), 30\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 31\t}), 32\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 33\tIdle: colornames.Goldenrod, 34\tHover: colornames.Indianred, 35\tPressed: colornames.Steelblue, 36\t}), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func DefaultFont() text.Face { 71\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 72\tif err != nil { 73\tpanic(err) 74\t} 75\treturn \u0026text.GoTextFace{ 76\tSource: s, 77\tSize: 20, 78\t} 79} 80 81func DefaultNineSlice(base color.Color) *image.NineSlice { 82\tvar size float32 = 64 83\tvar tiles float32 = 16 84\tvar radius float32 = 8 85 86\ttile := size / tiles 87\tfacet := Mix(base, colornames.Gainsboro, 0.2) 88 89\timg := ebiten.NewImage(int(size), int(size)) 90\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 91\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 92\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 93\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 94\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96 97\treturn image.NewNineSliceBorder(img, int(tile*4)) 98} 99 100func Mix(a, b color.Color, percent float64) color.Color { 101\trgba := func(c color.Color) (r, g, b, a uint8) { 102\tr16, g16, b16, a16 := c.RGBA() 103\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 104\t} 105\tlerp := func(x, y uint8) uint8 { 106\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 107\t} 108\tr1, g1, b1, a1 := rgba(a) 109\tr2, g2, b2, a2 := rgba(b) 110 111\treturn color.RGBA{ 112\tR: lerp(r1, r2), 113\tG: lerp(g1, g2), 114\tB: lerp(b1, b2), 115\tA: lerp(a1, a2), 116\t} 117} 118 119func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 120\tpath := \u0026vector.Path{} 121 122\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 123\tpath.LineTo(x+w, y+h-br) 124\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 125\tpath.LineTo(x+bl, y+h) 126\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 127\tpath.LineTo(x, y+tl) 128\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 129\tpath.Close() 130 131\treturn path 132} 133 134func main() { 135\tebiten.SetWindowSize(480, 320) 136\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 137\tif err := ebiten.RunGame(NewGame()); err != nil { 138\tpanic(err) 139\t} 140} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 26\tIdle: DefaultNineSlice(colornames.Darkslategray), 27\tHover: DefaultNineSlice(colornames.Darkslategray), 28\tDisabled: DefaultNineSlice(colornames.Darkslategray), 29\tPressed: DefaultNineSlice(colornames.Darkslategray), 30\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 31\t}), 32\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 33\tIdle: colornames.Goldenrod, 34\tHover: colornames.Indianred, 35\tPressed: colornames.Steelblue, 36\t}), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 46\troot := widget.NewContainer( 47\twidget.ContainerOpts.BackgroundImage( 48\timage.NewNineSliceColor(colornames.Gainsboro), 49\t), 50\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 51\t) 52\troot.AddChild(button) 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func DefaultFont() text.Face { 73\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 74\tif err != nil { 75\tpanic(err) 76\t} 77\treturn \u0026text.GoTextFace{ 78\tSource: s, 79\tSize: 20, 80\t} 81} 82 83func DefaultNineSlice(base color.Color) *image.NineSlice { 84\tvar size float32 = 64 85\tvar tiles float32 = 16 86\tvar radius float32 = 8 87 88\ttile := size / tiles 89\tfacet := Mix(base, colornames.Gainsboro, 0.2) 90 91\timg := ebiten.NewImage(int(size), int(size)) 92\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 93\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 94\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 96\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 98 99\treturn image.NewNineSliceBorder(img, int(tile*4)) 100} 101 102func PressedNineSlice(base color.Color) *image.NineSlice { 103\tvar size float32 = 64 104\tvar tiles float32 = 16 105\tvar radius float32 = 8 106 107\ttile := size / tiles 108\tfacet := Mix(base, colornames.Gainsboro, 0.2) 109 110\timg := ebiten.NewImage(int(size), int(size)) 111\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 112\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 113\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 115 116\treturn image.NewNineSliceBorder(img, int(tile*4)) 117} 118 119func Mix(a, b color.Color, percent float64) color.Color { 120\trgba := func(c color.Color) (r, g, b, a uint8) { 121\tr16, g16, b16, a16 := c.RGBA() 122\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 123\t} 124\tlerp := func(x, y uint8) uint8 { 125\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 126\t} 127\tr1, g1, b1, a1 := rgba(a) 128\tr2, g2, b2, a2 := rgba(b) 129 130\treturn color.RGBA{ 131\tR: lerp(r1, r2), 132\tG: lerp(g1, g2), 133\tB: lerp(b1, b2), 134\tA: lerp(a1, a2), 135\t} 136} 137 138func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 139\tpath := \u0026vector.Path{} 140 141\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 142\tpath.LineTo(x+w, y+h-br) 143\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 144\tpath.LineTo(x+bl, y+h) 145\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 146\tpath.LineTo(x, y+tl) 147\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 148\tpath.Close() 149 150\treturn path 151} 152 153func main() { 154\tebiten.SetWindowSize(480, 320) 155\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 156\tif err := ebiten.RunGame(NewGame()); err != nil { 157\tpanic(err) 158\t} 159} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 26\tIdle: DefaultNineSlice(colornames.Darkslategray), 27\tHover: DefaultNineSlice(colornames.Darkslategray), 28\tDisabled: DefaultNineSlice(colornames.Darkslategray), 29\tPressed: DefaultNineSlice(colornames.Darkslategray), 30\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 31\t}), 32\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 33\tIdle: colornames.Goldenrod, 34\tHover: colornames.Indianred, 35\tPressed: colornames.Steelblue, 36\t}), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 46\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 47\troot := widget.NewContainer( 48\twidget.ContainerOpts.BackgroundImage( 49\timage.NewNineSliceColor(colornames.Gainsboro), 50\t), 51\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 52\t) 53\troot.AddChild(button) 54 55\treturn \u0026Game{ 56\tui: \u0026ebitenui.UI{Container: root}, 57\t} 58} 59 60func (g *Game) Update() error { 61\tg.ui.Update() 62\treturn nil 63} 64 65func (g *Game) Draw(screen *ebiten.Image) { 66\tg.ui.Draw(screen) 67} 68 69func (g *Game) Layout(w, h int) (int, int) { 70\treturn w, h 71} 72 73func DefaultFont() text.Face { 74\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 75\tif err != nil { 76\tpanic(err) 77\t} 78\treturn \u0026text.GoTextFace{ 79\tSource: s, 80\tSize: 20, 81\t} 82} 83 84func DefaultNineSlice(base color.Color) *image.NineSlice { 85\tvar size float32 = 64 86\tvar tiles float32 = 16 87\tvar radius float32 = 8 88 89\ttile := size / tiles 90\tfacet := Mix(base, colornames.Gainsboro, 0.2) 91 92\timg := ebiten.NewImage(int(size), int(size)) 93\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 99 100\treturn image.NewNineSliceBorder(img, int(tile*4)) 101} 102 103func PressedNineSlice(base color.Color) *image.NineSlice { 104\tvar size float32 = 64 105\tvar tiles float32 = 16 106\tvar radius float32 = 8 107 108\ttile := size / tiles 109\tfacet := Mix(base, colornames.Gainsboro, 0.2) 110 111\timg := ebiten.NewImage(int(size), int(size)) 112\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 114\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 116 117\treturn image.NewNineSliceBorder(img, int(tile*4)) 118} 119 120func Mix(a, b color.Color, percent float64) color.Color { 121\trgba := func(c color.Color) (r, g, b, a uint8) { 122\tr16, g16, b16, a16 := c.RGBA() 123\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 124\t} 125\tlerp := func(x, y uint8) uint8 { 126\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 127\t} 128\tr1, g1, b1, a1 := rgba(a) 129\tr2, g2, b2, a2 := rgba(b) 130 131\treturn color.RGBA{ 132\tR: lerp(r1, r2), 133\tG: lerp(g1, g2), 134\tB: lerp(b1, b2), 135\tA: lerp(a1, a2), 136\t} 137} 138 139func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 140\tpath := \u0026vector.Path{} 141 142\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 143\tpath.LineTo(x+w, y+h-br) 144\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 145\tpath.LineTo(x+bl, y+h) 146\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 147\tpath.LineTo(x, y+tl) 148\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 149\tpath.Close() 150 151\treturn path 152} 153 154func main() { 155\tebiten.SetWindowSize(480, 320) 156\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 157\tif err := ebiten.RunGame(NewGame()); err != nil { 158\tpanic(err) 159\t} 160} Image Responsible for the background of the button; it can be filled with color or image tiles.\nImage: PillxIdle PillxHover PillxPressed GemxIdle GemxHover GemxPressed ColxIdle ColxHover ColxPressed 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultPill(colornames.Darkslategray), 32\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\troot := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Gainsboro), 46\t), 47\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 48\t) 49\troot.AddChild(button) 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func DefaultFont() text.Face { 69\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 70\tif err != nil { 71\tpanic(err) 72\t} 73\treturn \u0026text.GoTextFace{ 74\tSource: s, 75\tSize: 20, 76\t} 77} 78 79func DefaultPill(base color.Color) *image.NineSlice { 80\tvar size float32 = 64 81\tvar tiles float32 = 16 82\tvar radius float32 = 8 83 84\ttile := size / tiles 85\tfacet := Mix(base, colornames.Gainsboro, 0.2) 86 87\timg := ebiten.NewImage(int(size), int(size)) 88\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 89\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 90\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 91\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 92\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 93\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 94 95\treturn image.NewNineSliceBorder(img, int(tile*4)) 96} 97 98func PressedPill(base color.Color) *image.NineSlice { 99\tvar size float32 = 64 100\tvar tiles float32 = 16 101\tvar radius float32 = 8 102 103\ttile := size / tiles 104\tfacet := Mix(base, colornames.Gainsboro, 0.2) 105 106\timg := ebiten.NewImage(int(size), int(size)) 107\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 108\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 109\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 110\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 111 112\treturn image.NewNineSliceBorder(img, int(tile*4)) 113} 114 115func Mix(a, b color.Color, percent float64) color.Color { 116\trgba := func(c color.Color) (r, g, b, a uint8) { 117\tr16, g16, b16, a16 := c.RGBA() 118\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 119\t} 120\tlerp := func(x, y uint8) uint8 { 121\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 122\t} 123\tr1, g1, b1, a1 := rgba(a) 124\tr2, g2, b2, a2 := rgba(b) 125 126\treturn color.RGBA{ 127\tR: lerp(r1, r2), 128\tG: lerp(g1, g2), 129\tB: lerp(b1, b2), 130\tA: lerp(a1, a2), 131\t} 132} 133 134func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 135\tpath := \u0026vector.Path{} 136 137\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 138\tpath.LineTo(x+w, y+h-br) 139\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 140\tpath.LineTo(x+bl, y+h) 141\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 142\tpath.LineTo(x, y+tl) 143\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 144\tpath.Close() 145 146\treturn path 147} 148 149func main() { 150\tebiten.SetWindowSize(480, 320) 151\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 152\tif err := ebiten.RunGame(NewGame()); err != nil { 153\tpanic(err) 154\t} 155} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultPill(colornames.Darkslategray), 32\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 44\troot := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Gainsboro), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(button) 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func DefaultFont() text.Face { 70\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 71\tif err != nil { 72\tpanic(err) 73\t} 74\treturn \u0026text.GoTextFace{ 75\tSource: s, 76\tSize: 20, 77\t} 78} 79 80func DefaultPill(base color.Color) *image.NineSlice { 81\tvar size float32 = 64 82\tvar tiles float32 = 16 83\tvar radius float32 = 8 84 85\ttile := size / tiles 86\tfacet := Mix(base, colornames.Gainsboro, 0.2) 87 88\timg := ebiten.NewImage(int(size), int(size)) 89\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 90\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 91\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 95 96\treturn image.NewNineSliceBorder(img, int(tile*4)) 97} 98 99func PressedPill(base color.Color) *image.NineSlice { 100\tvar size float32 = 64 101\tvar tiles float32 = 16 102\tvar radius float32 = 8 103 104\ttile := size / tiles 105\tfacet := Mix(base, colornames.Gainsboro, 0.2) 106 107\timg := ebiten.NewImage(int(size), int(size)) 108\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 109\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 110\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 112 113\treturn image.NewNineSliceBorder(img, int(tile*4)) 114} 115 116func Mix(a, b color.Color, percent float64) color.Color { 117\trgba := func(c color.Color) (r, g, b, a uint8) { 118\tr16, g16, b16, a16 := c.RGBA() 119\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 120\t} 121\tlerp := func(x, y uint8) uint8 { 122\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 123\t} 124\tr1, g1, b1, a1 := rgba(a) 125\tr2, g2, b2, a2 := rgba(b) 126 127\treturn color.RGBA{ 128\tR: lerp(r1, r2), 129\tG: lerp(g1, g2), 130\tB: lerp(b1, b2), 131\tA: lerp(a1, a2), 132\t} 133} 134 135func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 136\tpath := \u0026vector.Path{} 137 138\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 139\tpath.LineTo(x+w, y+h-br) 140\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 141\tpath.LineTo(x+bl, y+h) 142\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 143\tpath.LineTo(x, y+tl) 144\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 145\tpath.Close() 146 147\treturn path 148} 149 150func main() { 151\tebiten.SetWindowSize(480, 320) 152\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 153\tif err := ebiten.RunGame(NewGame()); err != nil { 154\tpanic(err) 155\t} 156} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultPill(colornames.Darkslategray), 32\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 44\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func DefaultFont() text.Face { 71\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 72\tif err != nil { 73\tpanic(err) 74\t} 75\treturn \u0026text.GoTextFace{ 76\tSource: s, 77\tSize: 20, 78\t} 79} 80 81func DefaultPill(base color.Color) *image.NineSlice { 82\tvar size float32 = 64 83\tvar tiles float32 = 16 84\tvar radius float32 = 8 85 86\ttile := size / tiles 87\tfacet := Mix(base, colornames.Gainsboro, 0.2) 88 89\timg := ebiten.NewImage(int(size), int(size)) 90\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 91\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 92\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 93\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 94\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96 97\treturn image.NewNineSliceBorder(img, int(tile*4)) 98} 99 100func PressedPill(base color.Color) *image.NineSlice { 101\tvar size float32 = 64 102\tvar tiles float32 = 16 103\tvar radius float32 = 8 104 105\ttile := size / tiles 106\tfacet := Mix(base, colornames.Gainsboro, 0.2) 107 108\timg := ebiten.NewImage(int(size), int(size)) 109\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 110\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 111\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 112\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 113 114\treturn image.NewNineSliceBorder(img, int(tile*4)) 115} 116 117func Mix(a, b color.Color, percent float64) color.Color { 118\trgba := func(c color.Color) (r, g, b, a uint8) { 119\tr16, g16, b16, a16 := c.RGBA() 120\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 121\t} 122\tlerp := func(x, y uint8) uint8 { 123\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 124\t} 125\tr1, g1, b1, a1 := rgba(a) 126\tr2, g2, b2, a2 := rgba(b) 127 128\treturn color.RGBA{ 129\tR: lerp(r1, r2), 130\tG: lerp(g1, g2), 131\tB: lerp(b1, b2), 132\tA: lerp(a1, a2), 133\t} 134} 135 136func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 137\tpath := \u0026vector.Path{} 138 139\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 140\tpath.LineTo(x+w, y+h-br) 141\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 142\tpath.LineTo(x+bl, y+h) 143\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 144\tpath.LineTo(x, y+tl) 145\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 146\tpath.Close() 147 148\treturn path 149} 150 151func main() { 152\tebiten.SetWindowSize(480, 320) 153\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 154\tif err := ebiten.RunGame(NewGame()); err != nil { 155\tpanic(err) 156\t} 157} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultGem(colornames.Darkslategray), 32\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\troot := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Gainsboro), 46\t), 47\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 48\t) 49\troot.AddChild(button) 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func DefaultFont() text.Face { 69\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 70\tif err != nil { 71\tpanic(err) 72\t} 73\treturn \u0026text.GoTextFace{ 74\tSource: s, 75\tSize: 20, 76\t} 77} 78 79func DefaultGem(base color.Color) *image.NineSlice { 80\tvar size float32 = 64 81\tvar tiles float32 = 16 82\tvar padding float32 = 4 83 84\ttile := (size - padding*2) / tiles 85\tfore := Mix(base, colornames.Gainsboro, 0.4) 86\tback := Mix(base, colornames.Black, 0.4) 87\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 88 89\timg := ebiten.NewImage(int(size), int(size)) 90\ttop := func(path *vector.Path) { 91\tpath.MoveTo(padding, padding+size-tile*2) 92\tpath.LineTo(padding, padding+tile*2) 93\tpath.LineTo(padding+tile*2, padding) 94\tpath.LineTo(padding+size-tile*2, padding) 95\t} 96\tbottom := func(path *vector.Path) { 97\tpath.MoveTo(padding+size-tile*2, padding) 98\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 99\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 100\tpath.LineTo(padding, padding+size-tile*2) 101\t} 102\tpath := \u0026vector.Path{} 103\ttop(path) 104\tbottom(path) 105\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 106\tpath.Reset() 107\ttop(path) 108\tvector.StrokePath(img, path, fore, true, stroke) 109\tpath.Reset() 110\tbottom(path) 111\tvector.StrokePath(img, path, back, true, stroke) 112 113\treturn image.NewNineSliceBorder(img, int(tile*4)) 114} 115 116func Mix(a, b color.Color, percent float64) color.Color { 117\trgba := func(c color.Color) (r, g, b, a uint8) { 118\tr16, g16, b16, a16 := c.RGBA() 119\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 120\t} 121\tlerp := func(x, y uint8) uint8 { 122\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 123\t} 124\tr1, g1, b1, a1 := rgba(a) 125\tr2, g2, b2, a2 := rgba(b) 126 127\treturn color.RGBA{ 128\tR: lerp(r1, r2), 129\tG: lerp(g1, g2), 130\tB: lerp(b1, b2), 131\tA: lerp(a1, a2), 132\t} 133} 134 135func main() { 136\tebiten.SetWindowSize(480, 320) 137\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 138\tif err := ebiten.RunGame(NewGame()); err != nil { 139\tpanic(err) 140\t} 141} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultGem(colornames.Darkslategray), 32\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 44\troot := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Gainsboro), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(button) 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func DefaultFont() text.Face { 70\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 71\tif err != nil { 72\tpanic(err) 73\t} 74\treturn \u0026text.GoTextFace{ 75\tSource: s, 76\tSize: 20, 77\t} 78} 79 80func DefaultGem(base color.Color) *image.NineSlice { 81\tvar size float32 = 64 82\tvar tiles float32 = 16 83\tvar padding float32 = 4 84 85\ttile := (size - padding*2) / tiles 86\tfore := Mix(base, colornames.Gainsboro, 0.4) 87\tback := Mix(base, colornames.Black, 0.4) 88\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\ttop := func(path *vector.Path) { 92\tpath.MoveTo(padding, padding+size-tile*2) 93\tpath.LineTo(padding, padding+tile*2) 94\tpath.LineTo(padding+tile*2, padding) 95\tpath.LineTo(padding+size-tile*2, padding) 96\t} 97\tbottom := func(path *vector.Path) { 98\tpath.MoveTo(padding+size-tile*2, padding) 99\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 100\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 101\tpath.LineTo(padding, padding+size-tile*2) 102\t} 103\tpath := \u0026vector.Path{} 104\ttop(path) 105\tbottom(path) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107\tpath.Reset() 108\ttop(path) 109\tvector.StrokePath(img, path, fore, true, stroke) 110\tpath.Reset() 111\tbottom(path) 112\tvector.StrokePath(img, path, back, true, stroke) 113 114\treturn image.NewNineSliceBorder(img, int(tile*4)) 115} 116 117func Mix(a, b color.Color, percent float64) color.Color { 118\trgba := func(c color.Color) (r, g, b, a uint8) { 119\tr16, g16, b16, a16 := c.RGBA() 120\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 121\t} 122\tlerp := func(x, y uint8) uint8 { 123\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 124\t} 125\tr1, g1, b1, a1 := rgba(a) 126\tr2, g2, b2, a2 := rgba(b) 127 128\treturn color.RGBA{ 129\tR: lerp(r1, r2), 130\tG: lerp(g1, g2), 131\tB: lerp(b1, b2), 132\tA: lerp(a1, a2), 133\t} 134} 135 136func main() { 137\tebiten.SetWindowSize(480, 320) 138\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 139\tif err := ebiten.RunGame(NewGame()); err != nil { 140\tpanic(err) 141\t} 142} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: colornames.Gainsboro, 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultGem(colornames.Darkslategray), 32\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 34\t}), 35\twidget.ButtonOpts.WidgetOpts( 36\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 37\tVerticalPosition: widget.AnchorLayoutPositionCenter, 38\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 39\t}), 40\twidget.WidgetOpts.MinSize(180, 48), 41\t), 42\t) 43\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 44\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func DefaultFont() text.Face { 71\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 72\tif err != nil { 73\tpanic(err) 74\t} 75\treturn \u0026text.GoTextFace{ 76\tSource: s, 77\tSize: 20, 78\t} 79} 80 81func DefaultGem(base color.Color) *image.NineSlice { 82\tvar size float32 = 64 83\tvar tiles float32 = 16 84\tvar padding float32 = 4 85 86\ttile := (size - padding*2) / tiles 87\tfore := Mix(base, colornames.Gainsboro, 0.4) 88\tback := Mix(base, colornames.Black, 0.4) 89\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 90 91\timg := ebiten.NewImage(int(size), int(size)) 92\ttop := func(path *vector.Path) { 93\tpath.MoveTo(padding, padding+size-tile*2) 94\tpath.LineTo(padding, padding+tile*2) 95\tpath.LineTo(padding+tile*2, padding) 96\tpath.LineTo(padding+size-tile*2, padding) 97\t} 98\tbottom := func(path *vector.Path) { 99\tpath.MoveTo(padding+size-tile*2, padding) 100\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 101\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 102\tpath.LineTo(padding, padding+size-tile*2) 103\t} 104\tpath := \u0026vector.Path{} 105\ttop(path) 106\tbottom(path) 107\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 108\tpath.Reset() 109\ttop(path) 110\tvector.StrokePath(img, path, fore, true, stroke) 111\tpath.Reset() 112\tbottom(path) 113\tvector.StrokePath(img, path, back, true, stroke) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func main() { 138\tebiten.SetWindowSize(480, 320) 139\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 140\tif err := ebiten.RunGame(NewGame()); err != nil { 141\tpanic(err) 142\t} 143} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21\tbutton := widget.NewButton( 22\twidget.ButtonOpts.TextLabel(\"Button\"), 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: colornames.Gainsboro, 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 31\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 33\t}), 34\twidget.ButtonOpts.WidgetOpts( 35\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 36\tVerticalPosition: widget.AnchorLayoutPositionCenter, 37\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 38\t}), 39\twidget.WidgetOpts.MinSize(180, 48), 40\t), 41\t) 42\troot := widget.NewContainer( 43\twidget.ContainerOpts.BackgroundImage( 44\timage.NewNineSliceColor(colornames.Gainsboro), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(button) 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func DefaultFont() text.Face { 68\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 69\tif err != nil { 70\tpanic(err) 71\t} 72\treturn \u0026text.GoTextFace{ 73\tSource: s, 74\tSize: 20, 75\t} 76} 77 78func Mix(a, b color.Color, percent float64) color.Color { 79\trgba := func(c color.Color) (r, g, b, a uint8) { 80\tr16, g16, b16, a16 := c.RGBA() 81\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 82\t} 83\tlerp := func(x, y uint8) uint8 { 84\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 85\t} 86\tr1, g1, b1, a1 := rgba(a) 87\tr2, g2, b2, a2 := rgba(b) 88 89\treturn color.RGBA{ 90\tR: lerp(r1, r2), 91\tG: lerp(g1, g2), 92\tB: lerp(b1, b2), 93\tA: lerp(a1, a2), 94\t} 95} 96 97func main() { 98\tebiten.SetWindowSize(480, 320) 99\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 100\tif err := ebiten.RunGame(NewGame()); err != nil { 101\tpanic(err) 102\t} 103} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21\tbutton := widget.NewButton( 22\twidget.ButtonOpts.TextLabel(\"Button\"), 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: colornames.Gainsboro, 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 31\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 33\t}), 34\twidget.ButtonOpts.WidgetOpts( 35\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 36\tVerticalPosition: widget.AnchorLayoutPositionCenter, 37\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 38\t}), 39\twidget.WidgetOpts.MinSize(180, 48), 40\t), 41\t) 42\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 43\troot := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Gainsboro), 46\t), 47\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 48\t) 49\troot.AddChild(button) 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func DefaultFont() text.Face { 69\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 70\tif err != nil { 71\tpanic(err) 72\t} 73\treturn \u0026text.GoTextFace{ 74\tSource: s, 75\tSize: 20, 76\t} 77} 78 79func Mix(a, b color.Color, percent float64) color.Color { 80\trgba := func(c color.Color) (r, g, b, a uint8) { 81\tr16, g16, b16, a16 := c.RGBA() 82\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 83\t} 84\tlerp := func(x, y uint8) uint8 { 85\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 86\t} 87\tr1, g1, b1, a1 := rgba(a) 88\tr2, g2, b2, a2 := rgba(b) 89 90\treturn color.RGBA{ 91\tR: lerp(r1, r2), 92\tG: lerp(g1, g2), 93\tB: lerp(b1, b2), 94\tA: lerp(a1, a2), 95\t} 96} 97 98func main() { 99\tebiten.SetWindowSize(480, 320) 100\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 101\tif err := ebiten.RunGame(NewGame()); err != nil { 102\tpanic(err) 103\t} 104} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21\tbutton := widget.NewButton( 22\twidget.ButtonOpts.TextLabel(\"Button\"), 23\twidget.ButtonOpts.TextFace(DefaultFont()), 24\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 25\tIdle: colornames.Gainsboro, 26\tHover: colornames.Gainsboro, 27\tPressed: colornames.Gainsboro, 28\t}), 29\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 30\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 31\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 32\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 33\t}), 34\twidget.ButtonOpts.WidgetOpts( 35\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 36\tVerticalPosition: widget.AnchorLayoutPositionCenter, 37\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 38\t}), 39\twidget.WidgetOpts.MinSize(180, 48), 40\t), 41\t) 42\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 43\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 44\troot := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Gainsboro), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(button) 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func DefaultFont() text.Face { 70\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 71\tif err != nil { 72\tpanic(err) 73\t} 74\treturn \u0026text.GoTextFace{ 75\tSource: s, 76\tSize: 20, 77\t} 78} 79 80func Mix(a, b color.Color, percent float64) color.Color { 81\trgba := func(c color.Color) (r, g, b, a uint8) { 82\tr16, g16, b16, a16 := c.RGBA() 83\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 84\t} 85\tlerp := func(x, y uint8) uint8 { 86\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 87\t} 88\tr1, g1, b1, a1 := rgba(a) 89\tr2, g2, b2, a2 := rgba(b) 90 91\treturn color.RGBA{ 92\tR: lerp(r1, r2), 93\tG: lerp(g1, g2), 94\tB: lerp(b1, b2), 95\tA: lerp(a1, a2), 96\t} 97} 98 99func main() { 100\tebiten.SetWindowSize(480, 320) 101\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 102\tif err := ebiten.RunGame(NewGame()); err != nil { 103\tpanic(err) 104\t} 105} Ignore Transparent Pixels Responsible for ignoring transparent pixels when the button is clicked.\nEnabled: True False 1button := widget.NewButton( 2\twidget.ButtonOpts.IgnoreTransparentPixels(true), 3\twidget.ButtonOpts.CursorEnteredHandler( 4\tfunc(args *widget.ButtonHoverEventArgs) { 5\tvar b strings.Builder 6\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 7\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8\tfmt.Print(b.String()) 9\t}, 10\t), 11) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"fmt\" 6\t\"image/color\" 7\t\"math\" 8\t\"strings\" 9\t\"github.com/ebitenui/ebitenui\" 10\t\"github.com/ebitenui/ebitenui/image\" 11\t\"github.com/ebitenui/ebitenui/widget\" 12\t\"github.com/hajimehoshi/ebiten/v2\" 13\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 14\t\"github.com/hajimehoshi/ebiten/v2/vector\" 15\t\"golang.org/x/image/font/gofont/goregular\" 16\t\"golang.org/x/image/colornames\" 17) 18 19type Game struct { 20\tui *ebitenui.UI 21} 22 23func NewGame() *Game { 24\tbutton := widget.NewButton( 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39\twidget.ButtonOpts.IgnoreTransparentPixels(true), 40\twidget.ButtonOpts.CursorEnteredHandler( 41\tfunc(args *widget.ButtonHoverEventArgs) { 42\tvar b strings.Builder 43\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 44\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 45\tfmt.Print(b.String()) 46\t}, 47\t), 48\twidget.ButtonOpts.WidgetOpts( 49\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 50\tVerticalPosition: widget.AnchorLayoutPositionCenter, 51\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 52\t}), 53\twidget.WidgetOpts.MinSize(180, 48), 54\t), 55\t) 56\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 57\troot := widget.NewContainer( 58\twidget.ContainerOpts.BackgroundImage( 59\timage.NewNineSliceColor(colornames.Gainsboro), 60\t), 61\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 62\t) 63\troot.AddChild(button) 64 65\treturn \u0026Game{ 66\tui: \u0026ebitenui.UI{Container: root}, 67\t} 68} 69 70func (g *Game) Update() error { 71\tg.ui.Update() 72\treturn nil 73} 74 75func (g *Game) Draw(screen *ebiten.Image) { 76\tg.ui.Draw(screen) 77} 78 79func (g *Game) Layout(w, h int) (int, int) { 80\treturn w, h 81} 82 83func DefaultFont() text.Face { 84\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 85\tif err != nil { 86\tpanic(err) 87\t} 88\treturn \u0026text.GoTextFace{ 89\tSource: s, 90\tSize: 20, 91\t} 92} 93 94func DefaultNineSlice(base color.Color) *image.NineSlice { 95\tvar size float32 = 64 96\tvar tiles float32 = 16 97\tvar radius float32 = 8 98 99\ttile := size / tiles 100\tfacet := Mix(base, colornames.Gainsboro, 0.2) 101 102\timg := ebiten.NewImage(int(size), int(size)) 103\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 107\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 108\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 109 110\treturn image.NewNineSliceBorder(img, int(tile*4)) 111} 112 113func PressedNineSlice(base color.Color) *image.NineSlice { 114\tvar size float32 = 64 115\tvar tiles float32 = 16 116\tvar radius float32 = 8 117 118\ttile := size / tiles 119\tfacet := Mix(base, colornames.Gainsboro, 0.2) 120 121\timg := ebiten.NewImage(int(size), int(size)) 122\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 124\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 125\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 126 127\treturn image.NewNineSliceBorder(img, int(tile*4)) 128} 129 130func Mix(a, b color.Color, percent float64) color.Color { 131\trgba := func(c color.Color) (r, g, b, a uint8) { 132\tr16, g16, b16, a16 := c.RGBA() 133\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 134\t} 135\tlerp := func(x, y uint8) uint8 { 136\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 137\t} 138\tr1, g1, b1, a1 := rgba(a) 139\tr2, g2, b2, a2 := rgba(b) 140 141\treturn color.RGBA{ 142\tR: lerp(r1, r2), 143\tG: lerp(g1, g2), 144\tB: lerp(b1, b2), 145\tA: lerp(a1, a2), 146\t} 147} 148 149func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 150\tpath := \u0026vector.Path{} 151 152\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 153\tpath.LineTo(x+w, y+h-br) 154\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 155\tpath.LineTo(x+bl, y+h) 156\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 157\tpath.LineTo(x, y+tl) 158\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 159\tpath.Close() 160 161\treturn path 162} 163 164func main() { 165\tebiten.SetWindowSize(480, 320) 166\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 167\tif err := ebiten.RunGame(NewGame()); err != nil { 168\tpanic(err) 169\t} 170} 1button := widget.NewButton( 2\twidget.ButtonOpts.IgnoreTransparentPixels(false), 3\twidget.ButtonOpts.CursorEnteredHandler( 4\tfunc(args *widget.ButtonHoverEventArgs) { 5\tvar b strings.Builder 6\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 7\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8\tfmt.Print(b.String()) 9\t}, 10\t), 11) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"fmt\" 6\t\"image/color\" 7\t\"math\" 8\t\"strings\" 9\t\"github.com/ebitenui/ebitenui\" 10\t\"github.com/ebitenui/ebitenui/image\" 11\t\"github.com/ebitenui/ebitenui/widget\" 12\t\"github.com/hajimehoshi/ebiten/v2\" 13\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 14\t\"github.com/hajimehoshi/ebiten/v2/vector\" 15\t\"golang.org/x/image/font/gofont/goregular\" 16\t\"golang.org/x/image/colornames\" 17) 18 19type Game struct { 20\tui *ebitenui.UI 21} 22 23func NewGame() *Game { 24\tbutton := widget.NewButton( 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39\twidget.ButtonOpts.IgnoreTransparentPixels(false), 40\twidget.ButtonOpts.CursorEnteredHandler( 41\tfunc(args *widget.ButtonHoverEventArgs) { 42\tvar b strings.Builder 43\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 44\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 45\tfmt.Print(b.String()) 46\t}, 47\t), 48\twidget.ButtonOpts.WidgetOpts( 49\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 50\tVerticalPosition: widget.AnchorLayoutPositionCenter, 51\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 52\t}), 53\twidget.WidgetOpts.MinSize(180, 48), 54\t), 55\t) 56\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 57\troot := widget.NewContainer( 58\twidget.ContainerOpts.BackgroundImage( 59\timage.NewNineSliceColor(colornames.Gainsboro), 60\t), 61\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 62\t) 63\troot.AddChild(button) 64 65\treturn \u0026Game{ 66\tui: \u0026ebitenui.UI{Container: root}, 67\t} 68} 69 70func (g *Game) Update() error { 71\tg.ui.Update() 72\treturn nil 73} 74 75func (g *Game) Draw(screen *ebiten.Image) { 76\tg.ui.Draw(screen) 77} 78 79func (g *Game) Layout(w, h int) (int, int) { 80\treturn w, h 81} 82 83func DefaultFont() text.Face { 84\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 85\tif err != nil { 86\tpanic(err) 87\t} 88\treturn \u0026text.GoTextFace{ 89\tSource: s, 90\tSize: 20, 91\t} 92} 93 94func DefaultNineSlice(base color.Color) *image.NineSlice { 95\tvar size float32 = 64 96\tvar tiles float32 = 16 97\tvar radius float32 = 8 98 99\ttile := size / tiles 100\tfacet := Mix(base, colornames.Gainsboro, 0.2) 101 102\timg := ebiten.NewImage(int(size), int(size)) 103\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 107\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 108\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 109 110\treturn image.NewNineSliceBorder(img, int(tile*4)) 111} 112 113func PressedNineSlice(base color.Color) *image.NineSlice { 114\tvar size float32 = 64 115\tvar tiles float32 = 16 116\tvar radius float32 = 8 117 118\ttile := size / tiles 119\tfacet := Mix(base, colornames.Gainsboro, 0.2) 120 121\timg := ebiten.NewImage(int(size), int(size)) 122\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 124\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 125\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 126 127\treturn image.NewNineSliceBorder(img, int(tile*4)) 128} 129 130func Mix(a, b color.Color, percent float64) color.Color { 131\trgba := func(c color.Color) (r, g, b, a uint8) { 132\tr16, g16, b16, a16 := c.RGBA() 133\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 134\t} 135\tlerp := func(x, y uint8) uint8 { 136\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 137\t} 138\tr1, g1, b1, a1 := rgba(a) 139\tr2, g2, b2, a2 := rgba(b) 140 141\treturn color.RGBA{ 142\tR: lerp(r1, r2), 143\tG: lerp(g1, g2), 144\tB: lerp(b1, b2), 145\tA: lerp(a1, a2), 146\t} 147} 148 149func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 150\tpath := \u0026vector.Path{} 151 152\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 153\tpath.LineTo(x+w, y+h-br) 154\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 155\tpath.LineTo(x+bl, y+h) 156\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 157\tpath.LineTo(x, y+tl) 158\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 159\tpath.Close() 160 161\treturn path 162} 163 164func main() { 165\tebiten.SetWindowSize(480, 320) 166\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 167\tif err := ebiten.RunGame(NewGame()); err != nil { 168\tpanic(err) 169\t} 170} Widget handlers Clicked Handler Triggered when a release is performed anywhere after a press, its the default in most cases.\n1button := widget.NewButton( 2 widget.ButtonOpts.ClickedHandler( 3 func(args *widget.ButtonClickedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Clicked\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Print(b.String()) 8 }, 9 ), 10) Pressed Handler Triggered when a press is performed inside a widget, useful for long presses with different timings.\n1button := widget.NewButton( 2 widget.ButtonOpts.PressedHandler( 3 func(args *widget.ButtonPressedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Pressed\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Print(b.String()) 8 }, 9 ), 10) Released Handler Triggered when a release is performed inside a widget, useful for drag-n-drop things from one widget to another.\n1button := widget.NewButton( 2 widget.ButtonOpts.ReleasedHandler( 3 func(args *widget.ButtonReleasedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Released\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Inside: %v\\n\", args.Inside) 7 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Entered Handler Triggered when the cursor enters the button area.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorEnteredHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Moved Handler Triggered when the cursor moves within the button area between entered and exited events.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorMovedHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Moved\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Exited Handler Triggered when the cursor exits the button area.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorExitedHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Exited\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) State Changed Handler Triggered when the button’s state changes like disabled, hovered, pressed, etc.\n1button := widget.NewButton( 2 widget.ButtonOpts.StateChangedHandler( 3 func(args *widget.ButtonChangedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button State Changed\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e State: %v\\n\", args.State) 7 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8 fmt.Print(b.String()) 9 }, 10 ), 11)",
    "description": "A simple button with text that can be set to a background color or image for each state and a callback to react to events.",
    "tags": [],
    "title": "Button",
    "uri": "/eui/widgets/button/index.html"
  },
  {
    "breadcrumb": "Basics",
    "content": "The most basic way to present the user interface in an application is to break it up into nested containers with different layouts, inside which widgets are located for interaction.\nThe library provides a rendering manager in which you will place your entire UI. The manager is located in ebitenui package.\n1import \"github.com/ebitenui/ebitenui\" Manager needs to get constantly updated and drawed.\n1type Game struct { 2\tui *ebitenui.UI 3} 4 5 func NewGame() *Game { 6 return \u0026Game{ 7\tui: \u0026ebitenui.UI{}, 8\t} 9} 10 11func (g *Game) Update() error { 12\tg.ui.Update() 13\treturn nil 14} 15 16func (g *Game) Draw(screen *ebiten.Image) { 17\tg.ui.Draw(screen) 18} Any UI in this library consists of containers that are nested in each other. Container is located in widget package.\n1import \"github.com/ebitenui/ebitenui/widget\" The manager is contains a reference to the root container and responsible for delivering events throughout the user interface. Let’s pass our container there so we can interact with it. There is only one container type which can be created like this.\n1func NewGame() *Game { 2 root := widget.NewContainer() 3 return \u0026Game{ 4 ui: \u0026ebitenui.UI{Container: root}, 5 } 6} The standard library has a package with default colors that that will be useful to us, like: Indianred , Goldenrod , Steelblue , Mediumseagreen , Darkslategray , Gainsboro .\n1import \"golang.org/x/image/colornames\" The library draws all interface elements using multiple image tiles also known as nine-slice to prevent image scaling distortion. That package will help us to work with images.\n1import \"github.com/ebitenui/ebitenui/image\" We have everything to get the first result. The container have several options to setup, like background color.\n1root := widget.NewContainer( 2 widget.ContainerOpts.BackgroundImage( 3 image.NewNineSliceColor(colornames.Gainsboro), 4 ), 5) Lets run the app. We will see a single container that will take up all the free space.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\troot := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Gainsboro), 19\t), 20\t) 21 22\treturn \u0026Game{ 23\tui: \u0026ebitenui.UI{Container: root}, 24\t} 25} 26 27func (g *Game) Update() error { 28\tg.ui.Update() 29\treturn nil 30} 31 32func (g *Game) Draw(screen *ebiten.Image) { 33\tg.ui.Draw(screen) 34} 35 36func (g *Game) Layout(w, h int) (int, int) { 37\treturn w, h 38} 39 40func main() { 41\tebiten.SetWindowSize(480, 320) 42\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 43\tif err := ebiten.RunGame(NewGame()); err != nil { 44\tpanic(err) 45\t} 46} Containers can be composed into each other. The order adding child containers does not matter.\n1left := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5) 6right := widget.NewContainer( 7\twidget.ContainerOpts.BackgroundImage( 8\timage.NewNineSliceColor(assets.Steelblue), 9\t), 10) 11root := widget.NewContainer( 12\twidget.ContainerOpts.BackgroundImage( 13\timage.NewNineSliceColor(colornames.Gainsboro), 14\t), 15) 16root.AddChild(left) 17root.AddChild(right) To prevent child containers from overlapping each other, we can specify how they are positioned within the parent container using other container properties, such as layout.\n1root := widget.NewContainer( 2 widget.ContainerOpts.Layout(widget.NewAnchorLayout()), 3) Positioning within the layout is specified by the LayoutData structure inside each container. In addition, at least, each container must have a minimum size.\n1left := widget.NewContainer( 2 widget.ContainerOpts.WidgetOpts( 3 widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 4 HorizontalPosition: widget.AnchorLayoutPositionStart, 5 StretchVertical: true, 6 }), 7 widget.WidgetOpts.MinSize(50, 50), 8 ), 9) Let’s set similar options for other containers.\n1left := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tStretchVertical: true, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12) 13right := widget.NewContainer( 14\twidget.ContainerOpts.BackgroundImage( 15\timage.NewNineSliceColor(colornames.Mediumseagreen), 16\t), 17\twidget.ContainerOpts.WidgetOpts( 18\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 19\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 20\tStretchVertical: true, 21\t}), 22\twidget.WidgetOpts.MinSize(50, 50), 23\t), 24) 25root := widget.NewContainer( 26\twidget.ContainerOpts.BackgroundImage( 27\timage.NewNineSliceColor(colornames.Gainsboro), 28\t), 29\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 30) 31root.AddChild(left) 32root.AddChild(right) Let’s launch the application. We will see one root container in background and two child containers inside at different position that will stretch vertically.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\troot := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Gainsboro), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46\troot.AddChild(left) 47\troot.AddChild(right) 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} The library has several different layouts for different situations, you can study each of them in detail on the next pages.",
    "description": "The most basic way to present the user interface in an application is to break it up into nested containers with different layouts, inside which widgets are located for interaction.",
    "tags": [],
    "title": "Container \u0026 layouts",
    "uri": "/eui/basics/container-layouts/index.html"
  },
  {
    "breadcrumb": "",
    "content": "The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.\nContent Anchor Row Grid",
    "description": "The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.",
    "tags": [],
    "title": "Layouts",
    "uri": "/eui/layouts/index.html"
  },
  {
    "breadcrumb": "Layouts",
    "content": "Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 50), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 50), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 50), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 50), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 50), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(5), 80\twidget.RowLayoutOpts.Padding(widget.NewInsetsSimple(25)), 81\t)), 82\t) 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} Layout options Direction Responsible for whether child containers will follow each other in rows or columns.\nDirection: Vertical Horizontal 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\t)), 80\t) 81\troot.AddChild(a) 82\troot.AddChild(b) 83\troot.AddChild(c) 84\troot.AddChild(d) 85\troot.AddChild(e) 86 87\treturn \u0026Game{ 88\tui: \u0026ebitenui.UI{Container: root}, 89\t} 90} 91 92func (g *Game) Update() error { 93\tg.ui.Update() 94\treturn nil 95} 96 97func (g *Game) Draw(screen *ebiten.Image) { 98\tg.ui.Draw(screen) 99} 100 101func (g *Game) Layout(w, h int) (int, int) { 102\treturn w, h 103} 104 105func main() { 106\tebiten.SetWindowSize(480, 320) 107\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 108\tif err := ebiten.RunGame(NewGame()); err != nil { 109\tpanic(err) 110\t} 111} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionHorizontal, 78\t), 79\t)), 80\t) 81\troot.AddChild(a) 82\troot.AddChild(b) 83\troot.AddChild(c) 84\troot.AddChild(d) 85\troot.AddChild(e) 86 87\treturn \u0026Game{ 88\tui: \u0026ebitenui.UI{Container: root}, 89\t} 90} 91 92func (g *Game) Update() error { 93\tg.ui.Update() 94\treturn nil 95} 96 97func (g *Game) Draw(screen *ebiten.Image) { 98\tg.ui.Draw(screen) 99} 100 101func (g *Game) Layout(w, h int) (int, int) { 102\treturn w, h 103} 104 105func main() { 106\tebiten.SetWindowSize(480, 320) 107\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 108\tif err := ebiten.RunGame(NewGame()); err != nil { 109\tpanic(err) 110\t} 111} Padding Layout allows you to specify padding for all child elements but not the itself. Please note that its not possible to specify padding at the end, so the direction will changed accordingly.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tLeft: 50, 11\t}), 12\t)), 13) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Padding(widget.Insets{ 80\tLeft: 50, 81\t}), 82\t)), 83\t) 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tRight: 50, 11\t}), 12\t)), 13) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Padding(widget.Insets{ 80\tRight: 50, 81\t}), 82\t)), 83\t) 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tTop: 50, 11\t}), 12\t)), 13) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionHorizontal, 78\t), 79\twidget.RowLayoutOpts.Padding(widget.Insets{ 80\tTop: 50, 81\t}), 82\t)), 83\t) 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tBottom: 50, 11\t}), 12\t)), 13) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionHorizontal, 78\t), 79\twidget.RowLayoutOpts.Padding(widget.Insets{ 80\tBottom: 50, 81\t}), 82\t)), 83\t) 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} Spacing Layout allows you to specify padding for all child elements but not the itself.\nSpacing: 0 25 50 75 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(0), 10\t)), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(0), 80\t)), 81\t) 82\troot.AddChild(a) 83\troot.AddChild(b) 84\troot.AddChild(c) 85\troot.AddChild(d) 86\troot.AddChild(e) 87 88\treturn \u0026Game{ 89\tui: \u0026ebitenui.UI{Container: root}, 90\t} 91} 92 93func (g *Game) Update() error { 94\tg.ui.Update() 95\treturn nil 96} 97 98func (g *Game) Draw(screen *ebiten.Image) { 99\tg.ui.Draw(screen) 100} 101 102func (g *Game) Layout(w, h int) (int, int) { 103\treturn w, h 104} 105 106func main() { 107\tebiten.SetWindowSize(480, 320) 108\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 109\tif err := ebiten.RunGame(NewGame()); err != nil { 110\tpanic(err) 111\t} 112} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(25), 10\t)), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(25), 80\t)), 81\t) 82\troot.AddChild(a) 83\troot.AddChild(b) 84\troot.AddChild(c) 85\troot.AddChild(d) 86\troot.AddChild(e) 87 88\treturn \u0026Game{ 89\tui: \u0026ebitenui.UI{Container: root}, 90\t} 91} 92 93func (g *Game) Update() error { 94\tg.ui.Update() 95\treturn nil 96} 97 98func (g *Game) Draw(screen *ebiten.Image) { 99\tg.ui.Draw(screen) 100} 101 102func (g *Game) Layout(w, h int) (int, int) { 103\treturn w, h 104} 105 106func main() { 107\tebiten.SetWindowSize(480, 320) 108\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 109\tif err := ebiten.RunGame(NewGame()); err != nil { 110\tpanic(err) 111\t} 112} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(50), 10\t)), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(50), 80\t)), 81\t) 82\troot.AddChild(a) 83\troot.AddChild(b) 84\troot.AddChild(c) 85\troot.AddChild(d) 86\troot.AddChild(e) 87 88\treturn \u0026Game{ 89\tui: \u0026ebitenui.UI{Container: root}, 90\t} 91} 92 93func (g *Game) Update() error { 94\tg.ui.Update() 95\treturn nil 96} 97 98func (g *Game) Draw(screen *ebiten.Image) { 99\tg.ui.Draw(screen) 100} 101 102func (g *Game) Layout(w, h int) (int, int) { 103\treturn w, h 104} 105 106func main() { 107\tebiten.SetWindowSize(480, 320) 108\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 109\tif err := ebiten.RunGame(NewGame()); err != nil { 110\tpanic(err) 111\t} 112} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(75), 10\t)), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(75), 80\t)), 81\t) 82\troot.AddChild(a) 83\troot.AddChild(b) 84\troot.AddChild(c) 85\troot.AddChild(d) 86\troot.AddChild(e) 87 88\treturn \u0026Game{ 89\tui: \u0026ebitenui.UI{Container: root}, 90\t} 91} 92 93func (g *Game) Update() error { 94\tg.ui.Update() 95\treturn nil 96} 97 98func (g *Game) Draw(screen *ebiten.Image) { 99\tg.ui.Draw(screen) 100} 101 102func (g *Game) Layout(w, h int) (int, int) { 103\treturn w, h 104} 105 106func main() { 107\tebiten.SetWindowSize(480, 320) 108\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 109\tif err := ebiten.RunGame(NewGame()); err != nil { 110\tpanic(err) 111\t} 112} Layout data Stretch Responsible for stretching the element along the entire length of the opposite axis.\nStretch: False True 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tStretch: false, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: false, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: false, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: false, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: false, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: false, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\t)), 80\t) 81\troot.AddChild(a) 82\troot.AddChild(b) 83\troot.AddChild(c) 84\troot.AddChild(d) 85\troot.AddChild(e) 86 87\treturn \u0026Game{ 88\tui: \u0026ebitenui.UI{Container: root}, 89\t} 90} 91 92func (g *Game) Update() error { 93\tg.ui.Update() 94\treturn nil 95} 96 97func (g *Game) Draw(screen *ebiten.Image) { 98\tg.ui.Draw(screen) 99} 100 101func (g *Game) Layout(w, h int) (int, int) { 102\treturn w, h 103} 104 105func main() { 106\tebiten.SetWindowSize(480, 320) 107\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 108\tif err := ebiten.RunGame(NewGame()); err != nil { 109\tpanic(err) 110\t} 111} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tStretch: true, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: false, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: false, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: false, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: false, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\t)), 80\t) 81\troot.AddChild(a) 82\troot.AddChild(b) 83\troot.AddChild(c) 84\troot.AddChild(d) 85\troot.AddChild(e) 86 87\treturn \u0026Game{ 88\tui: \u0026ebitenui.UI{Container: root}, 89\t} 90} 91 92func (g *Game) Update() error { 93\tg.ui.Update() 94\treturn nil 95} 96 97func (g *Game) Draw(screen *ebiten.Image) { 98\tg.ui.Draw(screen) 99} 100 101func (g *Game) Layout(w, h int) (int, int) { 102\treturn w, h 103} 104 105func main() { 106\tebiten.SetWindowSize(480, 320) 107\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 108\tif err := ebiten.RunGame(NewGame()); err != nil { 109\tpanic(err) 110\t} 111} Position Responsible for aligning the element along the opposite axis if it is not stretched.\nPosition: Start Center End 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionStart, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tPosition: widget.RowLayoutPositionStart, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionCenter, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tPosition: widget.RowLayoutPositionCenter, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionEnd, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tPosition: widget.RowLayoutPositionEnd, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} Max size Responsible for the allowable size of the container.\nMax: None Width Height Both 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{}), 7\twidget.WidgetOpts.MinSize(96, 64), 8\t), 9) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{}), 22\twidget.WidgetOpts.MinSize(96, 64), 23\t), 24\t) 25\tb := widget.NewContainer( 26\twidget.ContainerOpts.BackgroundImage( 27\timage.NewNineSliceColor(colornames.Goldenrod), 28\t), 29\twidget.ContainerOpts.WidgetOpts( 30\twidget.WidgetOpts.MinSize(96, 64), 31\t), 32\t) 33\tc := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colornames.Steelblue), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.MinSize(96, 64), 39\t), 40\t) 41\td := widget.NewContainer( 42\twidget.ContainerOpts.BackgroundImage( 43\timage.NewNineSliceColor(colornames.Mediumseagreen), 44\t), 45\twidget.ContainerOpts.WidgetOpts( 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\te := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Darkslategray), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.MinSize(96, 64), 55\t), 56\t) 57\troot := widget.NewContainer( 58\twidget.ContainerOpts.BackgroundImage( 59\timage.NewNineSliceColor(colornames.Gainsboro), 60\t), 61\twidget.ContainerOpts.Layout(widget.NewRowLayout( 62\twidget.RowLayoutOpts.Direction( 63\twidget.DirectionVertical, 64\t), 65\t)), 66\t) 67\troot.AddChild(a) 68\troot.AddChild(b) 69\troot.AddChild(c) 70\troot.AddChild(d) 71\troot.AddChild(e) 72 73\treturn \u0026Game{ 74\tui: \u0026ebitenui.UI{Container: root}, 75\t} 76} 77 78func (g *Game) Update() error { 79\tg.ui.Update() 80\treturn nil 81} 82 83func (g *Game) Draw(screen *ebiten.Image) { 84\tg.ui.Draw(screen) 85} 86 87func (g *Game) Layout(w, h int) (int, int) { 88\treturn w, h 89} 90 91func main() { 92\tebiten.SetWindowSize(480, 320) 93\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 94\tif err := ebiten.RunGame(NewGame()); err != nil { 95\tpanic(err) 96\t} 97} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxWidth: 20, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tMaxWidth: 20, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxHeight: 20, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tMaxHeight: 20, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxWidth: 20, 8\tMaxHeight: 20, 9\t}), 10\twidget.WidgetOpts.MinSize(96, 64), 11\t), 12) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tMaxWidth: 20, 23\tMaxHeight: 20, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28\tb := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Goldenrod), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.MinSize(96, 64), 34\t), 35\t) 36\tc := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colornames.Steelblue), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.MinSize(96, 64), 42\t), 43\t) 44\td := widget.NewContainer( 45\twidget.ContainerOpts.BackgroundImage( 46\timage.NewNineSliceColor(colornames.Mediumseagreen), 47\t), 48\twidget.ContainerOpts.WidgetOpts( 49\twidget.WidgetOpts.MinSize(96, 64), 50\t), 51\t) 52\te := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Darkslategray), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\troot := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Gainsboro), 63\t), 64\twidget.ContainerOpts.Layout(widget.NewRowLayout( 65\twidget.RowLayoutOpts.Direction( 66\twidget.DirectionVertical, 67\t), 68\t)), 69\t) 70\troot.AddChild(a) 71\troot.AddChild(b) 72\troot.AddChild(c) 73\troot.AddChild(d) 74\troot.AddChild(e) 75 76\treturn \u0026Game{ 77\tui: \u0026ebitenui.UI{Container: root}, 78\t} 79} 80 81func (g *Game) Update() error { 82\tg.ui.Update() 83\treturn nil 84} 85 86func (g *Game) Draw(screen *ebiten.Image) { 87\tg.ui.Draw(screen) 88} 89 90func (g *Game) Layout(w, h int) (int, int) { 91\treturn w, h 92} 93 94func main() { 95\tebiten.SetWindowSize(480, 320) 96\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 97\tif err := ebiten.RunGame(NewGame()); err != nil { 98\tpanic(err) 99\t} 100}",
    "description": "Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.",
    "tags": [],
    "title": "Row",
    "uri": "/eui/layouts/row/index.html"
  },
  {
    "breadcrumb": "",
    "content": "The library provides many ways to interact with your composite layout, and this chapter will tell you about each of them.\nContent Button",
    "description": "The library provides many ways to interact with your composite layout, and this chapter will tell you about each of them.",
    "tags": [],
    "title": "Widgets",
    "uri": "/eui/widgets/index.html"
  },
  {
    "breadcrumb": "Layouts",
    "content": "Grid layout puts all child containers in an even grid, wrapping each row based on the number of columns.\nFull example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10\t\"golang.org/x/image/colornames\" 11) 12 13type Game struct { 14\tui *ebitenui.UI 15} 16 17func NewGame() *Game { 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.NewInsetsSimple(25)), 26\twidget.GridLayoutOpts.Spacing(5, 5), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Layout options Columns Responsible for wrapping cells beyond a given number.\nStretch: 1 2 3 4 5 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(1), 7\t)), 8) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(1), 23\t)), 24\t) 25\tcolors := []color.Color{ 26\tcolornames.Indianred, 27\tcolornames.Goldenrod, 28\tcolornames.Steelblue, 29\tcolornames.Mediumseagreen, 30\tcolornames.Darkslategray, 31\t} 32\tfor i := 0; i \u003c 5; i++ { 33\tchild := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colors[i%len(colors)]), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 39\twidget.WidgetOpts.MinSize(64, 64), 40\t), 41\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 42\t) 43\troot.AddChild(child) 44\t} 45 46\treturn \u0026Game{ 47\tui: \u0026ebitenui.UI{Container: root}, 48\t} 49} 50 51func (g *Game) Update() error { 52\tg.ui.Update() 53\treturn nil 54} 55 56func (g *Game) Draw(screen *ebiten.Image) { 57\tg.ui.Draw(screen) 58} 59 60func (g *Game) Layout(w, h int) (int, int) { 61\treturn w, h 62} 63 64func main() { 65\tebiten.SetWindowSize(480, 320) 66\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 67\tif err := ebiten.RunGame(NewGame()); err != nil { 68\tpanic(err) 69\t} 70} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(2), 7\t)), 8) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(2), 23\t)), 24\t) 25\tcolors := []color.Color{ 26\tcolornames.Indianred, 27\tcolornames.Goldenrod, 28\tcolornames.Steelblue, 29\tcolornames.Mediumseagreen, 30\tcolornames.Darkslategray, 31\t} 32\tfor i := 0; i \u003c 5; i++ { 33\tchild := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colors[i%len(colors)]), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 39\twidget.WidgetOpts.MinSize(64, 64), 40\t), 41\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 42\t) 43\troot.AddChild(child) 44\t} 45 46\treturn \u0026Game{ 47\tui: \u0026ebitenui.UI{Container: root}, 48\t} 49} 50 51func (g *Game) Update() error { 52\tg.ui.Update() 53\treturn nil 54} 55 56func (g *Game) Draw(screen *ebiten.Image) { 57\tg.ui.Draw(screen) 58} 59 60func (g *Game) Layout(w, h int) (int, int) { 61\treturn w, h 62} 63 64func main() { 65\tebiten.SetWindowSize(480, 320) 66\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 67\tif err := ebiten.RunGame(NewGame()); err != nil { 68\tpanic(err) 69\t} 70} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(3), 7\t)), 8) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(3), 23\t)), 24\t) 25\tcolors := []color.Color{ 26\tcolornames.Indianred, 27\tcolornames.Goldenrod, 28\tcolornames.Steelblue, 29\tcolornames.Mediumseagreen, 30\tcolornames.Darkslategray, 31\t} 32\tfor i := 0; i \u003c 5; i++ { 33\tchild := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colors[i%len(colors)]), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 39\twidget.WidgetOpts.MinSize(64, 64), 40\t), 41\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 42\t) 43\troot.AddChild(child) 44\t} 45 46\treturn \u0026Game{ 47\tui: \u0026ebitenui.UI{Container: root}, 48\t} 49} 50 51func (g *Game) Update() error { 52\tg.ui.Update() 53\treturn nil 54} 55 56func (g *Game) Draw(screen *ebiten.Image) { 57\tg.ui.Draw(screen) 58} 59 60func (g *Game) Layout(w, h int) (int, int) { 61\treturn w, h 62} 63 64func main() { 65\tebiten.SetWindowSize(480, 320) 66\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 67\tif err := ebiten.RunGame(NewGame()); err != nil { 68\tpanic(err) 69\t} 70} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(4), 7\t)), 8) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(4), 23\t)), 24\t) 25\tcolors := []color.Color{ 26\tcolornames.Indianred, 27\tcolornames.Goldenrod, 28\tcolornames.Steelblue, 29\tcolornames.Mediumseagreen, 30\tcolornames.Darkslategray, 31\t} 32\tfor i := 0; i \u003c 5; i++ { 33\tchild := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colors[i%len(colors)]), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 39\twidget.WidgetOpts.MinSize(64, 64), 40\t), 41\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 42\t) 43\troot.AddChild(child) 44\t} 45 46\treturn \u0026Game{ 47\tui: \u0026ebitenui.UI{Container: root}, 48\t} 49} 50 51func (g *Game) Update() error { 52\tg.ui.Update() 53\treturn nil 54} 55 56func (g *Game) Draw(screen *ebiten.Image) { 57\tg.ui.Draw(screen) 58} 59 60func (g *Game) Layout(w, h int) (int, int) { 61\treturn w, h 62} 63 64func main() { 65\tebiten.SetWindowSize(480, 320) 66\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 67\tif err := ebiten.RunGame(NewGame()); err != nil { 68\tpanic(err) 69\t} 70} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\t)), 8) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\t)), 24\t) 25\tcolors := []color.Color{ 26\tcolornames.Indianred, 27\tcolornames.Goldenrod, 28\tcolornames.Steelblue, 29\tcolornames.Mediumseagreen, 30\tcolornames.Darkslategray, 31\t} 32\tfor i := 0; i \u003c 5; i++ { 33\tchild := widget.NewContainer( 34\twidget.ContainerOpts.BackgroundImage( 35\timage.NewNineSliceColor(colors[i%len(colors)]), 36\t), 37\twidget.ContainerOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 39\twidget.WidgetOpts.MinSize(64, 64), 40\t), 41\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 42\t) 43\troot.AddChild(child) 44\t} 45 46\treturn \u0026Game{ 47\tui: \u0026ebitenui.UI{Container: root}, 48\t} 49} 50 51func (g *Game) Update() error { 52\tg.ui.Update() 53\treturn nil 54} 55 56func (g *Game) Draw(screen *ebiten.Image) { 57\tg.ui.Draw(screen) 58} 59 60func (g *Game) Layout(w, h int) (int, int) { 61\treturn w, h 62} 63 64func main() { 65\tebiten.SetWindowSize(480, 320) 66\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 67\tif err := ebiten.RunGame(NewGame()); err != nil { 68\tpanic(err) 69\t} 70} Stretch Responsible for choosing cell coordinates across each axis that will evenly occupy the remaining space.\nStretch: AllxAll Allx3 3xAll 1x1 3x3 5x5 2,3,4x3 3x2,3,4 2,3,4x2,3,4 AllxOff OffxAll OffxOff 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{true, true, true, true, true}, 25\t[]bool{true, true, true, true, true}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{true, true, true, true, true}, 25\t[]bool{false, false, true, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, true, false, false}, 25\t[]bool{true, true, true, true, true}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, false, false, false, false}, 9\t[]bool{true, false, false, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{true, false, false, false, false}, 25\t[]bool{true, false, false, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, true, false, false}, 25\t[]bool{false, false, true, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, true}, 9\t[]bool{false, false, false, false, true}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, false, false, true}, 25\t[]bool{false, false, false, false, true}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, true, true, true, false}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, true, true, true, false}, 25\t[]bool{false, false, true, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{false, true, true, true, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, true, false, false}, 25\t[]bool{false, true, true, true, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, true, true, true, false}, 9\t[]bool{false, true, true, true, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, true, true, true, false}, 25\t[]bool{false, true, true, true, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{false, false, false, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{true, true, true, true, true}, 25\t[]bool{false, false, false, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, false}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, false, false, false}, 25\t[]bool{true, true, true, true, true}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, false}, 9\t[]bool{false, false, false, false, false}, 10\t), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.Stretch( 24\t[]bool{false, false, false, false, false}, 25\t[]bool{false, false, false, false, false}, 26\t), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Default stretch Responsible for selecting all cells along each axis. Can be used instead of the previous option to avoid listing all cells. It can also be overridden by a regular property.\nStretch: TruexTrue TruexFalse FalsexTrue FalsexFalse 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\t)), 9) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(16, 16), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47\t} 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, false), 8\t)), 9) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, false), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(16, 16), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47\t} 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(false, true), 8\t)), 9) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(false, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(16, 16), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47\t} 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(false, false), 8\t)), 9) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(false, false), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(16, 16), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47\t} 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} Padding Responsible for the offset of the parent container.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tLeft: 50, 10\t}), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Padding(widget.Insets{ 25\tLeft: 50, 26\t}), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tRight: 50, 10\t}), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Padding(widget.Insets{ 25\tRight: 50, 26\t}), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tTop: 50, 10\t}), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Padding(widget.Insets{ 25\tTop: 50, 26\t}), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tBottom: 50, 10\t}), 11\t)), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Padding(widget.Insets{ 25\tBottom: 50, 26\t}), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Spacing Responsible for the offset between child elements.\nSpacing: 0x0 0x25 25x0 25x25 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(0, 0), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Spacing(0, 0), 25\t)), 26\t) 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor y := 0; y \u003c 5; y++ { 35\tfor x := 0; x \u003c 5; x++ { 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 42\twidget.WidgetOpts.MinSize(16, 16), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46\troot.AddChild(child) 47\t} 48\t} 49 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func main() { 69\tebiten.SetWindowSize(480, 320) 70\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 71\tif err := ebiten.RunGame(NewGame()); err != nil { 72\tpanic(err) 73\t} 74} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(0, 25), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Spacing(0, 25), 25\t)), 26\t) 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor y := 0; y \u003c 5; y++ { 35\tfor x := 0; x \u003c 5; x++ { 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 42\twidget.WidgetOpts.MinSize(16, 16), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46\troot.AddChild(child) 47\t} 48\t} 49 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func main() { 69\tebiten.SetWindowSize(480, 320) 70\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 71\tif err := ebiten.RunGame(NewGame()); err != nil { 72\tpanic(err) 73\t} 74} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(25, 0), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Spacing(25, 0), 25\t)), 26\t) 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor y := 0; y \u003c 5; y++ { 35\tfor x := 0; x \u003c 5; x++ { 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 42\twidget.WidgetOpts.MinSize(16, 16), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46\troot.AddChild(child) 47\t} 48\t} 49 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func main() { 69\tebiten.SetWindowSize(480, 320) 70\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 71\tif err := ebiten.RunGame(NewGame()); err != nil { 72\tpanic(err) 73\t} 74} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(25, 25), 9\t)), 10) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\twidget.GridLayoutOpts.Spacing(25, 25), 25\t)), 26\t) 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor y := 0; y \u003c 5; y++ { 35\tfor x := 0; x \u003c 5; x++ { 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 42\twidget.WidgetOpts.MinSize(16, 16), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46\troot.AddChild(child) 47\t} 48\t} 49 50\treturn \u0026Game{ 51\tui: \u0026ebitenui.UI{Container: root}, 52\t} 53} 54 55func (g *Game) Update() error { 56\tg.ui.Update() 57\treturn nil 58} 59 60func (g *Game) Draw(screen *ebiten.Image) { 61\tg.ui.Draw(screen) 62} 63 64func (g *Game) Layout(w, h int) (int, int) { 65\treturn w, h 66} 67 68func main() { 69\tebiten.SetWindowSize(480, 320) 70\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 71\tif err := ebiten.RunGame(NewGame()); err != nil { 72\tpanic(err) 73\t} 74} Layout data Max size Responsible for the allowable size of the child containers.\nMax: None Width Height Both 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 7\twidget.WidgetOpts.MinSize(64, 64), 8\t), 9\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 10) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47\t} 48 49\treturn \u0026Game{ 50\tui: \u0026ebitenui.UI{Container: root}, 51\t} 52} 53 54func (g *Game) Update() error { 55\tg.ui.Update() 56\treturn nil 57} 58 59func (g *Game) Draw(screen *ebiten.Image) { 60\tg.ui.Draw(screen) 61} 62 63func (g *Game) Layout(w, h int) (int, int) { 64\treturn w, h 65} 66 67func main() { 68\tebiten.SetWindowSize(480, 320) 69\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 70\tif err := ebiten.RunGame(NewGame()); err != nil { 71\tpanic(err) 72\t} 73} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\t}), 9\twidget.WidgetOpts.MinSize(64, 64), 10\t), 11\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\t}), 43\twidget.WidgetOpts.MinSize(64, 64), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxHeight: 32, 8\t}), 9\twidget.WidgetOpts.MinSize(64, 64), 10\t), 11\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 12) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxHeight: 32, 42\t}), 43\twidget.WidgetOpts.MinSize(64, 64), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\t}), 10\twidget.WidgetOpts.MinSize(64, 64), 11\t), 12\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 13) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\t}), 44\twidget.WidgetOpts.MinSize(64, 64), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Position Responsible for the allowable size of the child containers. It works when the size of the cells is so limited by the maximum size that it is smaller than the size of the stretched cells that there is free space between them.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionStart, 44\tVerticalPosition: widget.GridLayoutPositionStart, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionCenter, 44\tVerticalPosition: widget.GridLayoutPositionStart, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionEnd, 44\tVerticalPosition: widget.GridLayoutPositionStart, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionStart, 44\tVerticalPosition: widget.GridLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionCenter, 44\tVerticalPosition: widget.GridLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionEnd, 44\tVerticalPosition: widget.GridLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionStart, 44\tVerticalPosition: widget.GridLayoutPositionEnd, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionCenter, 44\tVerticalPosition: widget.GridLayoutPositionEnd, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 41\tMaxWidth: 32, 42\tMaxHeight: 32, 43\tHorizontalPosition: widget.GridLayoutPositionEnd, 44\tVerticalPosition: widget.GridLayoutPositionEnd, 45\t}), 46\twidget.WidgetOpts.MinSize(64, 64), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78}",
    "description": "Grid layout puts all child containers in an even grid, wrapping each row based on the number of columns.",
    "tags": [],
    "title": "Grid",
    "uri": "/eui/layouts/grid/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/eui/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/eui/tags/index.html"
  }
]

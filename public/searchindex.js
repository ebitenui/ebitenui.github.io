var relearn_searchindex = [
  {
    "breadcrumb": "Layouts",
    "content": "Anchor layout allows the child containers to be anchored to a specific constraint.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28 29\tright := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Mediumseagreen), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 35\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 36\tStretchVertical: true, 37\t}), 38\twidget.WidgetOpts.MinSize(50, 50), 39\t), 40\t) 41 42\tup := widget.NewContainer( 43\twidget.ContainerOpts.BackgroundImage( 44\timage.NewNineSliceColor(colornames.Goldenrod), 45\t), 46\twidget.ContainerOpts.WidgetOpts( 47\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 48\tVerticalPosition: widget.AnchorLayoutPositionStart, 49\tStretchHorizontal: true, 50\t}), 51\twidget.WidgetOpts.MinSize(50, 50), 52\t), 53\t) 54\tdown := widget.NewContainer( 55\twidget.ContainerOpts.BackgroundImage( 56\timage.NewNineSliceColor(colornames.Steelblue), 57\t), 58\twidget.ContainerOpts.WidgetOpts( 59\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 60\tVerticalPosition: widget.AnchorLayoutPositionEnd, 61\tStretchHorizontal: true, 62\t}), 63\twidget.WidgetOpts.MinSize(50, 50), 64\t), 65\t) 66\tcenter := widget.NewContainer( 67\twidget.ContainerOpts.BackgroundImage( 68\timage.NewNineSliceColor(colornames.Darkslategray), 69\t), 70\twidget.ContainerOpts.WidgetOpts( 71\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 72\tVerticalPosition: widget.AnchorLayoutPositionCenter, 73\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 74\tStretchHorizontal: true, 75\tStretchVertical: true, 76\t}), 77\twidget.WidgetOpts.MinSize(50, 50), 78\t), 79\t) 80\troot := widget.NewContainer( 81\twidget.ContainerOpts.BackgroundImage( 82\timage.NewNineSliceColor(colornames.Gainsboro), 83\t), 84\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 85\twidget.AnchorLayoutOpts.Padding(widget.NewInsetsSimple(50)), 86\t)), 87\t) 88\troot.AddChild(center) 89\troot.AddChild(left) 90\troot.AddChild(right) 91\troot.AddChild(up) 92\troot.AddChild(down) 93 94\treturn \u0026Game{ 95\tui: \u0026ebitenui.UI{Container: root}, 96\t} 97} 98 99func (g *Game) Update() error { 100\tg.ui.Update() 101\treturn nil 102} 103 104func (g *Game) Draw(screen *ebiten.Image) { 105\tg.ui.Draw(screen) 106} 107 108func (g *Game) Layout(w, h int) (int, int) { 109\treturn w, h 110} 111 112func main() { 113\tebiten.SetWindowSize(480, 320) 114\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 115\tif err := ebiten.RunGame(NewGame()); err != nil { 116\tpanic(err) 117\t} 118} Layout options Padding Layout allows you to specify padding for all child elements but not the itself.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tLeft: 50, 8\t}), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78 79\troot := widget.NewContainer( 80\twidget.ContainerOpts.BackgroundImage( 81\timage.NewNineSliceColor(colornames.Gainsboro), 82\t), 83\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 84\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 85\tLeft: 50, 86\t}), 87\t)), 88\t) 89 90\troot.AddChild(center) 91\troot.AddChild(left) 92\troot.AddChild(right) 93\troot.AddChild(up) 94\troot.AddChild(down) 95 96\treturn \u0026Game{ 97\tui: \u0026ebitenui.UI{Container: root}, 98\t} 99} 100 101func (g *Game) Update() error { 102\tg.ui.Update() 103\treturn nil 104} 105 106func (g *Game) Draw(screen *ebiten.Image) { 107\tg.ui.Draw(screen) 108} 109 110func (g *Game) Layout(w, h int) (int, int) { 111\treturn w, h 112} 113 114func main() { 115\tebiten.SetWindowSize(480, 320) 116\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 117\tif err := ebiten.RunGame(NewGame()); err != nil { 118\tpanic(err) 119\t} 120} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tRight: 50, 8\t}), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78 79\troot := widget.NewContainer( 80\twidget.ContainerOpts.BackgroundImage( 81\timage.NewNineSliceColor(colornames.Gainsboro), 82\t), 83\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 84\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 85\tRight: 50, 86\t}), 87\t)), 88\t) 89 90\troot.AddChild(center) 91\troot.AddChild(left) 92\troot.AddChild(right) 93\troot.AddChild(up) 94\troot.AddChild(down) 95 96\treturn \u0026Game{ 97\tui: \u0026ebitenui.UI{Container: root}, 98\t} 99} 100 101func (g *Game) Update() error { 102\tg.ui.Update() 103\treturn nil 104} 105 106func (g *Game) Draw(screen *ebiten.Image) { 107\tg.ui.Draw(screen) 108} 109 110func (g *Game) Layout(w, h int) (int, int) { 111\treturn w, h 112} 113 114func main() { 115\tebiten.SetWindowSize(480, 320) 116\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 117\tif err := ebiten.RunGame(NewGame()); err != nil { 118\tpanic(err) 119\t} 120} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tTop: 50, 8\t}), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78 79\troot := widget.NewContainer( 80\twidget.ContainerOpts.BackgroundImage( 81\timage.NewNineSliceColor(colornames.Gainsboro), 82\t), 83\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 84\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 85\tTop: 50, 86\t}), 87\t)), 88\t) 89 90\troot.AddChild(center) 91\troot.AddChild(left) 92\troot.AddChild(right) 93\troot.AddChild(up) 94\troot.AddChild(down) 95 96\treturn \u0026Game{ 97\tui: \u0026ebitenui.UI{Container: root}, 98\t} 99} 100 101func (g *Game) Update() error { 102\tg.ui.Update() 103\treturn nil 104} 105 106func (g *Game) Draw(screen *ebiten.Image) { 107\tg.ui.Draw(screen) 108} 109 110func (g *Game) Layout(w, h int) (int, int) { 111\treturn w, h 112} 113 114func main() { 115\tebiten.SetWindowSize(480, 320) 116\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 117\tif err := ebiten.RunGame(NewGame()); err != nil { 118\tpanic(err) 119\t} 120} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 6\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 7\tBottom: 50, 8\t}), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\tleft := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 22\tHorizontalPosition: widget.AnchorLayoutPositionStart, 23\tStretchVertical: true, 24\t}), 25\twidget.WidgetOpts.MinSize(50, 50), 26\t), 27\t) 28\tright := widget.NewContainer( 29\twidget.ContainerOpts.BackgroundImage( 30\timage.NewNineSliceColor(colornames.Mediumseagreen), 31\t), 32\twidget.ContainerOpts.WidgetOpts( 33\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 34\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 35\tStretchVertical: true, 36\t}), 37\twidget.WidgetOpts.MinSize(50, 50), 38\t), 39\t) 40\tup := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Goldenrod), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionStart, 47\tStretchHorizontal: true, 48\t}), 49\twidget.WidgetOpts.MinSize(50, 50), 50\t), 51\t) 52\tdown := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Steelblue), 55\t), 56\twidget.ContainerOpts.WidgetOpts( 57\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 58\tVerticalPosition: widget.AnchorLayoutPositionEnd, 59\tStretchHorizontal: true, 60\t}), 61\twidget.WidgetOpts.MinSize(50, 50), 62\t), 63\t) 64\tcenter := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Darkslategray), 67\t), 68\twidget.ContainerOpts.WidgetOpts( 69\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 70\tVerticalPosition: widget.AnchorLayoutPositionCenter, 71\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 72\tStretchHorizontal: true, 73\tStretchVertical: true, 74\t}), 75\twidget.WidgetOpts.MinSize(50, 50), 76\t), 77\t) 78 79\troot := widget.NewContainer( 80\twidget.ContainerOpts.BackgroundImage( 81\timage.NewNineSliceColor(colornames.Gainsboro), 82\t), 83\twidget.ContainerOpts.Layout(widget.NewAnchorLayout( 84\twidget.AnchorLayoutOpts.Padding(widget.Insets{ 85\tBottom: 50, 86\t}), 87\t)), 88\t) 89 90\troot.AddChild(center) 91\troot.AddChild(left) 92\troot.AddChild(right) 93\troot.AddChild(up) 94\troot.AddChild(down) 95 96\treturn \u0026Game{ 97\tui: \u0026ebitenui.UI{Container: root}, 98\t} 99} 100 101func (g *Game) Update() error { 102\tg.ui.Update() 103\treturn nil 104} 105 106func (g *Game) Draw(screen *ebiten.Image) { 107\tg.ui.Draw(screen) 108} 109 110func (g *Game) Layout(w, h int) (int, int) { 111\treturn w, h 112} 113 114func main() { 115\tebiten.SetWindowSize(480, 320) 116\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 117\tif err := ebiten.RunGame(NewGame()); err != nil { 118\tpanic(err) 119\t} 120} Layout data Position Responsible for aligning the child container along the horizontal and vertical axes.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionStart, 24\tVerticalPosition: widget.AnchorLayoutPositionStart, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 24\tVerticalPosition: widget.AnchorLayoutPositionStart, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionStart, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 24\tVerticalPosition: widget.AnchorLayoutPositionStart, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionStart, 24\tVerticalPosition: widget.AnchorLayoutPositionCenter, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 24\tVerticalPosition: widget.AnchorLayoutPositionCenter, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionCenter, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 24\tVerticalPosition: widget.AnchorLayoutPositionCenter, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionStart, 24\tVerticalPosition: widget.AnchorLayoutPositionEnd, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 24\tVerticalPosition: widget.AnchorLayoutPositionEnd, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62} 1center := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Darkslategray), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 8\tVerticalPosition: widget.AnchorLayoutPositionEnd, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tcenter := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Darkslategray), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 24\tVerticalPosition: widget.AnchorLayoutPositionEnd, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29 30\troot := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Gainsboro), 33\t), 34\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 35\t) 36\troot.AddChild(center) 37 38\treturn \u0026Game{ 39\tui: \u0026ebitenui.UI{Container: root}, 40\t} 41} 42 43func (g *Game) Update() error { 44\tg.ui.Update() 45\treturn nil 46} 47 48func (g *Game) Draw(screen *ebiten.Image) { 49\tg.ui.Draw(screen) 50} 51 52func (g *Game) Layout(w, h int) (int, int) { 53\treturn w, h 54} 55 56func main() { 57\tebiten.SetWindowSize(480, 320) 58\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 59\tif err := ebiten.RunGame(NewGame()); err != nil { 60\tpanic(err) 61\t} 62}",
    "description": "Anchor layout allows the child containers to be anchored to a specific constraint.",
    "tags": [],
    "title": "Anchor",
    "uri": "/layouts/anchor/index.html"
  },
  {
    "breadcrumb": "",
    "content": "This guide will introduce you step by step to the basics of the library and teach you how to use all the main tools.\nRequirements Go \u003e= 1.23 Ebitengine \u003e= 1e6c461 Ebitenui \u003e= b696e24 Content Container \u0026 layouts",
    "description": "This guide will introduce you step by step to the basics of the library and teach you how to use all the main tools.",
    "tags": [],
    "title": "Basics",
    "uri": "/basics/index.html"
  },
  {
    "breadcrumb": "Widgets",
    "content": "A simple button with text that can be set to a background color or image for each state and a callback to react to events.\nFull example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tbutton := widget.NewButton( 23\twidget.ButtonOpts.TextLabel(\"Button\"), 24\twidget.ButtonOpts.TextFace(DefaultFont()), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37\twidget.ButtonOpts.WidgetOpts( 38\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 39\tVerticalPosition: widget.AnchorLayoutPositionCenter, 40\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 41\t}), 42\twidget.WidgetOpts.MinSize(180, 48), 43\t), 44\t) 45\troot := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Gainsboro), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51\troot.AddChild(button) 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func DefaultFont() text.Face { 72\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 73\tif err != nil { 74\tpanic(err) 75\t} 76\treturn \u0026text.GoTextFace{ 77\tSource: s, 78\tSize: 20, 79\t} 80} 81 82func DefaultNineSlice(base color.Color) *image.NineSlice { 83\tvar size float32 = 64 84\tvar tiles float32 = 16 85\tvar radius float32 = 8 86 87\ttile := size / tiles 88\tfacet := Mix(base, colornames.Gainsboro, 0.2) 89 90\timg := ebiten.NewImage(int(size), int(size)) 91\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 92\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 93\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 94\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 95\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97 98\treturn image.NewNineSliceBorder(img, int(tile*4)) 99} 100 101func PressedNineSlice(base color.Color) *image.NineSlice { 102\tvar size float32 = 64 103\tvar tiles float32 = 16 104\tvar radius float32 = 8 105 106\ttile := size / tiles 107\tfacet := Mix(base, colornames.Gainsboro, 0.2) 108 109\timg := ebiten.NewImage(int(size), int(size)) 110\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 111\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 112\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114 115\treturn image.NewNineSliceBorder(img, int(tile*4)) 116} 117 118func Mix(a, b color.Color, percent float64) color.Color { 119\trgba := func(c color.Color) (r, g, b, a uint8) { 120\tr16, g16, b16, a16 := c.RGBA() 121\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 122\t} 123\tlerp := func(x, y uint8) uint8 { 124\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 125\t} 126\tr1, g1, b1, a1 := rgba(a) 127\tr2, g2, b2, a2 := rgba(b) 128 129\treturn color.RGBA{ 130\tR: lerp(r1, r2), 131\tG: lerp(g1, g2), 132\tB: lerp(b1, b2), 133\tA: lerp(a1, a2), 134\t} 135} 136 137func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 138\tpath := \u0026vector.Path{} 139 140\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 141\tpath.LineTo(x+w, y+h-br) 142\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 143\tpath.LineTo(x+bl, y+h) 144\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 145\tpath.LineTo(x, y+tl) 146\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 147\tpath.Close() 148 149\treturn path 150} 151 152func main() { 153\tebiten.SetWindowSize(480, 320) 154\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 155\tif err := ebiten.RunGame(NewGame()); err != nil { 156\tpanic(err) 157\t} 158} Widget options Text padding Responsible for setting text offset from the center of the button.\nPadding: Left Right Top Bottom 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tLeft: 88, 4\t}), 5\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22\tface := DefaultFont() 23 24\tbutton := widget.NewButton( 25 26\twidget.ButtonOpts.TextLabel(\"Button\"), 27\twidget.ButtonOpts.TextFace(face), 28\twidget.ButtonOpts.TextFace(DefaultFont()), 29\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 30\tIdle: colornames.Gainsboro, 31\tHover: colornames.Gainsboro, 32\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 33\t}), 34\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 35\tIdle: DefaultNineSlice(colornames.Darkslategray), 36\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 37\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 38\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 39\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 40\t}), 41 42\twidget.ButtonOpts.TextPadding(widget.Insets{ 43\tLeft: 88, 44\t}), 45 46\twidget.ButtonOpts.WidgetOpts( 47\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 48\tVerticalPosition: widget.AnchorLayoutPositionCenter, 49\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 50\t}), 51\twidget.WidgetOpts.MinSize(180, 48), 52\t), 53 54\t) 55 56\troot := widget.NewContainer( 57\twidget.ContainerOpts.BackgroundImage( 58\timage.NewNineSliceColor(colornames.Gainsboro), 59\t), 60\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 61\t) 62\troot.AddChild(button) 63 64\treturn \u0026Game{ 65\tui: \u0026ebitenui.UI{Container: root}, 66\t} 67} 68 69func (g *Game) Update() error { 70\tg.ui.Update() 71\treturn nil 72} 73 74func (g *Game) Draw(screen *ebiten.Image) { 75\tg.ui.Draw(screen) 76} 77 78func (g *Game) Layout(w, h int) (int, int) { 79\treturn w, h 80} 81 82func DefaultFont() text.Face { 83\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 84\tif err != nil { 85\tpanic(err) 86\t} 87\treturn \u0026text.GoTextFace{ 88\tSource: s, 89\tSize: 20, 90\t} 91} 92 93func DefaultNineSlice(base color.Color) *image.NineSlice { 94\tvar size float32 = 64 95\tvar tiles float32 = 16 96\tvar radius float32 = 8 97 98\ttile := size / tiles 99\tfacet := Mix(base, colornames.Gainsboro, 0.2) 100 101\timg := ebiten.NewImage(int(size), int(size)) 102\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 104\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 106\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 107\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 108 109\treturn image.NewNineSliceBorder(img, int(tile*4)) 110} 111 112func PressedNineSlice(base color.Color) *image.NineSlice { 113\tvar size float32 = 64 114\tvar tiles float32 = 16 115\tvar radius float32 = 8 116 117\ttile := size / tiles 118\tfacet := Mix(base, colornames.Gainsboro, 0.2) 119 120\timg := ebiten.NewImage(int(size), int(size)) 121\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 122\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 123\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 124\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 125 126\treturn image.NewNineSliceBorder(img, int(tile*4)) 127} 128 129func Mix(a, b color.Color, percent float64) color.Color { 130\trgba := func(c color.Color) (r, g, b, a uint8) { 131\tr16, g16, b16, a16 := c.RGBA() 132\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 133\t} 134\tlerp := func(x, y uint8) uint8 { 135\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 136\t} 137\tr1, g1, b1, a1 := rgba(a) 138\tr2, g2, b2, a2 := rgba(b) 139 140\treturn color.RGBA{ 141\tR: lerp(r1, r2), 142\tG: lerp(g1, g2), 143\tB: lerp(b1, b2), 144\tA: lerp(a1, a2), 145\t} 146} 147 148func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 149\tpath := \u0026vector.Path{} 150 151\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 152\tpath.LineTo(x+w, y+h-br) 153\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 154\tpath.LineTo(x+bl, y+h) 155\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 156\tpath.LineTo(x, y+tl) 157\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 158\tpath.Close() 159 160\treturn path 161} 162 163func main() { 164\tebiten.SetWindowSize(480, 320) 165\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 166\tif err := ebiten.RunGame(NewGame()); err != nil { 167\tpanic(err) 168\t} 169} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tRight: 88, 4\t}), 5\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPadding(widget.Insets{ 41\tRight: 88, 42\t}), 43 44\twidget.ButtonOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionCenter, 47\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 48\t}), 49\twidget.WidgetOpts.MinSize(180, 48), 50\t), 51 52\t) 53 54\troot := widget.NewContainer( 55\twidget.ContainerOpts.BackgroundImage( 56\timage.NewNineSliceColor(colornames.Gainsboro), 57\t), 58\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 59\t) 60\troot.AddChild(button) 61 62\treturn \u0026Game{ 63\tui: \u0026ebitenui.UI{Container: root}, 64\t} 65} 66 67func (g *Game) Update() error { 68\tg.ui.Update() 69\treturn nil 70} 71 72func (g *Game) Draw(screen *ebiten.Image) { 73\tg.ui.Draw(screen) 74} 75 76func (g *Game) Layout(w, h int) (int, int) { 77\treturn w, h 78} 79 80func DefaultFont() text.Face { 81\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 82\tif err != nil { 83\tpanic(err) 84\t} 85\treturn \u0026text.GoTextFace{ 86\tSource: s, 87\tSize: 20, 88\t} 89} 90 91func DefaultNineSlice(base color.Color) *image.NineSlice { 92\tvar size float32 = 64 93\tvar tiles float32 = 16 94\tvar radius float32 = 8 95 96\ttile := size / tiles 97\tfacet := Mix(base, colornames.Gainsboro, 0.2) 98 99\timg := ebiten.NewImage(int(size), int(size)) 100\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 104\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 106 107\treturn image.NewNineSliceBorder(img, int(tile*4)) 108} 109 110func PressedNineSlice(base color.Color) *image.NineSlice { 111\tvar size float32 = 64 112\tvar tiles float32 = 16 113\tvar radius float32 = 8 114 115\ttile := size / tiles 116\tfacet := Mix(base, colornames.Gainsboro, 0.2) 117 118\timg := ebiten.NewImage(int(size), int(size)) 119\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 120\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 121\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 122\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 123 124\treturn image.NewNineSliceBorder(img, int(tile*4)) 125} 126 127func Mix(a, b color.Color, percent float64) color.Color { 128\trgba := func(c color.Color) (r, g, b, a uint8) { 129\tr16, g16, b16, a16 := c.RGBA() 130\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 131\t} 132\tlerp := func(x, y uint8) uint8 { 133\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 134\t} 135\tr1, g1, b1, a1 := rgba(a) 136\tr2, g2, b2, a2 := rgba(b) 137 138\treturn color.RGBA{ 139\tR: lerp(r1, r2), 140\tG: lerp(g1, g2), 141\tB: lerp(b1, b2), 142\tA: lerp(a1, a2), 143\t} 144} 145 146func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 147\tpath := \u0026vector.Path{} 148 149\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 150\tpath.LineTo(x+w, y+h-br) 151\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 152\tpath.LineTo(x+bl, y+h) 153\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 154\tpath.LineTo(x, y+tl) 155\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 156\tpath.Close() 157 158\treturn path 159} 160 161func main() { 162\tebiten.SetWindowSize(480, 320) 163\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 164\tif err := ebiten.RunGame(NewGame()); err != nil { 165\tpanic(err) 166\t} 167} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tTop: 14, 4\t}), 5\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPadding(widget.Insets{ 41\tTop: 14, 42\t}), 43 44\twidget.ButtonOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionCenter, 47\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 48\t}), 49\twidget.WidgetOpts.MinSize(180, 48), 50\t), 51 52\t) 53 54\troot := widget.NewContainer( 55\twidget.ContainerOpts.BackgroundImage( 56\timage.NewNineSliceColor(colornames.Gainsboro), 57\t), 58\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 59\t) 60\troot.AddChild(button) 61 62\treturn \u0026Game{ 63\tui: \u0026ebitenui.UI{Container: root}, 64\t} 65} 66 67func (g *Game) Update() error { 68\tg.ui.Update() 69\treturn nil 70} 71 72func (g *Game) Draw(screen *ebiten.Image) { 73\tg.ui.Draw(screen) 74} 75 76func (g *Game) Layout(w, h int) (int, int) { 77\treturn w, h 78} 79 80func DefaultFont() text.Face { 81\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 82\tif err != nil { 83\tpanic(err) 84\t} 85\treturn \u0026text.GoTextFace{ 86\tSource: s, 87\tSize: 20, 88\t} 89} 90 91func DefaultNineSlice(base color.Color) *image.NineSlice { 92\tvar size float32 = 64 93\tvar tiles float32 = 16 94\tvar radius float32 = 8 95 96\ttile := size / tiles 97\tfacet := Mix(base, colornames.Gainsboro, 0.2) 98 99\timg := ebiten.NewImage(int(size), int(size)) 100\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 104\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 106 107\treturn image.NewNineSliceBorder(img, int(tile*4)) 108} 109 110func PressedNineSlice(base color.Color) *image.NineSlice { 111\tvar size float32 = 64 112\tvar tiles float32 = 16 113\tvar radius float32 = 8 114 115\ttile := size / tiles 116\tfacet := Mix(base, colornames.Gainsboro, 0.2) 117 118\timg := ebiten.NewImage(int(size), int(size)) 119\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 120\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 121\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 122\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 123 124\treturn image.NewNineSliceBorder(img, int(tile*4)) 125} 126 127func Mix(a, b color.Color, percent float64) color.Color { 128\trgba := func(c color.Color) (r, g, b, a uint8) { 129\tr16, g16, b16, a16 := c.RGBA() 130\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 131\t} 132\tlerp := func(x, y uint8) uint8 { 133\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 134\t} 135\tr1, g1, b1, a1 := rgba(a) 136\tr2, g2, b2, a2 := rgba(b) 137 138\treturn color.RGBA{ 139\tR: lerp(r1, r2), 140\tG: lerp(g1, g2), 141\tB: lerp(b1, b2), 142\tA: lerp(a1, a2), 143\t} 144} 145 146func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 147\tpath := \u0026vector.Path{} 148 149\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 150\tpath.LineTo(x+w, y+h-br) 151\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 152\tpath.LineTo(x+bl, y+h) 153\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 154\tpath.LineTo(x, y+tl) 155\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 156\tpath.Close() 157 158\treturn path 159} 160 161func main() { 162\tebiten.SetWindowSize(480, 320) 163\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 164\tif err := ebiten.RunGame(NewGame()); err != nil { 165\tpanic(err) 166\t} 167} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPadding(widget.Insets{ 3\tBottom: 14, 4\t}), 5\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPadding(widget.Insets{ 41\tBottom: 14, 42\t}), 43 44\twidget.ButtonOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 46\tVerticalPosition: widget.AnchorLayoutPositionCenter, 47\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 48\t}), 49\twidget.WidgetOpts.MinSize(180, 48), 50\t), 51 52\t) 53 54\troot := widget.NewContainer( 55\twidget.ContainerOpts.BackgroundImage( 56\timage.NewNineSliceColor(colornames.Gainsboro), 57\t), 58\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 59\t) 60\troot.AddChild(button) 61 62\treturn \u0026Game{ 63\tui: \u0026ebitenui.UI{Container: root}, 64\t} 65} 66 67func (g *Game) Update() error { 68\tg.ui.Update() 69\treturn nil 70} 71 72func (g *Game) Draw(screen *ebiten.Image) { 73\tg.ui.Draw(screen) 74} 75 76func (g *Game) Layout(w, h int) (int, int) { 77\treturn w, h 78} 79 80func DefaultFont() text.Face { 81\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 82\tif err != nil { 83\tpanic(err) 84\t} 85\treturn \u0026text.GoTextFace{ 86\tSource: s, 87\tSize: 20, 88\t} 89} 90 91func DefaultNineSlice(base color.Color) *image.NineSlice { 92\tvar size float32 = 64 93\tvar tiles float32 = 16 94\tvar radius float32 = 8 95 96\ttile := size / tiles 97\tfacet := Mix(base, colornames.Gainsboro, 0.2) 98 99\timg := ebiten.NewImage(int(size), int(size)) 100\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 104\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 106 107\treturn image.NewNineSliceBorder(img, int(tile*4)) 108} 109 110func PressedNineSlice(base color.Color) *image.NineSlice { 111\tvar size float32 = 64 112\tvar tiles float32 = 16 113\tvar radius float32 = 8 114 115\ttile := size / tiles 116\tfacet := Mix(base, colornames.Gainsboro, 0.2) 117 118\timg := ebiten.NewImage(int(size), int(size)) 119\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 120\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 121\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 122\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 123 124\treturn image.NewNineSliceBorder(img, int(tile*4)) 125} 126 127func Mix(a, b color.Color, percent float64) color.Color { 128\trgba := func(c color.Color) (r, g, b, a uint8) { 129\tr16, g16, b16, a16 := c.RGBA() 130\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 131\t} 132\tlerp := func(x, y uint8) uint8 { 133\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 134\t} 135\tr1, g1, b1, a1 := rgba(a) 136\tr2, g2, b2, a2 := rgba(b) 137 138\treturn color.RGBA{ 139\tR: lerp(r1, r2), 140\tG: lerp(g1, g2), 141\tB: lerp(b1, b2), 142\tA: lerp(a1, a2), 143\t} 144} 145 146func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 147\tpath := \u0026vector.Path{} 148 149\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 150\tpath.LineTo(x+w, y+h-br) 151\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 152\tpath.LineTo(x+bl, y+h) 153\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 154\tpath.LineTo(x, y+tl) 155\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 156\tpath.Close() 157 158\treturn path 159} 160 161func main() { 162\tebiten.SetWindowSize(480, 320) 163\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 164\tif err := ebiten.RunGame(NewGame()); err != nil { 165\tpanic(err) 166\t} 167} Text position Responsible for setting text aligment position.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionStart, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionStart, 42\twidget.TextPositionStart, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionStart, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionCenter, 42\twidget.TextPositionStart, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionStart, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionEnd, 42\twidget.TextPositionStart, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionCenter, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionStart, 42\twidget.TextPositionCenter, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionCenter, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionCenter, 42\twidget.TextPositionCenter, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionCenter, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionEnd, 42\twidget.TextPositionCenter, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionStart, 4\twidget.TextPositionEnd, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionStart, 42\twidget.TextPositionEnd, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionCenter, 4\twidget.TextPositionEnd, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 31\t}), 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: DefaultNineSlice(colornames.Darkslategray), 34\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 36\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\t}), 39 40\twidget.ButtonOpts.TextPosition( 41\twidget.TextPositionCenter, 42\twidget.TextPositionEnd, 43\t), 44 45\twidget.ButtonOpts.WidgetOpts( 46\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 47\tVerticalPosition: widget.AnchorLayoutPositionCenter, 48\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 49\t}), 50\twidget.WidgetOpts.MinSize(180, 48), 51\t), 52 53\t) 54 55\troot := widget.NewContainer( 56\twidget.ContainerOpts.BackgroundImage( 57\timage.NewNineSliceColor(colornames.Gainsboro), 58\t), 59\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 60\t) 61\troot.AddChild(button) 62 63\treturn \u0026Game{ 64\tui: \u0026ebitenui.UI{Container: root}, 65\t} 66} 67 68func (g *Game) Update() error { 69\tg.ui.Update() 70\treturn nil 71} 72 73func (g *Game) Draw(screen *ebiten.Image) { 74\tg.ui.Draw(screen) 75} 76 77func (g *Game) Layout(w, h int) (int, int) { 78\treturn w, h 79} 80 81func DefaultFont() text.Face { 82\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 83\tif err != nil { 84\tpanic(err) 85\t} 86\treturn \u0026text.GoTextFace{ 87\tSource: s, 88\tSize: 20, 89\t} 90} 91 92func DefaultNineSlice(base color.Color) *image.NineSlice { 93\tvar size float32 = 64 94\tvar tiles float32 = 16 95\tvar radius float32 = 8 96 97\ttile := size / tiles 98\tfacet := Mix(base, colornames.Gainsboro, 0.2) 99 100\timg := ebiten.NewImage(int(size), int(size)) 101\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 105\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 106\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 107 108\treturn image.NewNineSliceBorder(img, int(tile*4)) 109} 110 111func PressedNineSlice(base color.Color) *image.NineSlice { 112\tvar size float32 = 64 113\tvar tiles float32 = 16 114\tvar radius float32 = 8 115 116\ttile := size / tiles 117\tfacet := Mix(base, colornames.Gainsboro, 0.2) 118 119\timg := ebiten.NewImage(int(size), int(size)) 120\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 122\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 123\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 124 125\treturn image.NewNineSliceBorder(img, int(tile*4)) 126} 127 128func Mix(a, b color.Color, percent float64) color.Color { 129\trgba := func(c color.Color) (r, g, b, a uint8) { 130\tr16, g16, b16, a16 := c.RGBA() 131\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 132\t} 133\tlerp := func(x, y uint8) uint8 { 134\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 135\t} 136\tr1, g1, b1, a1 := rgba(a) 137\tr2, g2, b2, a2 := rgba(b) 138 139\treturn color.RGBA{ 140\tR: lerp(r1, r2), 141\tG: lerp(g1, g2), 142\tB: lerp(b1, b2), 143\tA: lerp(a1, a2), 144\t} 145} 146 147func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 148\tpath := \u0026vector.Path{} 149 150\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 151\tpath.LineTo(x+w, y+h-br) 152\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 153\tpath.LineTo(x+bl, y+h) 154\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 155\tpath.LineTo(x, y+tl) 156\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 157\tpath.Close() 158 159\treturn path 160} 161 162func main() { 163\tebiten.SetWindowSize(480, 320) 164\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 165\tif err := ebiten.RunGame(NewGame()); err != nil { 166\tpanic(err) 167\t} 168} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextPosition( 3\twidget.TextPositionEnd, 4\twidget.TextPositionEnd, 5\t), 6\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextFace(DefaultFont()), 28\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 29\tIdle: colornames.Gainsboro, 30\tHover: colornames.Gainsboro, 31\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 32\t}), 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultNineSlice(colornames.Darkslategray), 35\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 37\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 38\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 39\t}), 40 41\twidget.ButtonOpts.TextPosition( 42\twidget.TextPositionEnd, 43\twidget.TextPositionEnd, 44\t), 45 46\twidget.ButtonOpts.WidgetOpts( 47\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 48\tVerticalPosition: widget.AnchorLayoutPositionCenter, 49\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 50\t}), 51\twidget.WidgetOpts.MinSize(180, 48), 52\t), 53 54\t) 55 56\troot := widget.NewContainer( 57\twidget.ContainerOpts.BackgroundImage( 58\timage.NewNineSliceColor(colornames.Gainsboro), 59\t), 60\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 61\t) 62\troot.AddChild(button) 63 64\treturn \u0026Game{ 65\tui: \u0026ebitenui.UI{Container: root}, 66\t} 67} 68 69func (g *Game) Update() error { 70\tg.ui.Update() 71\treturn nil 72} 73 74func (g *Game) Draw(screen *ebiten.Image) { 75\tg.ui.Draw(screen) 76} 77 78func (g *Game) Layout(w, h int) (int, int) { 79\treturn w, h 80} 81 82func DefaultFont() text.Face { 83\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 84\tif err != nil { 85\tpanic(err) 86\t} 87\treturn \u0026text.GoTextFace{ 88\tSource: s, 89\tSize: 20, 90\t} 91} 92 93func DefaultNineSlice(base color.Color) *image.NineSlice { 94\tvar size float32 = 64 95\tvar tiles float32 = 16 96\tvar radius float32 = 8 97 98\ttile := size / tiles 99\tfacet := Mix(base, colornames.Gainsboro, 0.2) 100 101\timg := ebiten.NewImage(int(size), int(size)) 102\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 104\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 106\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 107\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 108 109\treturn image.NewNineSliceBorder(img, int(tile*4)) 110} 111 112func PressedNineSlice(base color.Color) *image.NineSlice { 113\tvar size float32 = 64 114\tvar tiles float32 = 16 115\tvar radius float32 = 8 116 117\ttile := size / tiles 118\tfacet := Mix(base, colornames.Gainsboro, 0.2) 119 120\timg := ebiten.NewImage(int(size), int(size)) 121\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 122\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 123\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 124\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 125 126\treturn image.NewNineSliceBorder(img, int(tile*4)) 127} 128 129func Mix(a, b color.Color, percent float64) color.Color { 130\trgba := func(c color.Color) (r, g, b, a uint8) { 131\tr16, g16, b16, a16 := c.RGBA() 132\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 133\t} 134\tlerp := func(x, y uint8) uint8 { 135\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 136\t} 137\tr1, g1, b1, a1 := rgba(a) 138\tr2, g2, b2, a2 := rgba(b) 139 140\treturn color.RGBA{ 141\tR: lerp(r1, r2), 142\tG: lerp(g1, g2), 143\tB: lerp(b1, b2), 144\tA: lerp(a1, a2), 145\t} 146} 147 148func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 149\tpath := \u0026vector.Path{} 150 151\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 152\tpath.LineTo(x+w, y+h-br) 153\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 154\tpath.LineTo(x+bl, y+h) 155\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 156\tpath.LineTo(x, y+tl) 157\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 158\tpath.Close() 159 160\treturn path 161} 162 163func main() { 164\tebiten.SetWindowSize(480, 320) 165\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 166\tif err := ebiten.RunGame(NewGame()); err != nil { 167\tpanic(err) 168\t} 169} Text Label Responsible for setting multiline text on a button.\nLabel: Login Signup 1button := widget.NewButton( 2\twidget.ButtonOpts.TextLabel(\"Login\"), 3\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 30\t}), 31\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 32\tIdle: DefaultNineSlice(colornames.Darkslategray), 33\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 34\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 35\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.TextLabel(\"Login\"), 40 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48 49\t) 50 51\troot := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Gainsboro), 54\t), 55\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 56\t) 57\troot.AddChild(button) 58 59\treturn \u0026Game{ 60\tui: \u0026ebitenui.UI{Container: root}, 61\t} 62} 63 64func (g *Game) Update() error { 65\tg.ui.Update() 66\treturn nil 67} 68 69func (g *Game) Draw(screen *ebiten.Image) { 70\tg.ui.Draw(screen) 71} 72 73func (g *Game) Layout(w, h int) (int, int) { 74\treturn w, h 75} 76 77func DefaultFont() text.Face { 78\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 79\tif err != nil { 80\tpanic(err) 81\t} 82\treturn \u0026text.GoTextFace{ 83\tSource: s, 84\tSize: 20, 85\t} 86} 87 88func DefaultNineSlice(base color.Color) *image.NineSlice { 89\tvar size float32 = 64 90\tvar tiles float32 = 16 91\tvar radius float32 = 8 92 93\ttile := size / tiles 94\tfacet := Mix(base, colornames.Gainsboro, 0.2) 95 96\timg := ebiten.NewImage(int(size), int(size)) 97\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 101\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103 104\treturn image.NewNineSliceBorder(img, int(tile*4)) 105} 106 107func PressedNineSlice(base color.Color) *image.NineSlice { 108\tvar size float32 = 64 109\tvar tiles float32 = 16 110\tvar radius float32 = 8 111 112\ttile := size / tiles 113\tfacet := Mix(base, colornames.Gainsboro, 0.2) 114 115\timg := ebiten.NewImage(int(size), int(size)) 116\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 118\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 119\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 120 121\treturn image.NewNineSliceBorder(img, int(tile*4)) 122} 123 124func Mix(a, b color.Color, percent float64) color.Color { 125\trgba := func(c color.Color) (r, g, b, a uint8) { 126\tr16, g16, b16, a16 := c.RGBA() 127\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 128\t} 129\tlerp := func(x, y uint8) uint8 { 130\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 131\t} 132\tr1, g1, b1, a1 := rgba(a) 133\tr2, g2, b2, a2 := rgba(b) 134 135\treturn color.RGBA{ 136\tR: lerp(r1, r2), 137\tG: lerp(g1, g2), 138\tB: lerp(b1, b2), 139\tA: lerp(a1, a2), 140\t} 141} 142 143func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 144\tpath := \u0026vector.Path{} 145 146\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 147\tpath.LineTo(x+w, y+h-br) 148\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 149\tpath.LineTo(x+bl, y+h) 150\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 151\tpath.LineTo(x, y+tl) 152\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 153\tpath.Close() 154 155\treturn path 156} 157 158func main() { 159\tebiten.SetWindowSize(480, 320) 160\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 161\tif err := ebiten.RunGame(NewGame()); err != nil { 162\tpanic(err) 163\t} 164} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextLabel(\"Sign Up Now\\nGet 35% discount\"), 3\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 30\t}), 31\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 32\tIdle: DefaultNineSlice(colornames.Darkslategray), 33\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 34\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 35\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.TextLabel(\"Sign Up Now\\nGet 35% discount\"), 40 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(200, 64), 47\t), 48 49\t) 50 51\troot := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Gainsboro), 54\t), 55\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 56\t) 57\troot.AddChild(button) 58 59\treturn \u0026Game{ 60\tui: \u0026ebitenui.UI{Container: root}, 61\t} 62} 63 64func (g *Game) Update() error { 65\tg.ui.Update() 66\treturn nil 67} 68 69func (g *Game) Draw(screen *ebiten.Image) { 70\tg.ui.Draw(screen) 71} 72 73func (g *Game) Layout(w, h int) (int, int) { 74\treturn w, h 75} 76 77func DefaultFont() text.Face { 78\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 79\tif err != nil { 80\tpanic(err) 81\t} 82\treturn \u0026text.GoTextFace{ 83\tSource: s, 84\tSize: 20, 85\t} 86} 87 88func DefaultNineSlice(base color.Color) *image.NineSlice { 89\tvar size float32 = 64 90\tvar tiles float32 = 16 91\tvar radius float32 = 8 92 93\ttile := size / tiles 94\tfacet := Mix(base, colornames.Gainsboro, 0.2) 95 96\timg := ebiten.NewImage(int(size), int(size)) 97\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 101\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103 104\treturn image.NewNineSliceBorder(img, int(tile*4)) 105} 106 107func PressedNineSlice(base color.Color) *image.NineSlice { 108\tvar size float32 = 64 109\tvar tiles float32 = 16 110\tvar radius float32 = 8 111 112\ttile := size / tiles 113\tfacet := Mix(base, colornames.Gainsboro, 0.2) 114 115\timg := ebiten.NewImage(int(size), int(size)) 116\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 118\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 119\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 120 121\treturn image.NewNineSliceBorder(img, int(tile*4)) 122} 123 124func Mix(a, b color.Color, percent float64) color.Color { 125\trgba := func(c color.Color) (r, g, b, a uint8) { 126\tr16, g16, b16, a16 := c.RGBA() 127\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 128\t} 129\tlerp := func(x, y uint8) uint8 { 130\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 131\t} 132\tr1, g1, b1, a1 := rgba(a) 133\tr2, g2, b2, a2 := rgba(b) 134 135\treturn color.RGBA{ 136\tR: lerp(r1, r2), 137\tG: lerp(g1, g2), 138\tB: lerp(b1, b2), 139\tA: lerp(a1, a2), 140\t} 141} 142 143func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 144\tpath := \u0026vector.Path{} 145 146\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 147\tpath.LineTo(x+w, y+h-br) 148\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 149\tpath.LineTo(x+bl, y+h) 150\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 151\tpath.LineTo(x, y+tl) 152\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 153\tpath.Close() 154 155\treturn path 156} 157 158func main() { 159\tebiten.SetWindowSize(480, 320) 160\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 161\tif err := ebiten.RunGame(NewGame()); err != nil { 162\tpanic(err) 163\t} 164} Text Process BBCode Responsible for processing text with BBCode.\nThe only tag currently supported is [color=#][/color].\nEnabled: True False 1button := widget.NewButton( 2\twidget.ButtonOpts.TextProcessBBCode(true), 3\twidget.ButtonOpts.TextLabel(\"\"+ 4\t\"[color=#FF0000]M[/color]\"+ 5\t\"[color=#E70017]u[/color]\"+ 6\t\"[color=#D0002E]l[/color]\"+ 7\t\"[color=#B90045]t[/color]\"+ 8\t\"[color=#A2005C]i[/color]\"+ 9\t\"[color=#8B0073]p[/color]\"+ 10\t\"[color=#73008B]l[/color]\"+ 11\t\"[color=#5C00A2]a[/color]\"+ 12\t\"[color=#4500B9]y[/color]\"+ 13\t\"[color=#2E00D0]e[/color]\"+ 14\t\"[color=#1700E7]r[/color]\", 15\t), 16\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 30\t}), 31\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 32\tIdle: DefaultNineSlice(colornames.Darkslategray), 33\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 34\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 35\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.TextProcessBBCode(true), 40\twidget.ButtonOpts.TextLabel(\"\"+ 41\t\"[color=#FF0000]M[/color]\"+ 42\t\"[color=#E70017]u[/color]\"+ 43\t\"[color=#D0002E]l[/color]\"+ 44\t\"[color=#B90045]t[/color]\"+ 45\t\"[color=#A2005C]i[/color]\"+ 46\t\"[color=#8B0073]p[/color]\"+ 47\t\"[color=#73008B]l[/color]\"+ 48\t\"[color=#5C00A2]a[/color]\"+ 49\t\"[color=#4500B9]y[/color]\"+ 50\t\"[color=#2E00D0]e[/color]\"+ 51\t\"[color=#1700E7]r[/color]\", 52\t), 53 54\twidget.ButtonOpts.WidgetOpts( 55\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 56\tVerticalPosition: widget.AnchorLayoutPositionCenter, 57\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 58\t}), 59\twidget.WidgetOpts.MinSize(180, 48), 60\t), 61 62\t) 63 64\troot := widget.NewContainer( 65\twidget.ContainerOpts.BackgroundImage( 66\timage.NewNineSliceColor(colornames.Gainsboro), 67\t), 68\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 69\t) 70\troot.AddChild(button) 71\treturn \u0026Game{ 72\tui: \u0026ebitenui.UI{Container: root}, 73\t} 74} 75 76func (g *Game) Update() error { 77\tg.ui.Update() 78\treturn nil 79} 80 81func (g *Game) Draw(screen *ebiten.Image) { 82\tg.ui.Draw(screen) 83} 84 85func (g *Game) Layout(w, h int) (int, int) { 86\treturn w, h 87} 88 89func DefaultFont() text.Face { 90\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 91\tif err != nil { 92\tpanic(err) 93\t} 94\treturn \u0026text.GoTextFace{ 95\tSource: s, 96\tSize: 20, 97\t} 98} 99 100func DefaultNineSlice(base color.Color) *image.NineSlice { 101\tvar size float32 = 64 102\tvar tiles float32 = 16 103\tvar radius float32 = 8 104 105\ttile := size / tiles 106\tfacet := Mix(base, colornames.Gainsboro, 0.2) 107 108\timg := ebiten.NewImage(int(size), int(size)) 109\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 110\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 111\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 112\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 113\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 115 116\treturn image.NewNineSliceBorder(img, int(tile*4)) 117} 118 119func PressedNineSlice(base color.Color) *image.NineSlice { 120\tvar size float32 = 64 121\tvar tiles float32 = 16 122\tvar radius float32 = 8 123 124\ttile := size / tiles 125\tfacet := Mix(base, colornames.Gainsboro, 0.2) 126 127\timg := ebiten.NewImage(int(size), int(size)) 128\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 129\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 130\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 131\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 132 133\treturn image.NewNineSliceBorder(img, int(tile*4)) 134} 135 136func Mix(a, b color.Color, percent float64) color.Color { 137\trgba := func(c color.Color) (r, g, b, a uint8) { 138\tr16, g16, b16, a16 := c.RGBA() 139\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 140\t} 141\tlerp := func(x, y uint8) uint8 { 142\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 143\t} 144\tr1, g1, b1, a1 := rgba(a) 145\tr2, g2, b2, a2 := rgba(b) 146 147\treturn color.RGBA{ 148\tR: lerp(r1, r2), 149\tG: lerp(g1, g2), 150\tB: lerp(b1, b2), 151\tA: lerp(a1, a2), 152\t} 153} 154 155func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 156\tpath := \u0026vector.Path{} 157 158\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 159\tpath.LineTo(x+w, y+h-br) 160\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 161\tpath.LineTo(x+bl, y+h) 162\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 163\tpath.LineTo(x, y+tl) 164\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 165\tpath.Close() 166 167\treturn path 168} 169 170func main() { 171\tebiten.SetWindowSize(480, 320) 172\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 173\tif err := ebiten.RunGame(NewGame()); err != nil { 174\tpanic(err) 175\t} 176} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextProcessBBCode(false), 3\twidget.ButtonOpts.TextLabel(\"[color=#A2005C]Multiplayer[/color]\"), 4\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 30\t}), 31\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 32\tIdle: DefaultNineSlice(colornames.Darkslategray), 33\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 34\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 35\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.TextProcessBBCode(false), 40\twidget.ButtonOpts.TextLabel(\"[color=#A2005C]Multiplayer[/color]\"), 41 42\twidget.ButtonOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 44\tVerticalPosition: widget.AnchorLayoutPositionCenter, 45\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(320, 48), 48\t), 49 50\t) 51 52\troot := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Gainsboro), 55\t), 56\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 57\t) 58\troot.AddChild(button) 59\treturn \u0026Game{ 60\tui: \u0026ebitenui.UI{Container: root}, 61\t} 62} 63 64func (g *Game) Update() error { 65\tg.ui.Update() 66\treturn nil 67} 68 69func (g *Game) Draw(screen *ebiten.Image) { 70\tg.ui.Draw(screen) 71} 72 73func (g *Game) Layout(w, h int) (int, int) { 74\treturn w, h 75} 76 77func DefaultFont() text.Face { 78\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 79\tif err != nil { 80\tpanic(err) 81\t} 82\treturn \u0026text.GoTextFace{ 83\tSource: s, 84\tSize: 20, 85\t} 86} 87 88func DefaultNineSlice(base color.Color) *image.NineSlice { 89\tvar size float32 = 64 90\tvar tiles float32 = 16 91\tvar radius float32 = 8 92 93\ttile := size / tiles 94\tfacet := Mix(base, colornames.Gainsboro, 0.2) 95 96\timg := ebiten.NewImage(int(size), int(size)) 97\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 101\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 103 104\treturn image.NewNineSliceBorder(img, int(tile*4)) 105} 106 107func PressedNineSlice(base color.Color) *image.NineSlice { 108\tvar size float32 = 64 109\tvar tiles float32 = 16 110\tvar radius float32 = 8 111 112\ttile := size / tiles 113\tfacet := Mix(base, colornames.Gainsboro, 0.2) 114 115\timg := ebiten.NewImage(int(size), int(size)) 116\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 118\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 119\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 120 121\treturn image.NewNineSliceBorder(img, int(tile*4)) 122} 123 124func Mix(a, b color.Color, percent float64) color.Color { 125\trgba := func(c color.Color) (r, g, b, a uint8) { 126\tr16, g16, b16, a16 := c.RGBA() 127\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 128\t} 129\tlerp := func(x, y uint8) uint8 { 130\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 131\t} 132\tr1, g1, b1, a1 := rgba(a) 133\tr2, g2, b2, a2 := rgba(b) 134 135\treturn color.RGBA{ 136\tR: lerp(r1, r2), 137\tG: lerp(g1, g2), 138\tB: lerp(b1, b2), 139\tA: lerp(a1, a2), 140\t} 141} 142 143func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 144\tpath := \u0026vector.Path{} 145 146\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 147\tpath.LineTo(x+w, y+h-br) 148\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 149\tpath.LineTo(x+bl, y+h) 150\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 151\tpath.LineTo(x, y+tl) 152\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 153\tpath.Close() 154 155\treturn path 156} 157 158func main() { 159\tebiten.SetWindowSize(480, 320) 160\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 161\tif err := ebiten.RunGame(NewGame()); err != nil { 162\tpanic(err) 163\t} 164} Text Face Responsible for setting the font family and font size.\nFont: Basicfont-13 Inconsolata-16 1button := widget.NewButton( 2\twidget.ButtonOpts.TextFace(text.NewGoXFace(basicfont.Face7x13)), 3\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"math\" 6\t\"github.com/ebitenui/ebitenui\" 7\t\"github.com/ebitenui/ebitenui/image\" 8\t\"github.com/ebitenui/ebitenui/widget\" 9\t\"github.com/hajimehoshi/ebiten/v2\" 10\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/vector\" 12\t\"golang.org/x/image/font/basicfont\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21 22\tbutton := widget.NewButton( 23 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37 38\twidget.ButtonOpts.TextFace(text.NewGoXFace(basicfont.Face7x13)), 39 40\twidget.ButtonOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42\tVerticalPosition: widget.AnchorLayoutPositionCenter, 43\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 44\t}), 45\twidget.WidgetOpts.MinSize(180, 48), 46\t), 47 48\t) 49 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultNineSlice(base color.Color) *image.NineSlice { 77\tvar size float32 = 64 78\tvar tiles float32 = 16 79\tvar radius float32 = 8 80 81\ttile := size / tiles 82\tfacet := Mix(base, colornames.Gainsboro, 0.2) 83 84\timg := ebiten.NewImage(int(size), int(size)) 85\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 86\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 87\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 88\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 89\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 90\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 91 92\treturn image.NewNineSliceBorder(img, int(tile*4)) 93} 94 95func PressedNineSlice(base color.Color) *image.NineSlice { 96\tvar size float32 = 64 97\tvar tiles float32 = 16 98\tvar radius float32 = 8 99 100\ttile := size / tiles 101\tfacet := Mix(base, colornames.Gainsboro, 0.2) 102 103\timg := ebiten.NewImage(int(size), int(size)) 104\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 106\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 107\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 108 109\treturn image.NewNineSliceBorder(img, int(tile*4)) 110} 111 112func Mix(a, b color.Color, percent float64) color.Color { 113\trgba := func(c color.Color) (r, g, b, a uint8) { 114\tr16, g16, b16, a16 := c.RGBA() 115\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 116\t} 117\tlerp := func(x, y uint8) uint8 { 118\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 119\t} 120\tr1, g1, b1, a1 := rgba(a) 121\tr2, g2, b2, a2 := rgba(b) 122 123\treturn color.RGBA{ 124\tR: lerp(r1, r2), 125\tG: lerp(g1, g2), 126\tB: lerp(b1, b2), 127\tA: lerp(a1, a2), 128\t} 129} 130 131func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 132\tpath := \u0026vector.Path{} 133 134\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 135\tpath.LineTo(x+w, y+h-br) 136\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 137\tpath.LineTo(x+bl, y+h) 138\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 139\tpath.LineTo(x, y+tl) 140\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 141\tpath.Close() 142 143\treturn path 144} 145 146func main() { 147\tebiten.SetWindowSize(480, 320) 148\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 149\tif err := ebiten.RunGame(NewGame()); err != nil { 150\tpanic(err) 151\t} 152} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextFace(text.NewGoXFace(inconsolata.Bold8x16)), 3\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"math\" 6\t\"github.com/ebitenui/ebitenui\" 7\t\"github.com/ebitenui/ebitenui/image\" 8\t\"github.com/ebitenui/ebitenui/widget\" 9\t\"github.com/hajimehoshi/ebiten/v2\" 10\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/vector\" 12\t\"golang.org/x/image/font/inconsolata\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21 22\tbutton := widget.NewButton( 23 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 26\tIdle: colornames.Gainsboro, 27\tHover: colornames.Gainsboro, 28\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 29\t}), 30\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 31\tIdle: DefaultNineSlice(colornames.Darkslategray), 32\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 33\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 34\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 35\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37 38\twidget.ButtonOpts.TextFace(text.NewGoXFace(inconsolata.Bold8x16)), 39 40\twidget.ButtonOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 42\tVerticalPosition: widget.AnchorLayoutPositionCenter, 43\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 44\t}), 45\twidget.WidgetOpts.MinSize(180, 48), 46\t), 47 48\t) 49 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultNineSlice(base color.Color) *image.NineSlice { 77\tvar size float32 = 64 78\tvar tiles float32 = 16 79\tvar radius float32 = 8 80 81\ttile := size / tiles 82\tfacet := Mix(base, colornames.Gainsboro, 0.2) 83 84\timg := ebiten.NewImage(int(size), int(size)) 85\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 86\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 87\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 88\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 89\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 90\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 91 92\treturn image.NewNineSliceBorder(img, int(tile*4)) 93} 94 95func PressedNineSlice(base color.Color) *image.NineSlice { 96\tvar size float32 = 64 97\tvar tiles float32 = 16 98\tvar radius float32 = 8 99 100\ttile := size / tiles 101\tfacet := Mix(base, colornames.Gainsboro, 0.2) 102 103\timg := ebiten.NewImage(int(size), int(size)) 104\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 105\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 106\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 107\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 108 109\treturn image.NewNineSliceBorder(img, int(tile*4)) 110} 111 112func Mix(a, b color.Color, percent float64) color.Color { 113\trgba := func(c color.Color) (r, g, b, a uint8) { 114\tr16, g16, b16, a16 := c.RGBA() 115\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 116\t} 117\tlerp := func(x, y uint8) uint8 { 118\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 119\t} 120\tr1, g1, b1, a1 := rgba(a) 121\tr2, g2, b2, a2 := rgba(b) 122 123\treturn color.RGBA{ 124\tR: lerp(r1, r2), 125\tG: lerp(g1, g2), 126\tB: lerp(b1, b2), 127\tA: lerp(a1, a2), 128\t} 129} 130 131func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 132\tpath := \u0026vector.Path{} 133 134\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 135\tpath.LineTo(x+w, y+h-br) 136\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 137\tpath.LineTo(x+bl, y+h) 138\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 139\tpath.LineTo(x, y+tl) 140\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 141\tpath.Close() 142 143\treturn path 144} 145 146func main() { 147\tebiten.SetWindowSize(480, 320) 148\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 149\tif err := ebiten.RunGame(NewGame()); err != nil { 150\tpanic(err) 151\t} 152} Text Color Responsible for setting the text color.\nColor: Idle Hover Pressed 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 28\tIdle: DefaultNineSlice(colornames.Darkslategray), 29\tHover: DefaultNineSlice(colornames.Darkslategray), 30\tDisabled: DefaultNineSlice(colornames.Darkslategray), 31\tPressed: DefaultNineSlice(colornames.Darkslategray), 32\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 33\t}), 34 35\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 36\tIdle: colornames.Goldenrod, 37\tHover: colornames.Indianred, 38\tPressed: colornames.Steelblue, 39\t}), 40 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48 49\t) 50 51\troot := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Gainsboro), 54\t), 55\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 56\t) 57\troot.AddChild(button) 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultFont() text.Face { 77\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 78\tif err != nil { 79\tpanic(err) 80\t} 81\treturn \u0026text.GoTextFace{ 82\tSource: s, 83\tSize: 20, 84\t} 85} 86 87func DefaultNineSlice(base color.Color) *image.NineSlice { 88\tvar size float32 = 64 89\tvar tiles float32 = 16 90\tvar radius float32 = 8 91 92\ttile := size / tiles 93\tfacet := Mix(base, colornames.Gainsboro, 0.2) 94 95\timg := ebiten.NewImage(int(size), int(size)) 96\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func Mix(a, b color.Color, percent float64) color.Color { 107\trgba := func(c color.Color) (r, g, b, a uint8) { 108\tr16, g16, b16, a16 := c.RGBA() 109\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 110\t} 111\tlerp := func(x, y uint8) uint8 { 112\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 113\t} 114\tr1, g1, b1, a1 := rgba(a) 115\tr2, g2, b2, a2 := rgba(b) 116 117\treturn color.RGBA{ 118\tR: lerp(r1, r2), 119\tG: lerp(g1, g2), 120\tB: lerp(b1, b2), 121\tA: lerp(a1, a2), 122\t} 123} 124 125func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 126\tpath := \u0026vector.Path{} 127 128\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 129\tpath.LineTo(x+w, y+h-br) 130\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 131\tpath.LineTo(x+bl, y+h) 132\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 133\tpath.LineTo(x, y+tl) 134\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 135\tpath.Close() 136 137\treturn path 138} 139 140func main() { 141\tebiten.SetWindowSize(480, 320) 142\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 143\tif err := ebiten.RunGame(NewGame()); err != nil { 144\tpanic(err) 145\t} 146} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 28\tIdle: DefaultNineSlice(colornames.Darkslategray), 29\tHover: DefaultNineSlice(colornames.Darkslategray), 30\tDisabled: DefaultNineSlice(colornames.Darkslategray), 31\tPressed: DefaultNineSlice(colornames.Darkslategray), 32\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 33\t}), 34 35\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 36\tIdle: colornames.Goldenrod, 37\tHover: colornames.Indianred, 38\tPressed: colornames.Steelblue, 39\t}), 40 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48 49\t) 50 51\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 52\troot := widget.NewContainer( 53\twidget.ContainerOpts.BackgroundImage( 54\timage.NewNineSliceColor(colornames.Gainsboro), 55\t), 56\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 57\t) 58\troot.AddChild(button) 59 60\treturn \u0026Game{ 61\tui: \u0026ebitenui.UI{Container: root}, 62\t} 63} 64 65func (g *Game) Update() error { 66\tg.ui.Update() 67\treturn nil 68} 69 70func (g *Game) Draw(screen *ebiten.Image) { 71\tg.ui.Draw(screen) 72} 73 74func (g *Game) Layout(w, h int) (int, int) { 75\treturn w, h 76} 77 78func DefaultFont() text.Face { 79\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 80\tif err != nil { 81\tpanic(err) 82\t} 83\treturn \u0026text.GoTextFace{ 84\tSource: s, 85\tSize: 20, 86\t} 87} 88 89func DefaultNineSlice(base color.Color) *image.NineSlice { 90\tvar size float32 = 64 91\tvar tiles float32 = 16 92\tvar radius float32 = 8 93 94\ttile := size / tiles 95\tfacet := Mix(base, colornames.Gainsboro, 0.2) 96 97\timg := ebiten.NewImage(int(size), int(size)) 98\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 102\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 103\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 104 105\treturn image.NewNineSliceBorder(img, int(tile*4)) 106} 107 108func PressedNineSlice(base color.Color) *image.NineSlice { 109\tvar size float32 = 64 110\tvar tiles float32 = 16 111\tvar radius float32 = 8 112 113\ttile := size / tiles 114\tfacet := Mix(base, colornames.Gainsboro, 0.2) 115 116\timg := ebiten.NewImage(int(size), int(size)) 117\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 118\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 119\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 120\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 121 122\treturn image.NewNineSliceBorder(img, int(tile*4)) 123} 124 125func Mix(a, b color.Color, percent float64) color.Color { 126\trgba := func(c color.Color) (r, g, b, a uint8) { 127\tr16, g16, b16, a16 := c.RGBA() 128\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 129\t} 130\tlerp := func(x, y uint8) uint8 { 131\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 132\t} 133\tr1, g1, b1, a1 := rgba(a) 134\tr2, g2, b2, a2 := rgba(b) 135 136\treturn color.RGBA{ 137\tR: lerp(r1, r2), 138\tG: lerp(g1, g2), 139\tB: lerp(b1, b2), 140\tA: lerp(a1, a2), 141\t} 142} 143 144func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 145\tpath := \u0026vector.Path{} 146 147\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 148\tpath.LineTo(x+w, y+h-br) 149\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 150\tpath.LineTo(x+bl, y+h) 151\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 152\tpath.LineTo(x, y+tl) 153\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 154\tpath.Close() 155 156\treturn path 157} 158 159func main() { 160\tebiten.SetWindowSize(480, 320) 161\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 162\tif err := ebiten.RunGame(NewGame()); err != nil { 163\tpanic(err) 164\t} 165} 1button := widget.NewButton( 2\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 3\tIdle: colornames.Goldenrod, 4\tHover: colornames.Indianred, 5\tPressed: colornames.Steelblue, 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 28\tIdle: DefaultNineSlice(colornames.Darkslategray), 29\tHover: DefaultNineSlice(colornames.Darkslategray), 30\tDisabled: DefaultNineSlice(colornames.Darkslategray), 31\tPressed: DefaultNineSlice(colornames.Darkslategray), 32\tPressedHover: DefaultNineSlice(colornames.Darkslategray), 33\t}), 34 35\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 36\tIdle: colornames.Goldenrod, 37\tHover: colornames.Indianred, 38\tPressed: colornames.Steelblue, 39\t}), 40 41\twidget.ButtonOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 43\tVerticalPosition: widget.AnchorLayoutPositionCenter, 44\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 45\t}), 46\twidget.WidgetOpts.MinSize(180, 48), 47\t), 48 49\t) 50 51\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 52\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 53\troot := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Gainsboro), 56\t), 57\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 58\t) 59\troot.AddChild(button) 60 61\treturn \u0026Game{ 62\tui: \u0026ebitenui.UI{Container: root}, 63\t} 64} 65 66func (g *Game) Update() error { 67\tg.ui.Update() 68\treturn nil 69} 70 71func (g *Game) Draw(screen *ebiten.Image) { 72\tg.ui.Draw(screen) 73} 74 75func (g *Game) Layout(w, h int) (int, int) { 76\treturn w, h 77} 78 79func DefaultFont() text.Face { 80\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 81\tif err != nil { 82\tpanic(err) 83\t} 84\treturn \u0026text.GoTextFace{ 85\tSource: s, 86\tSize: 20, 87\t} 88} 89 90func DefaultNineSlice(base color.Color) *image.NineSlice { 91\tvar size float32 = 64 92\tvar tiles float32 = 16 93\tvar radius float32 = 8 94 95\ttile := size / tiles 96\tfacet := Mix(base, colornames.Gainsboro, 0.2) 97 98\timg := ebiten.NewImage(int(size), int(size)) 99\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 102\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 103\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 104\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 105 106\treturn image.NewNineSliceBorder(img, int(tile*4)) 107} 108 109func PressedNineSlice(base color.Color) *image.NineSlice { 110\tvar size float32 = 64 111\tvar tiles float32 = 16 112\tvar radius float32 = 8 113 114\ttile := size / tiles 115\tfacet := Mix(base, colornames.Gainsboro, 0.2) 116 117\timg := ebiten.NewImage(int(size), int(size)) 118\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 119\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 120\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 121\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 122 123\treturn image.NewNineSliceBorder(img, int(tile*4)) 124} 125 126func Mix(a, b color.Color, percent float64) color.Color { 127\trgba := func(c color.Color) (r, g, b, a uint8) { 128\tr16, g16, b16, a16 := c.RGBA() 129\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 130\t} 131\tlerp := func(x, y uint8) uint8 { 132\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 133\t} 134\tr1, g1, b1, a1 := rgba(a) 135\tr2, g2, b2, a2 := rgba(b) 136 137\treturn color.RGBA{ 138\tR: lerp(r1, r2), 139\tG: lerp(g1, g2), 140\tB: lerp(b1, b2), 141\tA: lerp(a1, a2), 142\t} 143} 144 145func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 146\tpath := \u0026vector.Path{} 147 148\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 149\tpath.LineTo(x+w, y+h-br) 150\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 151\tpath.LineTo(x+bl, y+h) 152\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 153\tpath.LineTo(x, y+tl) 154\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 155\tpath.Close() 156 157\treturn path 158} 159 160func main() { 161\tebiten.SetWindowSize(480, 320) 162\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 163\tif err := ebiten.RunGame(NewGame()); err != nil { 164\tpanic(err) 165\t} 166} Image Responsible for the background of the button; it can be filled with color or image tiles.\nImage: PillxIdle PillxHover PillxPressed GemxIdle GemxHover GemxPressed ColxIdle ColxHover ColxPressed 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultPill(colornames.Darkslategray), 35\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func DefaultPill(base color.Color) *image.NineSlice { 86\tvar size float32 = 64 87\tvar tiles float32 = 16 88\tvar radius float32 = 8 89 90\ttile := size / tiles 91\tfacet := Mix(base, colornames.Gainsboro, 0.2) 92 93\timg := ebiten.NewImage(int(size), int(size)) 94\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 95\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 96\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 100 101\treturn image.NewNineSliceBorder(img, int(tile*4)) 102} 103 104func PressedPill(base color.Color) *image.NineSlice { 105\tvar size float32 = 64 106\tvar tiles float32 = 16 107\tvar radius float32 = 8 108 109\ttile := size / tiles 110\tfacet := Mix(base, colornames.Gainsboro, 0.2) 111 112\timg := ebiten.NewImage(int(size), int(size)) 113\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 115\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 117 118\treturn image.NewNineSliceBorder(img, int(tile*4)) 119} 120 121func Mix(a, b color.Color, percent float64) color.Color { 122\trgba := func(c color.Color) (r, g, b, a uint8) { 123\tr16, g16, b16, a16 := c.RGBA() 124\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 125\t} 126\tlerp := func(x, y uint8) uint8 { 127\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 128\t} 129\tr1, g1, b1, a1 := rgba(a) 130\tr2, g2, b2, a2 := rgba(b) 131 132\treturn color.RGBA{ 133\tR: lerp(r1, r2), 134\tG: lerp(g1, g2), 135\tB: lerp(b1, b2), 136\tA: lerp(a1, a2), 137\t} 138} 139 140func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 141\tpath := \u0026vector.Path{} 142 143\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 144\tpath.LineTo(x+w, y+h-br) 145\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 146\tpath.LineTo(x+bl, y+h) 147\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 148\tpath.LineTo(x, y+tl) 149\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 150\tpath.Close() 151 152\treturn path 153} 154 155func main() { 156\tebiten.SetWindowSize(480, 320) 157\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 158\tif err := ebiten.RunGame(NewGame()); err != nil { 159\tpanic(err) 160\t} 161} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultPill(colornames.Darkslategray), 35\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultPill(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar radius float32 = 8 90 91\ttile := size / tiles 92\tfacet := Mix(base, colornames.Gainsboro, 0.2) 93 94\timg := ebiten.NewImage(int(size), int(size)) 95\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 96\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 97\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 98\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 99\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 100\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 101 102\treturn image.NewNineSliceBorder(img, int(tile*4)) 103} 104 105func PressedPill(base color.Color) *image.NineSlice { 106\tvar size float32 = 64 107\tvar tiles float32 = 16 108\tvar radius float32 = 8 109 110\ttile := size / tiles 111\tfacet := Mix(base, colornames.Gainsboro, 0.2) 112 113\timg := ebiten.NewImage(int(size), int(size)) 114\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 115\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 116\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 117\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 142\tpath := \u0026vector.Path{} 143 144\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 145\tpath.LineTo(x+w, y+h-br) 146\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 147\tpath.LineTo(x+bl, y+h) 148\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 149\tpath.LineTo(x, y+tl) 150\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 151\tpath.Close() 152 153\treturn path 154} 155 156func main() { 157\tebiten.SetWindowSize(480, 320) 158\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 159\tif err := ebiten.RunGame(NewGame()); err != nil { 160\tpanic(err) 161\t} 162} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultPill(colornames.Darkslategray), 4\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultPill(colornames.Darkslategray), 35\tHover: DefaultPill(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: PressedPill(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 50\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 51\troot := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Gainsboro), 54\t), 55\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 56\t) 57\troot.AddChild(button) 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultFont() text.Face { 77\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 78\tif err != nil { 79\tpanic(err) 80\t} 81\treturn \u0026text.GoTextFace{ 82\tSource: s, 83\tSize: 20, 84\t} 85} 86 87func DefaultPill(base color.Color) *image.NineSlice { 88\tvar size float32 = 64 89\tvar tiles float32 = 16 90\tvar radius float32 = 8 91 92\ttile := size / tiles 93\tfacet := Mix(base, colornames.Gainsboro, 0.2) 94 95\timg := ebiten.NewImage(int(size), int(size)) 96\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 97\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 98\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 99\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 100\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 101\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 102 103\treturn image.NewNineSliceBorder(img, int(tile*4)) 104} 105 106func PressedPill(base color.Color) *image.NineSlice { 107\tvar size float32 = 64 108\tvar tiles float32 = 16 109\tvar radius float32 = 8 110 111\ttile := size / tiles 112\tfacet := Mix(base, colornames.Gainsboro, 0.2) 113 114\timg := ebiten.NewImage(int(size), int(size)) 115\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 116\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 117\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 118\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 119 120\treturn image.NewNineSliceBorder(img, int(tile*4)) 121} 122 123func Mix(a, b color.Color, percent float64) color.Color { 124\trgba := func(c color.Color) (r, g, b, a uint8) { 125\tr16, g16, b16, a16 := c.RGBA() 126\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 127\t} 128\tlerp := func(x, y uint8) uint8 { 129\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 130\t} 131\tr1, g1, b1, a1 := rgba(a) 132\tr2, g2, b2, a2 := rgba(b) 133 134\treturn color.RGBA{ 135\tR: lerp(r1, r2), 136\tG: lerp(g1, g2), 137\tB: lerp(b1, b2), 138\tA: lerp(a1, a2), 139\t} 140} 141 142func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 143\tpath := \u0026vector.Path{} 144 145\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 146\tpath.LineTo(x+w, y+h-br) 147\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 148\tpath.LineTo(x+bl, y+h) 149\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 150\tpath.LineTo(x, y+tl) 151\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 152\tpath.Close() 153 154\treturn path 155} 156 157func main() { 158\tebiten.SetWindowSize(480, 320) 159\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 160\tif err := ebiten.RunGame(NewGame()); err != nil { 161\tpanic(err) 162\t} 163} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultGem(colornames.Darkslategray), 35\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func DefaultGem(base color.Color) *image.NineSlice { 86\tvar size float32 = 64 87\tvar tiles float32 = 16 88\tvar padding float32 = 4 89 90\ttile := (size - padding*2) / tiles 91\tfore := Mix(base, colornames.Gainsboro, 0.4) 92\tback := Mix(base, colornames.Black, 0.4) 93\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 94 95\timg := ebiten.NewImage(int(size), int(size)) 96\ttop := func(path *vector.Path) { 97\tpath.MoveTo(padding, padding+size-tile*2) 98\tpath.LineTo(padding, padding+tile*2) 99\tpath.LineTo(padding+tile*2, padding) 100\tpath.LineTo(padding+size-tile*2, padding) 101\t} 102\tbottom := func(path *vector.Path) { 103\tpath.MoveTo(padding+size-tile*2, padding) 104\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 105\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 106\tpath.LineTo(padding, padding+size-tile*2) 107\t} 108\tpath := \u0026vector.Path{} 109\ttop(path) 110\tbottom(path) 111\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 112\tpath.Reset() 113\ttop(path) 114\tvector.StrokePath(img, path, fore, true, stroke) 115\tpath.Reset() 116\tbottom(path) 117\tvector.StrokePath(img, path, back, true, stroke) 118 119\treturn image.NewNineSliceBorder(img, int(tile*4)) 120} 121 122func Mix(a, b color.Color, percent float64) color.Color { 123\trgba := func(c color.Color) (r, g, b, a uint8) { 124\tr16, g16, b16, a16 := c.RGBA() 125\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 126\t} 127\tlerp := func(x, y uint8) uint8 { 128\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 129\t} 130\tr1, g1, b1, a1 := rgba(a) 131\tr2, g2, b2, a2 := rgba(b) 132 133\treturn color.RGBA{ 134\tR: lerp(r1, r2), 135\tG: lerp(g1, g2), 136\tB: lerp(b1, b2), 137\tA: lerp(a1, a2), 138\t} 139} 140 141func main() { 142\tebiten.SetWindowSize(480, 320) 143\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 144\tif err := ebiten.RunGame(NewGame()); err != nil { 145\tpanic(err) 146\t} 147} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultGem(colornames.Darkslategray), 35\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func DefaultGem(base color.Color) *image.NineSlice { 87\tvar size float32 = 64 88\tvar tiles float32 = 16 89\tvar padding float32 = 4 90 91\ttile := (size - padding*2) / tiles 92\tfore := Mix(base, colornames.Gainsboro, 0.4) 93\tback := Mix(base, colornames.Black, 0.4) 94\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 95 96\timg := ebiten.NewImage(int(size), int(size)) 97\ttop := func(path *vector.Path) { 98\tpath.MoveTo(padding, padding+size-tile*2) 99\tpath.LineTo(padding, padding+tile*2) 100\tpath.LineTo(padding+tile*2, padding) 101\tpath.LineTo(padding+size-tile*2, padding) 102\t} 103\tbottom := func(path *vector.Path) { 104\tpath.MoveTo(padding+size-tile*2, padding) 105\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 106\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 107\tpath.LineTo(padding, padding+size-tile*2) 108\t} 109\tpath := \u0026vector.Path{} 110\ttop(path) 111\tbottom(path) 112\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 113\tpath.Reset() 114\ttop(path) 115\tvector.StrokePath(img, path, fore, true, stroke) 116\tpath.Reset() 117\tbottom(path) 118\tvector.StrokePath(img, path, back, true, stroke) 119 120\treturn image.NewNineSliceBorder(img, int(tile*4)) 121} 122 123func Mix(a, b color.Color, percent float64) color.Color { 124\trgba := func(c color.Color) (r, g, b, a uint8) { 125\tr16, g16, b16, a16 := c.RGBA() 126\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 127\t} 128\tlerp := func(x, y uint8) uint8 { 129\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 130\t} 131\tr1, g1, b1, a1 := rgba(a) 132\tr2, g2, b2, a2 := rgba(b) 133 134\treturn color.RGBA{ 135\tR: lerp(r1, r2), 136\tG: lerp(g1, g2), 137\tB: lerp(b1, b2), 138\tA: lerp(a1, a2), 139\t} 140} 141 142func main() { 143\tebiten.SetWindowSize(480, 320) 144\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 145\tif err := ebiten.RunGame(NewGame()); err != nil { 146\tpanic(err) 147\t} 148} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: DefaultGem(colornames.Darkslategray), 4\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"github.com/hajimehoshi/ebiten/v2/vector\" 13\t\"golang.org/x/image/font/gofont/goregular\" 14\t\"golang.org/x/image/colornames\" 15) 16 17type Game struct { 18\tui *ebitenui.UI 19} 20 21func NewGame() *Game { 22 23\tbutton := widget.NewButton( 24 25\twidget.ButtonOpts.TextLabel(\"Button\"), 26\twidget.ButtonOpts.TextFace(DefaultFont()), 27\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 28\tIdle: colornames.Gainsboro, 29\tHover: colornames.Gainsboro, 30\tPressed: colornames.Gainsboro, 31\t}), 32 33\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 34\tIdle: DefaultGem(colornames.Darkslategray), 35\tHover: DefaultGem(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 36\tPressed: DefaultGem(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 37\t}), 38 39\twidget.ButtonOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 41\tVerticalPosition: widget.AnchorLayoutPositionCenter, 42\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 43\t}), 44\twidget.WidgetOpts.MinSize(180, 48), 45\t), 46 47\t) 48 49\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 50\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 51\troot := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Gainsboro), 54\t), 55\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 56\t) 57\troot.AddChild(button) 58\treturn \u0026Game{ 59\tui: \u0026ebitenui.UI{Container: root}, 60\t} 61} 62 63func (g *Game) Update() error { 64\tg.ui.Update() 65\treturn nil 66} 67 68func (g *Game) Draw(screen *ebiten.Image) { 69\tg.ui.Draw(screen) 70} 71 72func (g *Game) Layout(w, h int) (int, int) { 73\treturn w, h 74} 75 76func DefaultFont() text.Face { 77\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 78\tif err != nil { 79\tpanic(err) 80\t} 81\treturn \u0026text.GoTextFace{ 82\tSource: s, 83\tSize: 20, 84\t} 85} 86 87func DefaultGem(base color.Color) *image.NineSlice { 88\tvar size float32 = 64 89\tvar tiles float32 = 16 90\tvar padding float32 = 4 91 92\ttile := (size - padding*2) / tiles 93\tfore := Mix(base, colornames.Gainsboro, 0.4) 94\tback := Mix(base, colornames.Black, 0.4) 95\tstroke := \u0026vector.StrokeOptions{Width: 4, LineCap: vector.LineCapRound} 96 97\timg := ebiten.NewImage(int(size), int(size)) 98\ttop := func(path *vector.Path) { 99\tpath.MoveTo(padding, padding+size-tile*2) 100\tpath.LineTo(padding, padding+tile*2) 101\tpath.LineTo(padding+tile*2, padding) 102\tpath.LineTo(padding+size-tile*2, padding) 103\t} 104\tbottom := func(path *vector.Path) { 105\tpath.MoveTo(padding+size-tile*2, padding) 106\tpath.LineTo(padding+size-tile*2, padding+size-tile*4) 107\tpath.LineTo(padding+size-tile*4, padding+size-tile*2) 108\tpath.LineTo(padding, padding+size-tile*2) 109\t} 110\tpath := \u0026vector.Path{} 111\ttop(path) 112\tbottom(path) 113\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 114\tpath.Reset() 115\ttop(path) 116\tvector.StrokePath(img, path, fore, true, stroke) 117\tpath.Reset() 118\tbottom(path) 119\tvector.StrokePath(img, path, back, true, stroke) 120 121\treturn image.NewNineSliceBorder(img, int(tile*4)) 122} 123 124func Mix(a, b color.Color, percent float64) color.Color { 125\trgba := func(c color.Color) (r, g, b, a uint8) { 126\tr16, g16, b16, a16 := c.RGBA() 127\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 128\t} 129\tlerp := func(x, y uint8) uint8 { 130\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 131\t} 132\tr1, g1, b1, a1 := rgba(a) 133\tr2, g2, b2, a2 := rgba(b) 134 135\treturn color.RGBA{ 136\tR: lerp(r1, r2), 137\tG: lerp(g1, g2), 138\tB: lerp(b1, b2), 139\tA: lerp(a1, a2), 140\t} 141} 142 143func main() { 144\tebiten.SetWindowSize(480, 320) 145\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 146\tif err := ebiten.RunGame(NewGame()); err != nil { 147\tpanic(err) 148\t} 149} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21 22\tbutton := widget.NewButton( 23 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: colornames.Gainsboro, 30\t}), 31 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 34\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37 38\twidget.ButtonOpts.WidgetOpts( 39\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 40\tVerticalPosition: widget.AnchorLayoutPositionCenter, 41\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 42\t}), 43\twidget.WidgetOpts.MinSize(180, 48), 44\t), 45 46\t) 47 48\troot := widget.NewContainer( 49\twidget.ContainerOpts.BackgroundImage( 50\timage.NewNineSliceColor(colornames.Gainsboro), 51\t), 52\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 53\t) 54\troot.AddChild(button) 55\treturn \u0026Game{ 56\tui: \u0026ebitenui.UI{Container: root}, 57\t} 58} 59 60func (g *Game) Update() error { 61\tg.ui.Update() 62\treturn nil 63} 64 65func (g *Game) Draw(screen *ebiten.Image) { 66\tg.ui.Draw(screen) 67} 68 69func (g *Game) Layout(w, h int) (int, int) { 70\treturn w, h 71} 72 73func DefaultFont() text.Face { 74\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 75\tif err != nil { 76\tpanic(err) 77\t} 78\treturn \u0026text.GoTextFace{ 79\tSource: s, 80\tSize: 20, 81\t} 82} 83 84func Mix(a, b color.Color, percent float64) color.Color { 85\trgba := func(c color.Color) (r, g, b, a uint8) { 86\tr16, g16, b16, a16 := c.RGBA() 87\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 88\t} 89\tlerp := func(x, y uint8) uint8 { 90\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 91\t} 92\tr1, g1, b1, a1 := rgba(a) 93\tr2, g2, b2, a2 := rgba(b) 94 95\treturn color.RGBA{ 96\tR: lerp(r1, r2), 97\tG: lerp(g1, g2), 98\tB: lerp(b1, b2), 99\tA: lerp(a1, a2), 100\t} 101} 102 103func main() { 104\tebiten.SetWindowSize(480, 320) 105\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 106\tif err := ebiten.RunGame(NewGame()); err != nil { 107\tpanic(err) 108\t} 109} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21 22\tbutton := widget.NewButton( 23 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: colornames.Gainsboro, 30\t}), 31 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 34\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37 38\twidget.ButtonOpts.WidgetOpts( 39\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 40\tVerticalPosition: widget.AnchorLayoutPositionCenter, 41\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 42\t}), 43\twidget.WidgetOpts.MinSize(180, 48), 44\t), 45 46\t) 47 48\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 49\troot := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Gainsboro), 52\t), 53\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 54\t) 55\troot.AddChild(button) 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func DefaultFont() text.Face { 75\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 76\tif err != nil { 77\tpanic(err) 78\t} 79\treturn \u0026text.GoTextFace{ 80\tSource: s, 81\tSize: 20, 82\t} 83} 84 85func Mix(a, b color.Color, percent float64) color.Color { 86\trgba := func(c color.Color) (r, g, b, a uint8) { 87\tr16, g16, b16, a16 := c.RGBA() 88\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 89\t} 90\tlerp := func(x, y uint8) uint8 { 91\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 92\t} 93\tr1, g1, b1, a1 := rgba(a) 94\tr2, g2, b2, a2 := rgba(b) 95 96\treturn color.RGBA{ 97\tR: lerp(r1, r2), 98\tG: lerp(g1, g2), 99\tB: lerp(b1, b2), 100\tA: lerp(a1, a2), 101\t} 102} 103 104func main() { 105\tebiten.SetWindowSize(480, 320) 106\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 107\tif err := ebiten.RunGame(NewGame()); err != nil { 108\tpanic(err) 109\t} 110} 1button := widget.NewButton( 2\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 3\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 4\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 5\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 6\t}), 7\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"image/color\" 6\t\"math\" 7\t\"github.com/ebitenui/ebitenui\" 8\t\"github.com/ebitenui/ebitenui/image\" 9\t\"github.com/ebitenui/ebitenui/widget\" 10\t\"github.com/hajimehoshi/ebiten/v2\" 11\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 12\t\"golang.org/x/image/font/gofont/goregular\" 13\t\"golang.org/x/image/colornames\" 14) 15 16type Game struct { 17\tui *ebitenui.UI 18} 19 20func NewGame() *Game { 21 22\tbutton := widget.NewButton( 23 24\twidget.ButtonOpts.TextLabel(\"Button\"), 25\twidget.ButtonOpts.TextFace(DefaultFont()), 26\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 27\tIdle: colornames.Gainsboro, 28\tHover: colornames.Gainsboro, 29\tPressed: colornames.Gainsboro, 30\t}), 31 32\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 33\tIdle: image.NewNineSliceColor(colornames.Darkslategray), 34\tHover: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 35\tPressed: image.NewNineSliceColor(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 36\t}), 37 38\twidget.ButtonOpts.WidgetOpts( 39\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 40\tVerticalPosition: widget.AnchorLayoutPositionCenter, 41\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 42\t}), 43\twidget.WidgetOpts.MinSize(180, 48), 44\t), 45 46\t) 47 48\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 49\tbutton.GetWidget().MouseButtonPressedEvent.Fire(\u0026widget.WidgetMouseButtonPressedEventArgs{}) 50\troot := widget.NewContainer( 51\twidget.ContainerOpts.BackgroundImage( 52\timage.NewNineSliceColor(colornames.Gainsboro), 53\t), 54\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 55\t) 56\troot.AddChild(button) 57\treturn \u0026Game{ 58\tui: \u0026ebitenui.UI{Container: root}, 59\t} 60} 61 62func (g *Game) Update() error { 63\tg.ui.Update() 64\treturn nil 65} 66 67func (g *Game) Draw(screen *ebiten.Image) { 68\tg.ui.Draw(screen) 69} 70 71func (g *Game) Layout(w, h int) (int, int) { 72\treturn w, h 73} 74 75func DefaultFont() text.Face { 76\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 77\tif err != nil { 78\tpanic(err) 79\t} 80\treturn \u0026text.GoTextFace{ 81\tSource: s, 82\tSize: 20, 83\t} 84} 85 86func Mix(a, b color.Color, percent float64) color.Color { 87\trgba := func(c color.Color) (r, g, b, a uint8) { 88\tr16, g16, b16, a16 := c.RGBA() 89\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 90\t} 91\tlerp := func(x, y uint8) uint8 { 92\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 93\t} 94\tr1, g1, b1, a1 := rgba(a) 95\tr2, g2, b2, a2 := rgba(b) 96 97\treturn color.RGBA{ 98\tR: lerp(r1, r2), 99\tG: lerp(g1, g2), 100\tB: lerp(b1, b2), 101\tA: lerp(a1, a2), 102\t} 103} 104 105func main() { 106\tebiten.SetWindowSize(480, 320) 107\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 108\tif err := ebiten.RunGame(NewGame()); err != nil { 109\tpanic(err) 110\t} 111} Ignore Transparent Pixels Responsible for ignoring transparent pixels when the button is clicked.\nEnabled: True False 1button := widget.NewButton( 2\twidget.ButtonOpts.IgnoreTransparentPixels(true), 3\twidget.ButtonOpts.CursorEnteredHandler( 4\tfunc(args *widget.ButtonHoverEventArgs) { 5\tvar b strings.Builder 6\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 7\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8\tfmt.Print(b.String()) 9\t}, 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"fmt\" 6\t\"image/color\" 7\t\"math\" 8\t\"strings\" 9\t\"github.com/ebitenui/ebitenui\" 10\t\"github.com/ebitenui/ebitenui/image\" 11\t\"github.com/ebitenui/ebitenui/widget\" 12\t\"github.com/hajimehoshi/ebiten/v2\" 13\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 14\t\"github.com/hajimehoshi/ebiten/v2/vector\" 15\t\"golang.org/x/image/font/gofont/goregular\" 16\t\"golang.org/x/image/colornames\" 17) 18 19type Game struct { 20\tui *ebitenui.UI 21} 22 23func NewGame() *Game { 24 25\tbutton := widget.NewButton( 26 27\twidget.ButtonOpts.TextLabel(\"Button\"), 28\twidget.ButtonOpts.TextFace(DefaultFont()), 29\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 30\tIdle: colornames.Gainsboro, 31\tHover: colornames.Gainsboro, 32\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 33\t}), 34\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 35\tIdle: DefaultNineSlice(colornames.Darkslategray), 36\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 37\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 38\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 39\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 40\t}), 41 42\twidget.ButtonOpts.IgnoreTransparentPixels(true), 43\twidget.ButtonOpts.CursorEnteredHandler( 44\tfunc(args *widget.ButtonHoverEventArgs) { 45\tvar b strings.Builder 46\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 47\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 48\tfmt.Print(b.String()) 49\t}, 50\t), 51 52\twidget.ButtonOpts.WidgetOpts( 53\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 54\tVerticalPosition: widget.AnchorLayoutPositionCenter, 55\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 56\t}), 57\twidget.WidgetOpts.MinSize(180, 48), 58\t), 59 60\t) 61 62\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 63\troot := widget.NewContainer( 64\twidget.ContainerOpts.BackgroundImage( 65\timage.NewNineSliceColor(colornames.Gainsboro), 66\t), 67\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 68\t) 69\troot.AddChild(button) 70 71\treturn \u0026Game{ 72\tui: \u0026ebitenui.UI{Container: root}, 73\t} 74} 75 76func (g *Game) Update() error { 77\tg.ui.Update() 78\treturn nil 79} 80 81func (g *Game) Draw(screen *ebiten.Image) { 82\tg.ui.Draw(screen) 83} 84 85func (g *Game) Layout(w, h int) (int, int) { 86\treturn w, h 87} 88 89func DefaultFont() text.Face { 90\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 91\tif err != nil { 92\tpanic(err) 93\t} 94\treturn \u0026text.GoTextFace{ 95\tSource: s, 96\tSize: 20, 97\t} 98} 99 100func DefaultNineSlice(base color.Color) *image.NineSlice { 101\tvar size float32 = 64 102\tvar tiles float32 = 16 103\tvar radius float32 = 8 104 105\ttile := size / tiles 106\tfacet := Mix(base, colornames.Gainsboro, 0.2) 107 108\timg := ebiten.NewImage(int(size), int(size)) 109\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 110\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 111\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 112\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 113\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 115 116\treturn image.NewNineSliceBorder(img, int(tile*4)) 117} 118 119func PressedNineSlice(base color.Color) *image.NineSlice { 120\tvar size float32 = 64 121\tvar tiles float32 = 16 122\tvar radius float32 = 8 123 124\ttile := size / tiles 125\tfacet := Mix(base, colornames.Gainsboro, 0.2) 126 127\timg := ebiten.NewImage(int(size), int(size)) 128\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 129\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 130\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 131\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 132 133\treturn image.NewNineSliceBorder(img, int(tile*4)) 134} 135 136func Mix(a, b color.Color, percent float64) color.Color { 137\trgba := func(c color.Color) (r, g, b, a uint8) { 138\tr16, g16, b16, a16 := c.RGBA() 139\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 140\t} 141\tlerp := func(x, y uint8) uint8 { 142\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 143\t} 144\tr1, g1, b1, a1 := rgba(a) 145\tr2, g2, b2, a2 := rgba(b) 146 147\treturn color.RGBA{ 148\tR: lerp(r1, r2), 149\tG: lerp(g1, g2), 150\tB: lerp(b1, b2), 151\tA: lerp(a1, a2), 152\t} 153} 154 155func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 156\tpath := \u0026vector.Path{} 157 158\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 159\tpath.LineTo(x+w, y+h-br) 160\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 161\tpath.LineTo(x+bl, y+h) 162\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 163\tpath.LineTo(x, y+tl) 164\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 165\tpath.Close() 166 167\treturn path 168} 169 170func main() { 171\tebiten.SetWindowSize(480, 320) 172\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 173\tif err := ebiten.RunGame(NewGame()); err != nil { 174\tpanic(err) 175\t} 176} 1button := widget.NewButton( 2\twidget.ButtonOpts.IgnoreTransparentPixels(false), 3\twidget.ButtonOpts.CursorEnteredHandler( 4\tfunc(args *widget.ButtonHoverEventArgs) { 5\tvar b strings.Builder 6\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 7\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8\tfmt.Print(b.String()) 9\t}, 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"bytes\" 5\t\"fmt\" 6\t\"image/color\" 7\t\"math\" 8\t\"strings\" 9\t\"github.com/ebitenui/ebitenui\" 10\t\"github.com/ebitenui/ebitenui/image\" 11\t\"github.com/ebitenui/ebitenui/widget\" 12\t\"github.com/hajimehoshi/ebiten/v2\" 13\t\"github.com/hajimehoshi/ebiten/v2/text/v2\" 14\t\"github.com/hajimehoshi/ebiten/v2/vector\" 15\t\"golang.org/x/image/font/gofont/goregular\" 16\t\"golang.org/x/image/colornames\" 17) 18 19type Game struct { 20\tui *ebitenui.UI 21} 22 23func NewGame() *Game { 24 25\tbutton := widget.NewButton( 26 27\twidget.ButtonOpts.TextLabel(\"Button\"), 28\twidget.ButtonOpts.TextFace(DefaultFont()), 29\twidget.ButtonOpts.TextColor(\u0026widget.ButtonTextColor{ 30\tIdle: colornames.Gainsboro, 31\tHover: colornames.Gainsboro, 32\tPressed: Mix(colornames.Gainsboro, colornames.Black, 0.4), 33\t}), 34\twidget.ButtonOpts.Image(\u0026widget.ButtonImage{ 35\tIdle: DefaultNineSlice(colornames.Darkslategray), 36\tHover: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Mediumseagreen, 0.4)), 37\tDisabled: DefaultNineSlice(Mix(colornames.Darkslategray, colornames.Gainsboro, 0.8)), 38\tPressed: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 39\tPressedHover: PressedNineSlice(Mix(colornames.Darkslategray, colornames.Black, 0.4)), 40\t}), 41 42\twidget.ButtonOpts.IgnoreTransparentPixels(false), 43\twidget.ButtonOpts.CursorEnteredHandler( 44\tfunc(args *widget.ButtonHoverEventArgs) { 45\tvar b strings.Builder 46\tfmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 47\tfmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 48\tfmt.Print(b.String()) 49\t}, 50\t), 51 52\twidget.ButtonOpts.WidgetOpts( 53\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 54\tVerticalPosition: widget.AnchorLayoutPositionCenter, 55\tHorizontalPosition: widget.AnchorLayoutPositionCenter, 56\t}), 57\twidget.WidgetOpts.MinSize(180, 48), 58\t), 59 60\t) 61 62\tbutton.GetWidget().CursorEnterEvent.Fire(\u0026widget.WidgetCursorEnterEventArgs{}) 63\troot := widget.NewContainer( 64\twidget.ContainerOpts.BackgroundImage( 65\timage.NewNineSliceColor(colornames.Gainsboro), 66\t), 67\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 68\t) 69\troot.AddChild(button) 70 71\treturn \u0026Game{ 72\tui: \u0026ebitenui.UI{Container: root}, 73\t} 74} 75 76func (g *Game) Update() error { 77\tg.ui.Update() 78\treturn nil 79} 80 81func (g *Game) Draw(screen *ebiten.Image) { 82\tg.ui.Draw(screen) 83} 84 85func (g *Game) Layout(w, h int) (int, int) { 86\treturn w, h 87} 88 89func DefaultFont() text.Face { 90\ts, err := text.NewGoTextFaceSource(bytes.NewReader(goregular.TTF)) 91\tif err != nil { 92\tpanic(err) 93\t} 94\treturn \u0026text.GoTextFace{ 95\tSource: s, 96\tSize: 20, 97\t} 98} 99 100func DefaultNineSlice(base color.Color) *image.NineSlice { 101\tvar size float32 = 64 102\tvar tiles float32 = 16 103\tvar radius float32 = 8 104 105\ttile := size / tiles 106\tfacet := Mix(base, colornames.Gainsboro, 0.2) 107 108\timg := ebiten.NewImage(int(size), int(size)) 109\tpath := RoundedRectPath(0, tile, size, size-tile, radius, radius, radius, radius) 110\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 111\tpath = RoundedRectPath(0, tile, size, size-tile*2, radius, radius, radius, radius) 112\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 113\tpath = RoundedRectPath(tile, tile*2, size-tile*2, size-tile*4, radius, radius, radius, radius) 114\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 115 116\treturn image.NewNineSliceBorder(img, int(tile*4)) 117} 118 119func PressedNineSlice(base color.Color) *image.NineSlice { 120\tvar size float32 = 64 121\tvar tiles float32 = 16 122\tvar radius float32 = 8 123 124\ttile := size / tiles 125\tfacet := Mix(base, colornames.Gainsboro, 0.2) 126 127\timg := ebiten.NewImage(int(size), int(size)) 128\tpath := RoundedRectPath(0, 0, size, size, radius, radius, radius, radius) 129\tvector.DrawFilledPath(img, path, facet, true, vector.FillRuleEvenOdd) 130\tpath = RoundedRectPath(tile, tile, size-tile*2, size-tile*2, radius, radius, radius, radius) 131\tvector.DrawFilledPath(img, path, base, true, vector.FillRuleEvenOdd) 132 133\treturn image.NewNineSliceBorder(img, int(tile*4)) 134} 135 136func Mix(a, b color.Color, percent float64) color.Color { 137\trgba := func(c color.Color) (r, g, b, a uint8) { 138\tr16, g16, b16, a16 := c.RGBA() 139\treturn uint8(r16 \u003e\u003e 8), uint8(g16 \u003e\u003e 8), uint8(b16 \u003e\u003e 8), uint8(a16 \u003e\u003e 8) 140\t} 141\tlerp := func(x, y uint8) uint8 { 142\treturn uint8(math.Round(float64(x) + percent*(float64(y)-float64(x)))) 143\t} 144\tr1, g1, b1, a1 := rgba(a) 145\tr2, g2, b2, a2 := rgba(b) 146 147\treturn color.RGBA{ 148\tR: lerp(r1, r2), 149\tG: lerp(g1, g2), 150\tB: lerp(b1, b2), 151\tA: lerp(a1, a2), 152\t} 153} 154 155func RoundedRectPath(x, y, w, h, tl, tr, br, bl float32) *vector.Path { 156\tpath := \u0026vector.Path{} 157 158\tpath.Arc(x+w-tr, y+tr, tr, 3*math.Pi/2, 0, vector.Clockwise) 159\tpath.LineTo(x+w, y+h-br) 160\tpath.Arc(x+w-br, y+h-br, br, 0, math.Pi/2, vector.Clockwise) 161\tpath.LineTo(x+bl, y+h) 162\tpath.Arc(x+bl, y+h-bl, bl, math.Pi/2, math.Pi, vector.Clockwise) 163\tpath.LineTo(x, y+tl) 164\tpath.Arc(x+tl, y+tl, tl, math.Pi, 3*math.Pi/2, vector.Clockwise) 165\tpath.Close() 166 167\treturn path 168} 169 170func main() { 171\tebiten.SetWindowSize(480, 320) 172\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 173\tif err := ebiten.RunGame(NewGame()); err != nil { 174\tpanic(err) 175\t} 176} Widget handlers Clicked Handler Triggered when a release is performed anywhere after a press, its the default in most cases.\n1button := widget.NewButton( 2 widget.ButtonOpts.ClickedHandler( 3 func(args *widget.ButtonClickedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Clicked\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Print(b.String()) 8 }, 9 ), 10) Pressed Handler Triggered when a press is performed inside a widget, useful for long presses with different timings.\n1button := widget.NewButton( 2 widget.ButtonOpts.PressedHandler( 3 func(args *widget.ButtonPressedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Pressed\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Print(b.String()) 8 }, 9 ), 10) Released Handler Triggered when a release is performed inside a widget, useful for drag-n-drop things from one widget to another.\n1button := widget.NewButton( 2 widget.ButtonOpts.ReleasedHandler( 3 func(args *widget.ButtonReleasedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button Released\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Inside: %v\\n\", args.Inside) 7 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Entered Handler Triggered when the cursor enters the button area.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorEnteredHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Entered\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Moved Handler Triggered when the cursor moves within the button area between entered and exited events.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorMovedHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Moved\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) Cursor Exited Handler Triggered when the cursor exits the button area.\n1button := widget.NewButton( 2 widget.ButtonOpts.CursorExitedHandler( 3 func(args *widget.ButtonHoverEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Cursor Exited\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 7 fmt.Fprintf(\u0026b, \"\u003e Diff: %d, %d\\n\", args.DiffX, args.DiffY) 8 fmt.Print(b.String()) 9 }, 10 ), 11) State Changed Handler Triggered when the button’s state changes like disabled, hovered, pressed, etc.\n1button := widget.NewButton( 2 widget.ButtonOpts.StateChangedHandler( 3 func(args *widget.ButtonChangedEventArgs) { 4 var b strings.Builder 5 fmt.Fprintf(\u0026b, \"Button State Changed\\n\") 6 fmt.Fprintf(\u0026b, \"\u003e State: %v\\n\", args.State) 7 fmt.Fprintf(\u0026b, \"\u003e Offset: %d, %d\\n\", args.OffsetX, args.OffsetY) 8 fmt.Print(b.String()) 9 }, 10 ), 11)",
    "description": "A simple button with text that can be set to a background color or image for each state and a callback to react to events.",
    "tags": [],
    "title": "Button",
    "uri": "/widgets/button/index.html"
  },
  {
    "breadcrumb": "Basics",
    "content": "The most basic way to present the user interface in an application is to break it up into nested containers with different layouts, inside which widgets are located for interaction.\nThe library provides a rendering manager in which you will place your entire UI. The manager is located in ebitenui package.\n1import \"github.com/ebitenui/ebitenui\" Manager needs to get constantly updated and drawed.\n1type Game struct { 2\tui *ebitenui.UI 3} 4 5 func NewGame() *Game { 6 return \u0026Game{ 7\tui: \u0026ebitenui.UI{}, 8\t} 9} 10 11func (g *Game) Update() error { 12\tg.ui.Update() 13\treturn nil 14} 15 16func (g *Game) Draw(screen *ebiten.Image) { 17\tg.ui.Draw(screen) 18} Any UI in this library consists of containers that are nested in each other. Container is located in widget package.\n1import \"github.com/ebitenui/ebitenui/widget\" The manager is contains a reference to the root container and responsible for delivering events throughout the user interface. Let’s pass our container there so we can interact with it. There is only one container type which can be created like this.\n1func NewGame() *Game { 2 root := widget.NewContainer() 3 return \u0026Game{ 4 ui: \u0026ebitenui.UI{Container: root}, 5 } 6} The standard library has a package with default colors that that will be useful to us, like: Indianred\r, Goldenrod\r, Steelblue\r, Mediumseagreen\r, Darkslategray\r, Gainsboro\r.\n1import \"golang.org/x/image/colornames\" The library draws all interface elements using multiple image tiles also known as nine-slice to prevent image scaling distortion. That package will help us to work with images.\n1import \"github.com/ebitenui/ebitenui/image\" We have everything to get the first result. The container have several options to setup, like background color.\n1root := widget.NewContainer( 2 widget.ContainerOpts.BackgroundImage( 3 image.NewNineSliceColor(colornames.Gainsboro), 4 ), 5) Lets run the app. We will see a single container that will take up all the free space.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\troot := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Gainsboro), 19\t), 20\t) 21 22\treturn \u0026Game{ 23\tui: \u0026ebitenui.UI{Container: root}, 24\t} 25} 26 27func (g *Game) Update() error { 28\tg.ui.Update() 29\treturn nil 30} 31 32func (g *Game) Draw(screen *ebiten.Image) { 33\tg.ui.Draw(screen) 34} 35 36func (g *Game) Layout(w, h int) (int, int) { 37\treturn w, h 38} 39 40func main() { 41\tebiten.SetWindowSize(480, 320) 42\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 43\tif err := ebiten.RunGame(NewGame()); err != nil { 44\tpanic(err) 45\t} 46} Containers can be composed into each other. The order adding child containers does not matter.\n1left := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5) 6right := widget.NewContainer( 7\twidget.ContainerOpts.BackgroundImage( 8\timage.NewNineSliceColor(assets.Steelblue), 9\t), 10) 11root := widget.NewContainer( 12\twidget.ContainerOpts.BackgroundImage( 13\timage.NewNineSliceColor(colornames.Gainsboro), 14\t), 15) 16root.AddChild(left) 17root.AddChild(right) To prevent child containers from overlapping each other, we can specify how they are positioned within the parent container using other container properties, such as layout.\n1root := widget.NewContainer( 2 widget.ContainerOpts.Layout(widget.NewAnchorLayout()), 3) Positioning within the layout is specified by the LayoutData structure inside each container. In addition, at least, each container must have a minimum size.\n1left := widget.NewContainer( 2 widget.ContainerOpts.WidgetOpts( 3 widget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 4 HorizontalPosition: widget.AnchorLayoutPositionStart, 5 StretchVertical: true, 6 }), 7 widget.WidgetOpts.MinSize(50, 50), 8 ), 9) Let’s set similar options for other containers.\n1left := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 7\tHorizontalPosition: widget.AnchorLayoutPositionStart, 8\tStretchVertical: true, 9\t}), 10\twidget.WidgetOpts.MinSize(50, 50), 11\t), 12\t) 13\tright := widget.NewContainer( 14\twidget.ContainerOpts.BackgroundImage( 15\timage.NewNineSliceColor(colornames.Mediumseagreen), 16\t), 17\twidget.ContainerOpts.WidgetOpts( 18\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 19\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 20\tStretchVertical: true, 21\t}), 22\twidget.WidgetOpts.MinSize(50, 50), 23\t), 24\t) 25\troot := widget.NewContainer( 26\twidget.ContainerOpts.BackgroundImage( 27\timage.NewNineSliceColor(colornames.Gainsboro), 28\t), 29\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 30\t) 31\troot.AddChild(left) 32\troot.AddChild(right) Let’s launch the application. We will see one root container in background and two child containers inside at different position that will stretch vertically.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\tleft := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 23\tHorizontalPosition: widget.AnchorLayoutPositionStart, 24\tStretchVertical: true, 25\t}), 26\twidget.WidgetOpts.MinSize(50, 50), 27\t), 28\t) 29\tright := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Mediumseagreen), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.LayoutData(widget.AnchorLayoutData{ 35\tHorizontalPosition: widget.AnchorLayoutPositionEnd, 36\tStretchVertical: true, 37\t}), 38\twidget.WidgetOpts.MinSize(50, 50), 39\t), 40\t) 41\troot := widget.NewContainer( 42\twidget.ContainerOpts.BackgroundImage( 43\timage.NewNineSliceColor(colornames.Gainsboro), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(left) 48\troot.AddChild(right) 49 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} The library has several different layouts for different situations, you can study each of them in detail on the next pages.",
    "description": "The most basic way to present the user interface in an application is to break it up into nested containers with different layouts, inside which widgets are located for interaction.",
    "tags": [],
    "title": "Container \u0026 layouts",
    "uri": "/basics/container-layouts/index.html"
  },
  {
    "breadcrumb": "",
    "content": "The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.\nContent Anchor Row Grid",
    "description": "The library allows you to compose containers in many different ways, and this chapter will tell you about each of them.",
    "tags": [],
    "title": "Layouts",
    "uri": "/layouts/index.html"
  },
  {
    "breadcrumb": "Layouts",
    "content": "Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.\nFull example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 50), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 50), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 50), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 50), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 50), 69\t), 70\t) 71\troot := widget.NewContainer( 72\twidget.ContainerOpts.BackgroundImage( 73\timage.NewNineSliceColor(colornames.Gainsboro), 74\t), 75\twidget.ContainerOpts.Layout(widget.NewRowLayout( 76\twidget.RowLayoutOpts.Direction( 77\twidget.DirectionVertical, 78\t), 79\twidget.RowLayoutOpts.Spacing(5), 80\twidget.RowLayoutOpts.Padding(widget.NewInsetsSimple(25)), 81\t)), 82\t) 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} Layout options Direction Responsible for whether child containers will follow each other in rows or columns.\nDirection: Vertical Horizontal 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\t)), 81\t) 82 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionHorizontal, 79\t), 80\t)), 81\t) 82 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} Padding Layout allows you to specify padding for all child elements but not the itself. Please note that its not possible to specify padding at the end, so the direction will changed accordingly.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tLeft: 50, 11\t}), 12\t)), 13\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Padding(widget.Insets{ 81\tLeft: 50, 82\t}), 83\t)), 84\t) 85 86\troot.AddChild(a) 87\troot.AddChild(b) 88\troot.AddChild(c) 89\troot.AddChild(d) 90\troot.AddChild(e) 91 92\treturn \u0026Game{ 93\tui: \u0026ebitenui.UI{Container: root}, 94\t} 95} 96 97func (g *Game) Update() error { 98\tg.ui.Update() 99\treturn nil 100} 101 102func (g *Game) Draw(screen *ebiten.Image) { 103\tg.ui.Draw(screen) 104} 105 106func (g *Game) Layout(w, h int) (int, int) { 107\treturn w, h 108} 109 110func main() { 111\tebiten.SetWindowSize(480, 320) 112\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 113\tif err := ebiten.RunGame(NewGame()); err != nil { 114\tpanic(err) 115\t} 116} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tRight: 50, 11\t}), 12\t)), 13\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Padding(widget.Insets{ 81\tRight: 50, 82\t}), 83\t)), 84\t) 85 86\troot.AddChild(a) 87\troot.AddChild(b) 88\troot.AddChild(c) 89\troot.AddChild(d) 90\troot.AddChild(e) 91 92\treturn \u0026Game{ 93\tui: \u0026ebitenui.UI{Container: root}, 94\t} 95} 96 97func (g *Game) Update() error { 98\tg.ui.Update() 99\treturn nil 100} 101 102func (g *Game) Draw(screen *ebiten.Image) { 103\tg.ui.Draw(screen) 104} 105 106func (g *Game) Layout(w, h int) (int, int) { 107\treturn w, h 108} 109 110func main() { 111\tebiten.SetWindowSize(480, 320) 112\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 113\tif err := ebiten.RunGame(NewGame()); err != nil { 114\tpanic(err) 115\t} 116} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tTop: 50, 11\t}), 12\t)), 13\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionHorizontal, 79\t), 80\twidget.RowLayoutOpts.Padding(widget.Insets{ 81\tTop: 50, 82\t}), 83\t)), 84\t) 85 86\troot.AddChild(a) 87\troot.AddChild(b) 88\troot.AddChild(c) 89\troot.AddChild(d) 90\troot.AddChild(e) 91 92\treturn \u0026Game{ 93\tui: \u0026ebitenui.UI{Container: root}, 94\t} 95} 96 97func (g *Game) Update() error { 98\tg.ui.Update() 99\treturn nil 100} 101 102func (g *Game) Draw(screen *ebiten.Image) { 103\tg.ui.Draw(screen) 104} 105 106func (g *Game) Layout(w, h int) (int, int) { 107\treturn w, h 108} 109 110func main() { 111\tebiten.SetWindowSize(480, 320) 112\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 113\tif err := ebiten.RunGame(NewGame()); err != nil { 114\tpanic(err) 115\t} 116} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionHorizontal, 8\t), 9\twidget.RowLayoutOpts.Padding(widget.Insets{ 10\tBottom: 50, 11\t}), 12\t)), 13\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionHorizontal, 79\t), 80\twidget.RowLayoutOpts.Padding(widget.Insets{ 81\tBottom: 50, 82\t}), 83\t)), 84\t) 85 86\troot.AddChild(a) 87\troot.AddChild(b) 88\troot.AddChild(c) 89\troot.AddChild(d) 90\troot.AddChild(e) 91 92\treturn \u0026Game{ 93\tui: \u0026ebitenui.UI{Container: root}, 94\t} 95} 96 97func (g *Game) Update() error { 98\tg.ui.Update() 99\treturn nil 100} 101 102func (g *Game) Draw(screen *ebiten.Image) { 103\tg.ui.Draw(screen) 104} 105 106func (g *Game) Layout(w, h int) (int, int) { 107\treturn w, h 108} 109 110func main() { 111\tebiten.SetWindowSize(480, 320) 112\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 113\tif err := ebiten.RunGame(NewGame()); err != nil { 114\tpanic(err) 115\t} 116} Spacing Layout allows you to specify padding for all child elements but not the itself.\nSpacing: 0 25 50 75 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(0), 10\t)), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Spacing(0), 81\t)), 82\t) 83 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(25), 10\t)), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Spacing(25), 81\t)), 82\t) 83 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(50), 10\t)), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Spacing(50), 81\t)), 82\t) 83 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewRowLayout( 6\twidget.RowLayoutOpts.Direction( 7\twidget.DirectionVertical, 8\t), 9\twidget.RowLayoutOpts.Spacing(75), 10\t)), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16\ta := widget.NewContainer( 17\twidget.ContainerOpts.BackgroundImage( 18\timage.NewNineSliceColor(colornames.Indianred), 19\t), 20\twidget.ContainerOpts.WidgetOpts( 21\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 22\tStretch: true, 23\t}), 24\twidget.WidgetOpts.MinSize(96, 64), 25\t), 26\t) 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 33\tStretch: true, 34\t}), 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 44\tStretch: true, 45\t}), 46\twidget.WidgetOpts.MinSize(96, 64), 47\t), 48\t) 49\td := widget.NewContainer( 50\twidget.ContainerOpts.BackgroundImage( 51\timage.NewNineSliceColor(colornames.Mediumseagreen), 52\t), 53\twidget.ContainerOpts.WidgetOpts( 54\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 55\tStretch: true, 56\t}), 57\twidget.WidgetOpts.MinSize(96, 64), 58\t), 59\t) 60\te := widget.NewContainer( 61\twidget.ContainerOpts.BackgroundImage( 62\timage.NewNineSliceColor(colornames.Darkslategray), 63\t), 64\twidget.ContainerOpts.WidgetOpts( 65\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 66\tStretch: true, 67\t}), 68\twidget.WidgetOpts.MinSize(96, 64), 69\t), 70\t) 71 72\troot := widget.NewContainer( 73\twidget.ContainerOpts.BackgroundImage( 74\timage.NewNineSliceColor(colornames.Gainsboro), 75\t), 76\twidget.ContainerOpts.Layout(widget.NewRowLayout( 77\twidget.RowLayoutOpts.Direction( 78\twidget.DirectionVertical, 79\t), 80\twidget.RowLayoutOpts.Spacing(75), 81\t)), 82\t) 83 84\troot.AddChild(a) 85\troot.AddChild(b) 86\troot.AddChild(c) 87\troot.AddChild(d) 88\troot.AddChild(e) 89 90\treturn \u0026Game{ 91\tui: \u0026ebitenui.UI{Container: root}, 92\t} 93} 94 95func (g *Game) Update() error { 96\tg.ui.Update() 97\treturn nil 98} 99 100func (g *Game) Draw(screen *ebiten.Image) { 101\tg.ui.Draw(screen) 102} 103 104func (g *Game) Layout(w, h int) (int, int) { 105\treturn w, h 106} 107 108func main() { 109\tebiten.SetWindowSize(480, 320) 110\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 111\tif err := ebiten.RunGame(NewGame()); err != nil { 112\tpanic(err) 113\t} 114} Layout data Stretch Responsible for stretching the element along the entire length of the opposite axis.\nStretch: False True 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tStretch: false, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tStretch: false, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 35\tStretch: false, 36\t}), 37\twidget.WidgetOpts.MinSize(96, 64), 38\t), 39\t) 40\tc := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Steelblue), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 46\tStretch: false, 47\t}), 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\td := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Mediumseagreen), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 57\tStretch: false, 58\t}), 59\twidget.WidgetOpts.MinSize(96, 64), 60\t), 61\t) 62\te := widget.NewContainer( 63\twidget.ContainerOpts.BackgroundImage( 64\timage.NewNineSliceColor(colornames.Darkslategray), 65\t), 66\twidget.ContainerOpts.WidgetOpts( 67\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 68\tStretch: false, 69\t}), 70\twidget.WidgetOpts.MinSize(96, 64), 71\t), 72\t) 73\troot := widget.NewContainer( 74\twidget.ContainerOpts.BackgroundImage( 75\timage.NewNineSliceColor(colornames.Gainsboro), 76\t), 77\twidget.ContainerOpts.Layout(widget.NewRowLayout( 78\twidget.RowLayoutOpts.Direction( 79\twidget.DirectionVertical, 80\t), 81\t)), 82\t) 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tStretch: true, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tStretch: true, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 35\tStretch: false, 36\t}), 37\twidget.WidgetOpts.MinSize(96, 64), 38\t), 39\t) 40\tc := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colornames.Steelblue), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 46\tStretch: false, 47\t}), 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\td := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Mediumseagreen), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 57\tStretch: false, 58\t}), 59\twidget.WidgetOpts.MinSize(96, 64), 60\t), 61\t) 62\te := widget.NewContainer( 63\twidget.ContainerOpts.BackgroundImage( 64\timage.NewNineSliceColor(colornames.Darkslategray), 65\t), 66\twidget.ContainerOpts.WidgetOpts( 67\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 68\tStretch: false, 69\t}), 70\twidget.WidgetOpts.MinSize(96, 64), 71\t), 72\t) 73\troot := widget.NewContainer( 74\twidget.ContainerOpts.BackgroundImage( 75\timage.NewNineSliceColor(colornames.Gainsboro), 76\t), 77\twidget.ContainerOpts.Layout(widget.NewRowLayout( 78\twidget.RowLayoutOpts.Direction( 79\twidget.DirectionVertical, 80\t), 81\t)), 82\t) 83\troot.AddChild(a) 84\troot.AddChild(b) 85\troot.AddChild(c) 86\troot.AddChild(d) 87\troot.AddChild(e) 88 89\treturn \u0026Game{ 90\tui: \u0026ebitenui.UI{Container: root}, 91\t} 92} 93 94func (g *Game) Update() error { 95\tg.ui.Update() 96\treturn nil 97} 98 99func (g *Game) Draw(screen *ebiten.Image) { 100\tg.ui.Draw(screen) 101} 102 103func (g *Game) Layout(w, h int) (int, int) { 104\treturn w, h 105} 106 107func main() { 108\tebiten.SetWindowSize(480, 320) 109\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 110\tif err := ebiten.RunGame(NewGame()); err != nil { 111\tpanic(err) 112\t} 113} Position Responsible for aligning the element along the opposite axis if it is not stretched.\nPosition: Start Center End 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionStart, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tPosition: widget.RowLayoutPositionStart, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.MinSize(96, 64), 35\t), 36\t) 37\tc := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colornames.Steelblue), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.MinSize(96, 64), 43\t), 44\t) 45\td := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Mediumseagreen), 48\t), 49\twidget.ContainerOpts.WidgetOpts( 50\twidget.WidgetOpts.MinSize(96, 64), 51\t), 52\t) 53\te := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Darkslategray), 56\t), 57\twidget.ContainerOpts.WidgetOpts( 58\twidget.WidgetOpts.MinSize(96, 64), 59\t), 60\t) 61\troot := widget.NewContainer( 62\twidget.ContainerOpts.BackgroundImage( 63\timage.NewNineSliceColor(colornames.Gainsboro), 64\t), 65\twidget.ContainerOpts.Layout(widget.NewRowLayout( 66\twidget.RowLayoutOpts.Direction( 67\twidget.DirectionVertical, 68\t), 69\t)), 70\t) 71\troot.AddChild(a) 72\troot.AddChild(b) 73\troot.AddChild(c) 74\troot.AddChild(d) 75\troot.AddChild(e) 76 77\treturn \u0026Game{ 78\tui: \u0026ebitenui.UI{Container: root}, 79\t} 80} 81 82func (g *Game) Update() error { 83\tg.ui.Update() 84\treturn nil 85} 86 87func (g *Game) Draw(screen *ebiten.Image) { 88\tg.ui.Draw(screen) 89} 90 91func (g *Game) Layout(w, h int) (int, int) { 92\treturn w, h 93} 94 95func main() { 96\tebiten.SetWindowSize(480, 320) 97\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 98\tif err := ebiten.RunGame(NewGame()); err != nil { 99\tpanic(err) 100\t} 101} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionCenter, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tPosition: widget.RowLayoutPositionCenter, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.MinSize(96, 64), 35\t), 36\t) 37\tc := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colornames.Steelblue), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.MinSize(96, 64), 43\t), 44\t) 45\td := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Mediumseagreen), 48\t), 49\twidget.ContainerOpts.WidgetOpts( 50\twidget.WidgetOpts.MinSize(96, 64), 51\t), 52\t) 53\te := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Darkslategray), 56\t), 57\twidget.ContainerOpts.WidgetOpts( 58\twidget.WidgetOpts.MinSize(96, 64), 59\t), 60\t) 61\troot := widget.NewContainer( 62\twidget.ContainerOpts.BackgroundImage( 63\timage.NewNineSliceColor(colornames.Gainsboro), 64\t), 65\twidget.ContainerOpts.Layout(widget.NewRowLayout( 66\twidget.RowLayoutOpts.Direction( 67\twidget.DirectionVertical, 68\t), 69\t)), 70\t) 71\troot.AddChild(a) 72\troot.AddChild(b) 73\troot.AddChild(c) 74\troot.AddChild(d) 75\troot.AddChild(e) 76 77\treturn \u0026Game{ 78\tui: \u0026ebitenui.UI{Container: root}, 79\t} 80} 81 82func (g *Game) Update() error { 83\tg.ui.Update() 84\treturn nil 85} 86 87func (g *Game) Draw(screen *ebiten.Image) { 88\tg.ui.Draw(screen) 89} 90 91func (g *Game) Layout(w, h int) (int, int) { 92\treturn w, h 93} 94 95func main() { 96\tebiten.SetWindowSize(480, 320) 97\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 98\tif err := ebiten.RunGame(NewGame()); err != nil { 99\tpanic(err) 100\t} 101} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tPosition: widget.RowLayoutPositionEnd, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tPosition: widget.RowLayoutPositionEnd, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.MinSize(96, 64), 35\t), 36\t) 37\tc := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colornames.Steelblue), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.MinSize(96, 64), 43\t), 44\t) 45\td := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Mediumseagreen), 48\t), 49\twidget.ContainerOpts.WidgetOpts( 50\twidget.WidgetOpts.MinSize(96, 64), 51\t), 52\t) 53\te := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Darkslategray), 56\t), 57\twidget.ContainerOpts.WidgetOpts( 58\twidget.WidgetOpts.MinSize(96, 64), 59\t), 60\t) 61\troot := widget.NewContainer( 62\twidget.ContainerOpts.BackgroundImage( 63\timage.NewNineSliceColor(colornames.Gainsboro), 64\t), 65\twidget.ContainerOpts.Layout(widget.NewRowLayout( 66\twidget.RowLayoutOpts.Direction( 67\twidget.DirectionVertical, 68\t), 69\t)), 70\t) 71\troot.AddChild(a) 72\troot.AddChild(b) 73\troot.AddChild(c) 74\troot.AddChild(d) 75\troot.AddChild(e) 76 77\treturn \u0026Game{ 78\tui: \u0026ebitenui.UI{Container: root}, 79\t} 80} 81 82func (g *Game) Update() error { 83\tg.ui.Update() 84\treturn nil 85} 86 87func (g *Game) Draw(screen *ebiten.Image) { 88\tg.ui.Draw(screen) 89} 90 91func (g *Game) Layout(w, h int) (int, int) { 92\treturn w, h 93} 94 95func main() { 96\tebiten.SetWindowSize(480, 320) 97\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 98\tif err := ebiten.RunGame(NewGame()); err != nil { 99\tpanic(err) 100\t} 101} Max size Responsible for the allowable size of the container.\nMax: None Width Height Both 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{}), 7\twidget.WidgetOpts.MinSize(96, 64), 8\t), 9\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{}), 23\twidget.WidgetOpts.MinSize(96, 64), 24\t), 25\t) 26 27\tb := widget.NewContainer( 28\twidget.ContainerOpts.BackgroundImage( 29\timage.NewNineSliceColor(colornames.Goldenrod), 30\t), 31\twidget.ContainerOpts.WidgetOpts( 32\twidget.WidgetOpts.MinSize(96, 64), 33\t), 34\t) 35\tc := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colornames.Steelblue), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.MinSize(96, 64), 41\t), 42\t) 43\td := widget.NewContainer( 44\twidget.ContainerOpts.BackgroundImage( 45\timage.NewNineSliceColor(colornames.Mediumseagreen), 46\t), 47\twidget.ContainerOpts.WidgetOpts( 48\twidget.WidgetOpts.MinSize(96, 64), 49\t), 50\t) 51\te := widget.NewContainer( 52\twidget.ContainerOpts.BackgroundImage( 53\timage.NewNineSliceColor(colornames.Darkslategray), 54\t), 55\twidget.ContainerOpts.WidgetOpts( 56\twidget.WidgetOpts.MinSize(96, 64), 57\t), 58\t) 59\troot := widget.NewContainer( 60\twidget.ContainerOpts.BackgroundImage( 61\timage.NewNineSliceColor(colornames.Gainsboro), 62\t), 63\twidget.ContainerOpts.Layout(widget.NewRowLayout( 64\twidget.RowLayoutOpts.Direction( 65\twidget.DirectionVertical, 66\t), 67\t)), 68\t) 69\troot.AddChild(a) 70\troot.AddChild(b) 71\troot.AddChild(c) 72\troot.AddChild(d) 73\troot.AddChild(e) 74 75\treturn \u0026Game{ 76\tui: \u0026ebitenui.UI{Container: root}, 77\t} 78} 79 80func (g *Game) Update() error { 81\tg.ui.Update() 82\treturn nil 83} 84 85func (g *Game) Draw(screen *ebiten.Image) { 86\tg.ui.Draw(screen) 87} 88 89func (g *Game) Layout(w, h int) (int, int) { 90\treturn w, h 91} 92 93func main() { 94\tebiten.SetWindowSize(480, 320) 95\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 96\tif err := ebiten.RunGame(NewGame()); err != nil { 97\tpanic(err) 98\t} 99} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxWidth: 20, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tMaxWidth: 20, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.MinSize(96, 64), 35\t), 36\t) 37\tc := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colornames.Steelblue), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.MinSize(96, 64), 43\t), 44\t) 45\td := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Mediumseagreen), 48\t), 49\twidget.ContainerOpts.WidgetOpts( 50\twidget.WidgetOpts.MinSize(96, 64), 51\t), 52\t) 53\te := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Darkslategray), 56\t), 57\twidget.ContainerOpts.WidgetOpts( 58\twidget.WidgetOpts.MinSize(96, 64), 59\t), 60\t) 61\troot := widget.NewContainer( 62\twidget.ContainerOpts.BackgroundImage( 63\timage.NewNineSliceColor(colornames.Gainsboro), 64\t), 65\twidget.ContainerOpts.Layout(widget.NewRowLayout( 66\twidget.RowLayoutOpts.Direction( 67\twidget.DirectionVertical, 68\t), 69\t)), 70\t) 71\troot.AddChild(a) 72\troot.AddChild(b) 73\troot.AddChild(c) 74\troot.AddChild(d) 75\troot.AddChild(e) 76 77\treturn \u0026Game{ 78\tui: \u0026ebitenui.UI{Container: root}, 79\t} 80} 81 82func (g *Game) Update() error { 83\tg.ui.Update() 84\treturn nil 85} 86 87func (g *Game) Draw(screen *ebiten.Image) { 88\tg.ui.Draw(screen) 89} 90 91func (g *Game) Layout(w, h int) (int, int) { 92\treturn w, h 93} 94 95func main() { 96\tebiten.SetWindowSize(480, 320) 97\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 98\tif err := ebiten.RunGame(NewGame()); err != nil { 99\tpanic(err) 100\t} 101} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxHeight: 20, 8\t}), 9\twidget.WidgetOpts.MinSize(96, 64), 10\t), 11\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tMaxHeight: 20, 24\t}), 25\twidget.WidgetOpts.MinSize(96, 64), 26\t), 27\t) 28 29\tb := widget.NewContainer( 30\twidget.ContainerOpts.BackgroundImage( 31\timage.NewNineSliceColor(colornames.Goldenrod), 32\t), 33\twidget.ContainerOpts.WidgetOpts( 34\twidget.WidgetOpts.MinSize(96, 64), 35\t), 36\t) 37\tc := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colornames.Steelblue), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.MinSize(96, 64), 43\t), 44\t) 45\td := widget.NewContainer( 46\twidget.ContainerOpts.BackgroundImage( 47\timage.NewNineSliceColor(colornames.Mediumseagreen), 48\t), 49\twidget.ContainerOpts.WidgetOpts( 50\twidget.WidgetOpts.MinSize(96, 64), 51\t), 52\t) 53\te := widget.NewContainer( 54\twidget.ContainerOpts.BackgroundImage( 55\timage.NewNineSliceColor(colornames.Darkslategray), 56\t), 57\twidget.ContainerOpts.WidgetOpts( 58\twidget.WidgetOpts.MinSize(96, 64), 59\t), 60\t) 61\troot := widget.NewContainer( 62\twidget.ContainerOpts.BackgroundImage( 63\timage.NewNineSliceColor(colornames.Gainsboro), 64\t), 65\twidget.ContainerOpts.Layout(widget.NewRowLayout( 66\twidget.RowLayoutOpts.Direction( 67\twidget.DirectionVertical, 68\t), 69\t)), 70\t) 71\troot.AddChild(a) 72\troot.AddChild(b) 73\troot.AddChild(c) 74\troot.AddChild(d) 75\troot.AddChild(e) 76 77\treturn \u0026Game{ 78\tui: \u0026ebitenui.UI{Container: root}, 79\t} 80} 81 82func (g *Game) Update() error { 83\tg.ui.Update() 84\treturn nil 85} 86 87func (g *Game) Draw(screen *ebiten.Image) { 88\tg.ui.Draw(screen) 89} 90 91func (g *Game) Layout(w, h int) (int, int) { 92\treturn w, h 93} 94 95func main() { 96\tebiten.SetWindowSize(480, 320) 97\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 98\tif err := ebiten.RunGame(NewGame()); err != nil { 99\tpanic(err) 100\t} 101} 1a := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Indianred), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 7\tMaxWidth: 20, 8\tMaxHeight: 20, 9\t}), 10\twidget.WidgetOpts.MinSize(96, 64), 11\t), 12\t) Full example 1package main 2 3import ( 4\t\"github.com/ebitenui/ebitenui\" 5\t\"github.com/ebitenui/ebitenui/image\" 6\t\"github.com/ebitenui/ebitenui/widget\" 7\t\"github.com/hajimehoshi/ebiten/v2\" 8\t\"golang.org/x/image/colornames\" 9) 10 11type Game struct { 12\tui *ebitenui.UI 13} 14 15func NewGame() *Game { 16 17\ta := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Indianred), 20\t), 21\twidget.ContainerOpts.WidgetOpts( 22\twidget.WidgetOpts.LayoutData(widget.RowLayoutData{ 23\tMaxWidth: 20, 24\tMaxHeight: 20, 25\t}), 26\twidget.WidgetOpts.MinSize(96, 64), 27\t), 28\t) 29 30\tb := widget.NewContainer( 31\twidget.ContainerOpts.BackgroundImage( 32\timage.NewNineSliceColor(colornames.Goldenrod), 33\t), 34\twidget.ContainerOpts.WidgetOpts( 35\twidget.WidgetOpts.MinSize(96, 64), 36\t), 37\t) 38\tc := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colornames.Steelblue), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.MinSize(96, 64), 44\t), 45\t) 46\td := widget.NewContainer( 47\twidget.ContainerOpts.BackgroundImage( 48\timage.NewNineSliceColor(colornames.Mediumseagreen), 49\t), 50\twidget.ContainerOpts.WidgetOpts( 51\twidget.WidgetOpts.MinSize(96, 64), 52\t), 53\t) 54\te := widget.NewContainer( 55\twidget.ContainerOpts.BackgroundImage( 56\timage.NewNineSliceColor(colornames.Darkslategray), 57\t), 58\twidget.ContainerOpts.WidgetOpts( 59\twidget.WidgetOpts.MinSize(96, 64), 60\t), 61\t) 62\troot := widget.NewContainer( 63\twidget.ContainerOpts.BackgroundImage( 64\timage.NewNineSliceColor(colornames.Gainsboro), 65\t), 66\twidget.ContainerOpts.Layout(widget.NewRowLayout( 67\twidget.RowLayoutOpts.Direction( 68\twidget.DirectionVertical, 69\t), 70\t)), 71\t) 72\troot.AddChild(a) 73\troot.AddChild(b) 74\troot.AddChild(c) 75\troot.AddChild(d) 76\troot.AddChild(e) 77 78\treturn \u0026Game{ 79\tui: \u0026ebitenui.UI{Container: root}, 80\t} 81} 82 83func (g *Game) Update() error { 84\tg.ui.Update() 85\treturn nil 86} 87 88func (g *Game) Draw(screen *ebiten.Image) { 89\tg.ui.Draw(screen) 90} 91 92func (g *Game) Layout(w, h int) (int, int) { 93\treturn w, h 94} 95 96func main() { 97\tebiten.SetWindowSize(480, 320) 98\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 99\tif err := ebiten.RunGame(NewGame()); err != nil { 100\tpanic(err) 101\t} 102}",
    "description": "Row layout places all child containers in one row or column. It can be useful for creating lists of widgets.",
    "tags": [],
    "title": "Row",
    "uri": "/layouts/row/index.html"
  },
  {
    "breadcrumb": "",
    "content": "The library provides many ways to interact with your composite layout, and this chapter will tell you about each of them.\nContent Button",
    "description": "The library provides many ways to interact with your composite layout, and this chapter will tell you about each of them.",
    "tags": [],
    "title": "Widgets",
    "uri": "/widgets/index.html"
  },
  {
    "breadcrumb": "Layouts",
    "content": "Grid layout puts all child containers in an even grid, wrapping each row based on the number of columns.\nFull example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10\t\"golang.org/x/image/colornames\" 11) 12 13type Game struct { 14\tui *ebitenui.UI 15} 16 17func NewGame() *Game { 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.NewInsetsSimple(25)), 26\twidget.GridLayoutOpts.Spacing(5, 5), 27\t)), 28\t) 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Layout options Columns Responsible for wrapping cells beyond a given number.\nStretch: 1 2 3 4 5 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(1), 7\t)), 8\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(1), 24\t)), 25\t) 26 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor i := 0; i \u003c 5; i++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[i%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47 48\treturn \u0026Game{ 49\tui: \u0026ebitenui.UI{Container: root}, 50\t} 51} 52 53func (g *Game) Update() error { 54\tg.ui.Update() 55\treturn nil 56} 57 58func (g *Game) Draw(screen *ebiten.Image) { 59\tg.ui.Draw(screen) 60} 61 62func (g *Game) Layout(w, h int) (int, int) { 63\treturn w, h 64} 65 66func main() { 67\tebiten.SetWindowSize(480, 320) 68\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 69\tif err := ebiten.RunGame(NewGame()); err != nil { 70\tpanic(err) 71\t} 72} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(2), 7\t)), 8\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(2), 24\t)), 25\t) 26 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor i := 0; i \u003c 5; i++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[i%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47 48\treturn \u0026Game{ 49\tui: \u0026ebitenui.UI{Container: root}, 50\t} 51} 52 53func (g *Game) Update() error { 54\tg.ui.Update() 55\treturn nil 56} 57 58func (g *Game) Draw(screen *ebiten.Image) { 59\tg.ui.Draw(screen) 60} 61 62func (g *Game) Layout(w, h int) (int, int) { 63\treturn w, h 64} 65 66func main() { 67\tebiten.SetWindowSize(480, 320) 68\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 69\tif err := ebiten.RunGame(NewGame()); err != nil { 70\tpanic(err) 71\t} 72} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(3), 7\t)), 8\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(3), 24\t)), 25\t) 26 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor i := 0; i \u003c 5; i++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[i%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47 48\treturn \u0026Game{ 49\tui: \u0026ebitenui.UI{Container: root}, 50\t} 51} 52 53func (g *Game) Update() error { 54\tg.ui.Update() 55\treturn nil 56} 57 58func (g *Game) Draw(screen *ebiten.Image) { 59\tg.ui.Draw(screen) 60} 61 62func (g *Game) Layout(w, h int) (int, int) { 63\treturn w, h 64} 65 66func main() { 67\tebiten.SetWindowSize(480, 320) 68\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 69\tif err := ebiten.RunGame(NewGame()); err != nil { 70\tpanic(err) 71\t} 72} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(4), 7\t)), 8\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(4), 24\t)), 25\t) 26 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor i := 0; i \u003c 5; i++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[i%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47 48\treturn \u0026Game{ 49\tui: \u0026ebitenui.UI{Container: root}, 50\t} 51} 52 53func (g *Game) Update() error { 54\tg.ui.Update() 55\treturn nil 56} 57 58func (g *Game) Draw(screen *ebiten.Image) { 59\tg.ui.Draw(screen) 60} 61 62func (g *Game) Layout(w, h int) (int, int) { 63\treturn w, h 64} 65 66func main() { 67\tebiten.SetWindowSize(480, 320) 68\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 69\tif err := ebiten.RunGame(NewGame()); err != nil { 70\tpanic(err) 71\t} 72} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\t)), 8\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\t)), 25\t) 26 27\tcolors := []color.Color{ 28\tcolornames.Indianred, 29\tcolornames.Goldenrod, 30\tcolornames.Steelblue, 31\tcolornames.Mediumseagreen, 32\tcolornames.Darkslategray, 33\t} 34\tfor i := 0; i \u003c 5; i++ { 35\tchild := widget.NewContainer( 36\twidget.ContainerOpts.BackgroundImage( 37\timage.NewNineSliceColor(colors[i%len(colors)]), 38\t), 39\twidget.ContainerOpts.WidgetOpts( 40\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 41\twidget.WidgetOpts.MinSize(64, 64), 42\t), 43\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 44\t) 45\troot.AddChild(child) 46\t} 47 48\treturn \u0026Game{ 49\tui: \u0026ebitenui.UI{Container: root}, 50\t} 51} 52 53func (g *Game) Update() error { 54\tg.ui.Update() 55\treturn nil 56} 57 58func (g *Game) Draw(screen *ebiten.Image) { 59\tg.ui.Draw(screen) 60} 61 62func (g *Game) Layout(w, h int) (int, int) { 63\treturn w, h 64} 65 66func main() { 67\tebiten.SetWindowSize(480, 320) 68\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 69\tif err := ebiten.RunGame(NewGame()); err != nil { 70\tpanic(err) 71\t} 72} Stretch Responsible for choosing cell coordinates across each axis that will evenly occupy the remaining space.\nStretch: AllxAll Allx3 3xAll 1x1 3x3 5x5 2,3,4x3 3x2,3,4 2,3,4x2,3,4 AllxOff OffxAll OffxOff 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{true, true, true, true, true}, 26\t[]bool{true, true, true, true, true}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{true, true, true, true, true}, 26\t[]bool{false, false, true, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, true, false, false}, 26\t[]bool{true, true, true, true, true}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, false, false, false, false}, 9\t[]bool{true, false, false, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{true, false, false, false, false}, 26\t[]bool{true, false, false, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, true, false, false}, 26\t[]bool{false, false, true, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, true}, 9\t[]bool{false, false, false, false, true}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, false, false, true}, 26\t[]bool{false, false, false, false, true}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, true, true, true, false}, 9\t[]bool{false, false, true, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, true, true, true, false}, 26\t[]bool{false, false, true, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, true, false, false}, 9\t[]bool{false, true, true, true, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, true, false, false}, 26\t[]bool{false, true, true, true, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, true, true, true, false}, 9\t[]bool{false, true, true, true, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, true, true, true, false}, 26\t[]bool{false, true, true, true, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{true, true, true, true, true}, 9\t[]bool{false, false, false, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{true, true, true, true, true}, 26\t[]bool{false, false, false, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, false}, 9\t[]bool{true, true, true, true, true}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, false, false, false}, 26\t[]bool{true, true, true, true, true}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.Stretch( 8\t[]bool{false, false, false, false, false}, 9\t[]bool{false, false, false, false, false}, 10\t), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.Stretch( 25\t[]bool{false, false, false, false, false}, 26\t[]bool{false, false, false, false, false}, 27\t), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} Default stretch Responsible for selecting all cells along each axis. Can be used instead of the previous option to avoid listing all cells. It can also be overridden by a regular property.\nStretch: TruexTrue TruexFalse FalsexTrue FalsexFalse 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\t)), 9\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\t)), 26\t) 27 28\tcolors := []color.Color{ 29\tcolornames.Indianred, 30\tcolornames.Goldenrod, 31\tcolornames.Steelblue, 32\tcolornames.Mediumseagreen, 33\tcolornames.Darkslategray, 34\t} 35\tfor y := 0; y \u003c 5; y++ { 36\tfor x := 0; x \u003c 5; x++ { 37\tchild := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 43\twidget.WidgetOpts.MinSize(16, 16), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, false), 8\t)), 9\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, false), 25\t)), 26\t) 27 28\tcolors := []color.Color{ 29\tcolornames.Indianred, 30\tcolornames.Goldenrod, 31\tcolornames.Steelblue, 32\tcolornames.Mediumseagreen, 33\tcolornames.Darkslategray, 34\t} 35\tfor y := 0; y \u003c 5; y++ { 36\tfor x := 0; x \u003c 5; x++ { 37\tchild := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 43\twidget.WidgetOpts.MinSize(16, 16), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(false, true), 8\t)), 9\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(false, true), 25\t)), 26\t) 27 28\tcolors := []color.Color{ 29\tcolornames.Indianred, 30\tcolornames.Goldenrod, 31\tcolornames.Steelblue, 32\tcolornames.Mediumseagreen, 33\tcolornames.Darkslategray, 34\t} 35\tfor y := 0; y \u003c 5; y++ { 36\tfor x := 0; x \u003c 5; x++ { 37\tchild := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 43\twidget.WidgetOpts.MinSize(16, 16), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(false, false), 8\t)), 9\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(false, false), 25\t)), 26\t) 27 28\tcolors := []color.Color{ 29\tcolornames.Indianred, 30\tcolornames.Goldenrod, 31\tcolornames.Steelblue, 32\tcolornames.Mediumseagreen, 33\tcolornames.Darkslategray, 34\t} 35\tfor y := 0; y \u003c 5; y++ { 36\tfor x := 0; x \u003c 5; x++ { 37\tchild := widget.NewContainer( 38\twidget.ContainerOpts.BackgroundImage( 39\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 40\t), 41\twidget.ContainerOpts.WidgetOpts( 42\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 43\twidget.WidgetOpts.MinSize(16, 16), 44\t), 45\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 46\t) 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} Padding Responsible for the offset of the parent container.\nPadding: Left Right Top Bottom 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tLeft: 50, 10\t}), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.Insets{ 26\tLeft: 50, 27\t}), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tRight: 50, 10\t}), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.Insets{ 26\tRight: 50, 27\t}), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tTop: 50, 10\t}), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.Insets{ 26\tTop: 50, 27\t}), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Padding(widget.Insets{ 9\tBottom: 50, 10\t}), 11\t)), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Padding(widget.Insets{ 26\tBottom: 50, 27\t}), 28\t)), 29\t) 30 31\tcolors := []color.Color{ 32\tcolornames.Indianred, 33\tcolornames.Goldenrod, 34\tcolornames.Steelblue, 35\tcolornames.Mediumseagreen, 36\tcolornames.Darkslategray, 37\t} 38\tfor y := 0; y \u003c 5; y++ { 39\tfor x := 0; x \u003c 5; x++ { 40\tchild := widget.NewContainer( 41\twidget.ContainerOpts.BackgroundImage( 42\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 43\t), 44\twidget.ContainerOpts.WidgetOpts( 45\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 46\twidget.WidgetOpts.MinSize(16, 16), 47\t), 48\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 49\t) 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} Spacing Responsible for the offset between child elements.\nSpacing: 0x0 0x25 25x0 25x25 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(0, 0), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Spacing(0, 0), 26\t)), 27\t) 28 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(0, 25), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Spacing(0, 25), 26\t)), 27\t) 28 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(25, 0), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Spacing(25, 0), 26\t)), 27\t) 28 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} 1root := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colornames.Gainsboro), 4\t), 5\twidget.ContainerOpts.Layout(widget.NewGridLayout( 6\twidget.GridLayoutOpts.Columns(5), 7\twidget.GridLayoutOpts.DefaultStretch(true, true), 8\twidget.GridLayoutOpts.Spacing(25, 25), 9\t)), 10\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17 18\troot := widget.NewContainer( 19\twidget.ContainerOpts.BackgroundImage( 20\timage.NewNineSliceColor(colornames.Gainsboro), 21\t), 22\twidget.ContainerOpts.Layout(widget.NewGridLayout( 23\twidget.GridLayoutOpts.Columns(5), 24\twidget.GridLayoutOpts.DefaultStretch(true, true), 25\twidget.GridLayoutOpts.Spacing(25, 25), 26\t)), 27\t) 28 29\tcolors := []color.Color{ 30\tcolornames.Indianred, 31\tcolornames.Goldenrod, 32\tcolornames.Steelblue, 33\tcolornames.Mediumseagreen, 34\tcolornames.Darkslategray, 35\t} 36\tfor y := 0; y \u003c 5; y++ { 37\tfor x := 0; x \u003c 5; x++ { 38\tchild := widget.NewContainer( 39\twidget.ContainerOpts.BackgroundImage( 40\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 41\t), 42\twidget.ContainerOpts.WidgetOpts( 43\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 44\twidget.WidgetOpts.MinSize(16, 16), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48\troot.AddChild(child) 49\t} 50\t} 51 52\treturn \u0026Game{ 53\tui: \u0026ebitenui.UI{Container: root}, 54\t} 55} 56 57func (g *Game) Update() error { 58\tg.ui.Update() 59\treturn nil 60} 61 62func (g *Game) Draw(screen *ebiten.Image) { 63\tg.ui.Draw(screen) 64} 65 66func (g *Game) Layout(w, h int) (int, int) { 67\treturn w, h 68} 69 70func main() { 71\tebiten.SetWindowSize(480, 320) 72\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 73\tif err := ebiten.RunGame(NewGame()); err != nil { 74\tpanic(err) 75\t} 76} Layout data Max size Responsible for the allowable size of the child containers.\nMax: None Width Height Both 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 7\twidget.WidgetOpts.MinSize(64, 64), 8\t), 9\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 10\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{}), 42\twidget.WidgetOpts.MinSize(64, 64), 43\t), 44\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 45\t) 46 47\troot.AddChild(child) 48\t} 49\t} 50 51\treturn \u0026Game{ 52\tui: \u0026ebitenui.UI{Container: root}, 53\t} 54} 55 56func (g *Game) Update() error { 57\tg.ui.Update() 58\treturn nil 59} 60 61func (g *Game) Draw(screen *ebiten.Image) { 62\tg.ui.Draw(screen) 63} 64 65func (g *Game) Layout(w, h int) (int, int) { 66\treturn w, h 67} 68 69func main() { 70\tebiten.SetWindowSize(480, 320) 71\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 72\tif err := ebiten.RunGame(NewGame()); err != nil { 73\tpanic(err) 74\t} 75} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\t}), 9\twidget.WidgetOpts.MinSize(64, 64), 10\t), 11\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\t}), 44\twidget.WidgetOpts.MinSize(64, 64), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48 49\troot.AddChild(child) 50\t} 51\t} 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func main() { 72\tebiten.SetWindowSize(480, 320) 73\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 74\tif err := ebiten.RunGame(NewGame()); err != nil { 75\tpanic(err) 76\t} 77} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxHeight: 32, 8\t}), 9\twidget.WidgetOpts.MinSize(64, 64), 10\t), 11\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 12\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxHeight: 32, 43\t}), 44\twidget.WidgetOpts.MinSize(64, 64), 45\t), 46\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 47\t) 48 49\troot.AddChild(child) 50\t} 51\t} 52 53\treturn \u0026Game{ 54\tui: \u0026ebitenui.UI{Container: root}, 55\t} 56} 57 58func (g *Game) Update() error { 59\tg.ui.Update() 60\treturn nil 61} 62 63func (g *Game) Draw(screen *ebiten.Image) { 64\tg.ui.Draw(screen) 65} 66 67func (g *Game) Layout(w, h int) (int, int) { 68\treturn w, h 69} 70 71func main() { 72\tebiten.SetWindowSize(480, 320) 73\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 74\tif err := ebiten.RunGame(NewGame()); err != nil { 75\tpanic(err) 76\t} 77} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\t}), 10\twidget.WidgetOpts.MinSize(64, 64), 11\t), 12\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 13\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\t}), 45\twidget.WidgetOpts.MinSize(64, 64), 46\t), 47\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 48\t) 49 50\troot.AddChild(child) 51\t} 52\t} 53 54\treturn \u0026Game{ 55\tui: \u0026ebitenui.UI{Container: root}, 56\t} 57} 58 59func (g *Game) Update() error { 60\tg.ui.Update() 61\treturn nil 62} 63 64func (g *Game) Draw(screen *ebiten.Image) { 65\tg.ui.Draw(screen) 66} 67 68func (g *Game) Layout(w, h int) (int, int) { 69\treturn w, h 70} 71 72func main() { 73\tebiten.SetWindowSize(480, 320) 74\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 75\tif err := ebiten.RunGame(NewGame()); err != nil { 76\tpanic(err) 77\t} 78} Position Responsible for the allowable size of the child containers. It works when the size of the cells is so limited by the maximum size that it is smaller than the size of the stretched cells that there is free space between them.\nPosition: StartxStart CenterxStart EndxStart StartxCenter CenterxCenter EndxCenter StartxEnd CenterxEnd EndxEnd 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionStart, 45\tVerticalPosition: widget.GridLayoutPositionStart, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionCenter, 45\tVerticalPosition: widget.GridLayoutPositionStart, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionStart, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionEnd, 45\tVerticalPosition: widget.GridLayoutPositionStart, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionStart, 45\tVerticalPosition: widget.GridLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionCenter, 45\tVerticalPosition: widget.GridLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionCenter, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionEnd, 45\tVerticalPosition: widget.GridLayoutPositionCenter, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionStart, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionStart, 45\tVerticalPosition: widget.GridLayoutPositionEnd, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionCenter, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionCenter, 45\tVerticalPosition: widget.GridLayoutPositionEnd, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80} 1child := widget.NewContainer( 2\twidget.ContainerOpts.BackgroundImage( 3\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 4\t), 5\twidget.ContainerOpts.WidgetOpts( 6\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 7\tMaxWidth: 32, 8\tMaxHeight: 32, 9\tHorizontalPosition: widget.GridLayoutPositionEnd, 10\tVerticalPosition: widget.GridLayoutPositionEnd, 11\t}), 12\twidget.WidgetOpts.MinSize(64, 64), 13\t), 14\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 15\t) Full example 1package main 2 3import ( 4\t\"image/color\" 5\t\"github.com/ebitenui/ebitenui\" 6\t\"github.com/ebitenui/ebitenui/image\" 7\t\"github.com/ebitenui/ebitenui/widget\" 8\t\"github.com/hajimehoshi/ebiten/v2\" 9\t\"golang.org/x/image/colornames\" 10) 11 12type Game struct { 13\tui *ebitenui.UI 14} 15 16func NewGame() *Game { 17\troot := widget.NewContainer( 18\twidget.ContainerOpts.BackgroundImage( 19\timage.NewNineSliceColor(colornames.Gainsboro), 20\t), 21\twidget.ContainerOpts.Layout(widget.NewGridLayout( 22\twidget.GridLayoutOpts.Columns(5), 23\twidget.GridLayoutOpts.DefaultStretch(true, true), 24\t)), 25\t) 26\tcolors := []color.Color{ 27\tcolornames.Indianred, 28\tcolornames.Goldenrod, 29\tcolornames.Steelblue, 30\tcolornames.Mediumseagreen, 31\tcolornames.Darkslategray, 32\t} 33\tfor y := 0; y \u003c 5; y++ { 34\tfor x := 0; x \u003c 5; x++ { 35 36\tchild := widget.NewContainer( 37\twidget.ContainerOpts.BackgroundImage( 38\timage.NewNineSliceColor(colors[(x+y)%len(colors)]), 39\t), 40\twidget.ContainerOpts.WidgetOpts( 41\twidget.WidgetOpts.LayoutData(widget.GridLayoutData{ 42\tMaxWidth: 32, 43\tMaxHeight: 32, 44\tHorizontalPosition: widget.GridLayoutPositionEnd, 45\tVerticalPosition: widget.GridLayoutPositionEnd, 46\t}), 47\twidget.WidgetOpts.MinSize(64, 64), 48\t), 49\twidget.ContainerOpts.Layout(widget.NewAnchorLayout()), 50\t) 51 52\troot.AddChild(child) 53\t} 54\t} 55 56\treturn \u0026Game{ 57\tui: \u0026ebitenui.UI{Container: root}, 58\t} 59} 60 61func (g *Game) Update() error { 62\tg.ui.Update() 63\treturn nil 64} 65 66func (g *Game) Draw(screen *ebiten.Image) { 67\tg.ui.Draw(screen) 68} 69 70func (g *Game) Layout(w, h int) (int, int) { 71\treturn w, h 72} 73 74func main() { 75\tebiten.SetWindowSize(480, 320) 76\tebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled) 77\tif err := ebiten.RunGame(NewGame()); err != nil { 78\tpanic(err) 79\t} 80}",
    "description": "Grid layout puts all child containers in an even grid, wrapping each row based on the number of columns.",
    "tags": [],
    "title": "Grid",
    "uri": "/layouts/grid/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
